{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/base/browser/window.ts","vs/base/browser/window.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAMhG,SAAgB,gBAAgB,CAAC,YAAoB,EAAE,gBAAwB;IAC9E,MAAM,UAAU,GAAG,YAAmC,CAAC;IAEvD,IAAI,OAAO,UAAU,CAAC,cAAc,KAAK,QAAQ,EAAE,CAAC;QACnD,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,gBAAgB,EAAE;YACnD,GAAG,EAAE,GAAG,EAAE,CAAC,gBAAgB;SAC3B,CAAC,CAAC;IACJ,CAAC;AACF,CAAC;AARD,4CAQC;AAED,iDAAiD;AACpC,QAAA,UAAU,GAAG,MAAoB,CAAC;AAE/C;;;;GAIG;AACU,QAAA,OAAO,GAAG,kBAAU,CAAC;AAElC,SAAgB,iBAAiB,CAAC,GAAW;IAC5C,IAAI,GAAG,KAAK,kBAAU,EAAE,CAAC;QACxB,OAAO,KAAK,CAAC;IACd,CAAC;IAED,MAAM,SAAS,GAAG,GAA6B,CAAC;IAEhD,OAAO,OAAO,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,cAAc,CAAA,KAAK,QAAQ,CAAC;AACtD,CAAC;AARD,8CAQC","file":"window.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport type CodeWindow = Window & typeof globalThis & {\n\treadonly vscodeWindowId: number;\n};\n\nexport function ensureCodeWindow(targetWindow: Window, fallbackWindowId: number): asserts targetWindow is CodeWindow {\n\tconst codeWindow = targetWindow as Partial<CodeWindow>;\n\n\tif (typeof codeWindow.vscodeWindowId !== 'number') {\n\t\tObject.defineProperty(codeWindow, 'vscodeWindowId', {\n\t\t\tget: () => fallbackWindowId\n\t\t});\n\t}\n}\n\n// eslint-disable-next-line no-restricted-globals\nexport const mainWindow = window as CodeWindow;\n\n/**\n * @deprecated to support multi-window scenarios, use `DOM.mainWindow`\n * if you target the main global window or use helpers such as `DOM.getWindow()`\n * or `DOM.getActiveWindow()` to obtain the correct window for the context you are in.\n */\nexport const $window = mainWindow;\n\nexport function isAuxiliaryWindow(obj: Window): obj is CodeWindow {\n\tif (obj === mainWindow) {\n\t\treturn false;\n\t}\n\n\tconst candidate = obj as CodeWindow | undefined;\n\n\treturn typeof candidate?.vscodeWindowId === 'number';\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport type CodeWindow = Window & typeof globalThis & {\n\treadonly vscodeWindowId: number;\n};\n\nexport function ensureCodeWindow(targetWindow: Window, fallbackWindowId: number): asserts targetWindow is CodeWindow {\n\tconst codeWindow = targetWindow as Partial<CodeWindow>;\n\n\tif (typeof codeWindow.vscodeWindowId !== 'number') {\n\t\tObject.defineProperty(codeWindow, 'vscodeWindowId', {\n\t\t\tget: () => fallbackWindowId\n\t\t});\n\t}\n}\n\n// eslint-disable-next-line no-restricted-globals\nexport const mainWindow = window as CodeWindow;\n\n/**\n * @deprecated to support multi-window scenarios, use `DOM.mainWindow`\n * if you target the main global window or use helpers such as `DOM.getWindow()`\n * or `DOM.getActiveWindow()` to obtain the correct window for the context you are in.\n */\nexport const $window = mainWindow;\n\nexport function isAuxiliaryWindow(obj: Window): obj is CodeWindow {\n\tif (obj === mainWindow) {\n\t\treturn false;\n\t}\n\n\tconst candidate = obj as CodeWindow | undefined;\n\n\treturn typeof candidate?.vscodeWindowId === 'number';\n}\n"]}