{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/base/browser/ui/toggle/toggle.ts","vs/base/browser/ui/toggle/toggle.ts"],"names":[],"mappings":"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","file":"toggle.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IKeyboardEvent } from '../../keyboardEvent';\nimport { BaseActionViewItem, IActionViewItemOptions } from '../actionbar/actionViewItems';\nimport { Widget } from '../widget';\nimport { IAction } from '../../../common/actions';\nimport { Codicon } from '../../../common/codicons';\nimport { ThemeIcon } from '../../../common/themables';\nimport { Emitter, Event } from '../../../common/event';\nimport { KeyCode } from '../../../common/keyCodes';\nimport './toggle.css';\nimport { isActiveElement, $, addDisposableListener, EventType } from '../../dom';\nimport { ICustomHover, setupCustomHover } from '../iconLabel/iconLabelHover';\nimport { getDefaultHoverDelegate } from '../hover/hoverDelegate';\n\nexport interface IToggleOpts extends IToggleStyles {\n\treadonly actionClassName?: string;\n\treadonly icon?: ThemeIcon;\n\treadonly title: string;\n\treadonly isChecked: boolean;\n\treadonly notFocusable?: boolean;\n}\n\nexport interface IToggleStyles {\n\treadonly inputActiveOptionBorder: string | undefined;\n\treadonly inputActiveOptionForeground: string | undefined;\n\treadonly inputActiveOptionBackground: string | undefined;\n}\n\nexport interface ICheckboxStyles {\n\treadonly checkboxBackground: string | undefined;\n\treadonly checkboxBorder: string | undefined;\n\treadonly checkboxForeground: string | undefined;\n}\n\nexport const unthemedToggleStyles = {\n\tinputActiveOptionBorder: '#007ACC00',\n\tinputActiveOptionForeground: '#FFFFFF',\n\tinputActiveOptionBackground: '#0E639C50'\n};\n\nexport class ToggleActionViewItem extends BaseActionViewItem {\n\n\tprotected readonly toggle: Toggle;\n\n\tconstructor(context: any, action: IAction, options: IActionViewItemOptions) {\n\t\tsuper(context, action, options);\n\n\t\tthis.toggle = this._register(new Toggle({\n\t\t\tactionClassName: this._action.class,\n\t\t\tisChecked: !!this._action.checked,\n\t\t\ttitle: (<IActionViewItemOptions>this.options).keybinding ? `${this._action.label} (${(<IActionViewItemOptions>this.options).keybinding})` : this._action.label,\n\t\t\tnotFocusable: true,\n\t\t\tinputActiveOptionBackground: options.toggleStyles?.inputActiveOptionBackground,\n\t\t\tinputActiveOptionBorder: options.toggleStyles?.inputActiveOptionBorder,\n\t\t\tinputActiveOptionForeground: options.toggleStyles?.inputActiveOptionForeground,\n\t\t}));\n\t\tthis._register(this.toggle.onChange(() => this._action.checked = !!this.toggle && this.toggle.checked));\n\t}\n\n\toverride render(container: HTMLElement): void {\n\t\tthis.element = container;\n\t\tthis.element.appendChild(this.toggle.domNode);\n\t}\n\n\tprotected override updateEnabled(): void {\n\t\tif (this.toggle) {\n\t\t\tif (this.isEnabled()) {\n\t\t\t\tthis.toggle.enable();\n\t\t\t} else {\n\t\t\t\tthis.toggle.disable();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected override updateChecked(): void {\n\t\tthis.toggle.checked = !!this._action.checked;\n\t}\n\n\toverride focus(): void {\n\t\tthis.toggle.domNode.tabIndex = 0;\n\t\tthis.toggle.focus();\n\t}\n\n\toverride blur(): void {\n\t\tthis.toggle.domNode.tabIndex = -1;\n\t\tthis.toggle.domNode.blur();\n\t}\n\n\toverride setFocusable(focusable: boolean): void {\n\t\tthis.toggle.domNode.tabIndex = focusable ? 0 : -1;\n\t}\n\n}\n\nexport class Toggle extends Widget {\n\n\tprivate readonly _onChange = this._register(new Emitter<boolean>());\n\treadonly onChange: Event<boolean /* via keyboard */> = this._onChange.event;\n\n\tprivate readonly _onKeyDown = this._register(new Emitter<IKeyboardEvent>());\n\treadonly onKeyDown: Event<IKeyboardEvent> = this._onKeyDown.event;\n\n\tprivate readonly _opts: IToggleOpts;\n\tprivate _icon: ThemeIcon | undefined;\n\treadonly domNode: HTMLElement;\n\n\tprivate _checked: boolean;\n\tprivate _hover: ICustomHover;\n\n\tconstructor(opts: IToggleOpts) {\n\t\tsuper();\n\n\t\tthis._opts = opts;\n\t\tthis._checked = this._opts.isChecked;\n\n\t\tconst classes = ['monaco-custom-toggle'];\n\t\tif (this._opts.icon) {\n\t\t\tthis._icon = this._opts.icon;\n\t\t\tclasses.push(...ThemeIcon.asClassNameArray(this._icon));\n\t\t}\n\t\tif (this._opts.actionClassName) {\n\t\t\tclasses.push(...this._opts.actionClassName.split(' '));\n\t\t}\n\t\tif (this._checked) {\n\t\t\tclasses.push('checked');\n\t\t}\n\n\t\tthis.domNode = document.createElement('div');\n\t\tthis._hover = this._register(setupCustomHover(getDefaultHoverDelegate('mouse'), this.domNode, this._opts.title));\n\t\tthis.domNode.classList.add(...classes);\n\t\tif (!this._opts.notFocusable) {\n\t\t\tthis.domNode.tabIndex = 0;\n\t\t}\n\t\tthis.domNode.setAttribute('role', 'checkbox');\n\t\tthis.domNode.setAttribute('aria-checked', String(this._checked));\n\t\tthis.domNode.setAttribute('aria-label', this._opts.title);\n\n\t\tthis.applyStyles();\n\n\t\tthis.onclick(this.domNode, (ev) => {\n\t\t\tif (this.enabled) {\n\t\t\t\tthis.checked = !this._checked;\n\t\t\t\tthis._onChange.fire(false);\n\t\t\t\tev.preventDefault();\n\t\t\t}\n\t\t});\n\n\t\tthis._register(this.ignoreGesture(this.domNode));\n\n\t\tthis.onkeydown(this.domNode, (keyboardEvent) => {\n\t\t\tif (keyboardEvent.keyCode === KeyCode.Space || keyboardEvent.keyCode === KeyCode.Enter) {\n\t\t\t\tthis.checked = !this._checked;\n\t\t\t\tthis._onChange.fire(true);\n\t\t\t\tkeyboardEvent.preventDefault();\n\t\t\t\tkeyboardEvent.stopPropagation();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._onKeyDown.fire(keyboardEvent);\n\t\t});\n\t}\n\n\tget enabled(): boolean {\n\t\treturn this.domNode.getAttribute('aria-disabled') !== 'true';\n\t}\n\n\tfocus(): void {\n\t\tthis.domNode.focus();\n\t}\n\n\tget checked(): boolean {\n\t\treturn this._checked;\n\t}\n\n\tset checked(newIsChecked: boolean) {\n\t\tthis._checked = newIsChecked;\n\n\t\tthis.domNode.setAttribute('aria-checked', String(this._checked));\n\t\tthis.domNode.classList.toggle('checked', this._checked);\n\n\t\tthis.applyStyles();\n\t}\n\n\tsetIcon(icon: ThemeIcon | undefined): void {\n\t\tif (this._icon) {\n\t\t\tthis.domNode.classList.remove(...ThemeIcon.asClassNameArray(this._icon));\n\t\t}\n\t\tthis._icon = icon;\n\t\tif (this._icon) {\n\t\t\tthis.domNode.classList.add(...ThemeIcon.asClassNameArray(this._icon));\n\t\t}\n\t}\n\n\twidth(): number {\n\t\treturn 2 /*margin left*/ + 2 /*border*/ + 2 /*padding*/ + 16 /* icon width */;\n\t}\n\n\tprotected applyStyles(): void {\n\t\tif (this.domNode) {\n\t\t\tthis.domNode.style.borderColor = (this._checked && this._opts.inputActiveOptionBorder) || '';\n\t\t\tthis.domNode.style.color = (this._checked && this._opts.inputActiveOptionForeground) || 'inherit';\n\t\t\tthis.domNode.style.backgroundColor = (this._checked && this._opts.inputActiveOptionBackground) || '';\n\t\t}\n\t}\n\n\tenable(): void {\n\t\tthis.domNode.setAttribute('aria-disabled', String(false));\n\t}\n\n\tdisable(): void {\n\t\tthis.domNode.setAttribute('aria-disabled', String(true));\n\t}\n\n\tsetTitle(newTitle: string): void {\n\t\tthis._hover.update(newTitle);\n\t\tthis.domNode.setAttribute('aria-label', newTitle);\n\t}\n}\n\nexport class Checkbox extends Widget {\n\n\tprivate readonly _onChange = this._register(new Emitter<boolean>());\n\treadonly onChange: Event<boolean /* via keyboard */> = this._onChange.event;\n\n\tprivate checkbox: Toggle;\n\tprivate styles: ICheckboxStyles;\n\n\treadonly domNode: HTMLElement;\n\n\tconstructor(private title: string, private isChecked: boolean, styles: ICheckboxStyles) {\n\t\tsuper();\n\n\t\tthis.checkbox = new Toggle({ title: this.title, isChecked: this.isChecked, icon: Codicon.check, actionClassName: 'monaco-checkbox', ...unthemedToggleStyles });\n\n\t\tthis.domNode = this.checkbox.domNode;\n\n\t\tthis.styles = styles;\n\n\t\tthis.applyStyles();\n\n\t\tthis._register(this.checkbox.onChange(keyboard => {\n\t\t\tthis.applyStyles();\n\t\t\tthis._onChange.fire(keyboard);\n\t\t}));\n\t}\n\n\tget checked(): boolean {\n\t\treturn this.checkbox.checked;\n\t}\n\n\tset checked(newIsChecked: boolean) {\n\t\tthis.checkbox.checked = newIsChecked;\n\n\t\tthis.applyStyles();\n\t}\n\n\tfocus(): void {\n\t\tthis.domNode.focus();\n\t}\n\n\thasFocus(): boolean {\n\t\treturn isActiveElement(this.domNode);\n\t}\n\n\tenable(): void {\n\t\tthis.checkbox.enable();\n\t}\n\n\tdisable(): void {\n\t\tthis.checkbox.disable();\n\t}\n\n\tprotected applyStyles(): void {\n\t\tthis.domNode.style.color = this.styles.checkboxForeground || '';\n\t\tthis.domNode.style.backgroundColor = this.styles.checkboxBackground || '';\n\t\tthis.domNode.style.borderColor = this.styles.checkboxBorder || '';\n\t}\n}\n\nexport interface ICheckboxActionViewItemOptions extends IActionViewItemOptions {\n\tcheckboxStyles: ICheckboxStyles;\n}\n\nexport class CheckboxActionViewItem extends BaseActionViewItem {\n\n\tprotected readonly toggle: Checkbox;\n\tprivate cssClass?: string;\n\n\tconstructor(context: any, action: IAction, options: ICheckboxActionViewItemOptions) {\n\t\tsuper(context, action, options);\n\n\t\tthis.toggle = this._register(new Checkbox(this._action.label, !!this._action.checked, options.checkboxStyles));\n\t\tthis._register(this.toggle.onChange(() => this.onChange()));\n\t}\n\n\toverride render(container: HTMLElement): void {\n\t\tthis.element = container;\n\t\tthis.element.classList.add('checkbox-action-item');\n\t\tthis.element.appendChild(this.toggle.domNode);\n\t\tif ((<IActionViewItemOptions>this.options).label && this._action.label) {\n\t\t\tconst label = this.element.appendChild($('span.checkbox-label', undefined, this._action.label));\n\t\t\tthis._register(addDisposableListener(label, EventType.CLICK, (e: MouseEvent) => {\n\t\t\t\tthis.toggle.checked = !this.toggle.checked;\n\t\t\t\te.stopPropagation();\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.onChange();\n\t\t\t}));\n\t\t}\n\n\t\tthis.updateEnabled();\n\t\tthis.updateClass();\n\t\tthis.updateChecked();\n\t}\n\n\tprivate onChange(): void {\n\t\tthis._action.checked = !!this.toggle && this.toggle.checked;\n\t\tthis.actionRunner.run(this._action, this._context);\n\t}\n\n\tprotected override updateEnabled(): void {\n\t\tif (this.isEnabled()) {\n\t\t\tthis.toggle.enable();\n\t\t} else {\n\t\t\tthis.toggle.disable();\n\t\t}\n\t\tif (this.action.enabled) {\n\t\t\tthis.element?.classList.remove('disabled');\n\t\t} else {\n\t\t\tthis.element?.classList.add('disabled');\n\t\t}\n\t}\n\n\tprotected override updateChecked(): void {\n\t\tthis.toggle.checked = !!this._action.checked;\n\t}\n\n\tprotected override updateClass(): void {\n\t\tif (this.cssClass) {\n\t\t\tthis.toggle.domNode.classList.remove(...this.cssClass.split(' '));\n\t\t}\n\t\tthis.cssClass = this.getClass();\n\t\tif (this.cssClass) {\n\t\t\tthis.toggle.domNode.classList.add(...this.cssClass.split(' '));\n\t\t}\n\t}\n\n\toverride focus(): void {\n\t\tthis.toggle.domNode.tabIndex = 0;\n\t\tthis.toggle.focus();\n\t}\n\n\toverride blur(): void {\n\t\tthis.toggle.domNode.tabIndex = -1;\n\t\tthis.toggle.domNode.blur();\n\t}\n\n\toverride setFocusable(focusable: boolean): void {\n\t\tthis.toggle.domNode.tabIndex = focusable ? 0 : -1;\n\t}\n\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IKeyboardEvent } from '../../keyboardEvent';\nimport { BaseActionViewItem, IActionViewItemOptions } from '../actionbar/actionViewItems';\nimport { Widget } from '../widget';\nimport { IAction } from '../../../common/actions';\nimport { Codicon } from '../../../common/codicons';\nimport { ThemeIcon } from '../../../common/themables';\nimport { Emitter, Event } from '../../../common/event';\nimport { KeyCode } from '../../../common/keyCodes';\nimport './toggle.css';\nimport { isActiveElement, $, addDisposableListener, EventType } from '../../dom';\nimport { ICustomHover, setupCustomHover } from '../iconLabel/iconLabelHover';\nimport { getDefaultHoverDelegate } from '../hover/hoverDelegate';\n\nexport interface IToggleOpts extends IToggleStyles {\n\treadonly actionClassName?: string;\n\treadonly icon?: ThemeIcon;\n\treadonly title: string;\n\treadonly isChecked: boolean;\n\treadonly notFocusable?: boolean;\n}\n\nexport interface IToggleStyles {\n\treadonly inputActiveOptionBorder: string | undefined;\n\treadonly inputActiveOptionForeground: string | undefined;\n\treadonly inputActiveOptionBackground: string | undefined;\n}\n\nexport interface ICheckboxStyles {\n\treadonly checkboxBackground: string | undefined;\n\treadonly checkboxBorder: string | undefined;\n\treadonly checkboxForeground: string | undefined;\n}\n\nexport const unthemedToggleStyles = {\n\tinputActiveOptionBorder: '#007ACC00',\n\tinputActiveOptionForeground: '#FFFFFF',\n\tinputActiveOptionBackground: '#0E639C50'\n};\n\nexport class ToggleActionViewItem extends BaseActionViewItem {\n\n\tprotected readonly toggle: Toggle;\n\n\tconstructor(context: any, action: IAction, options: IActionViewItemOptions) {\n\t\tsuper(context, action, options);\n\n\t\tthis.toggle = this._register(new Toggle({\n\t\t\tactionClassName: this._action.class,\n\t\t\tisChecked: !!this._action.checked,\n\t\t\ttitle: (<IActionViewItemOptions>this.options).keybinding ? `${this._action.label} (${(<IActionViewItemOptions>this.options).keybinding})` : this._action.label,\n\t\t\tnotFocusable: true,\n\t\t\tinputActiveOptionBackground: options.toggleStyles?.inputActiveOptionBackground,\n\t\t\tinputActiveOptionBorder: options.toggleStyles?.inputActiveOptionBorder,\n\t\t\tinputActiveOptionForeground: options.toggleStyles?.inputActiveOptionForeground,\n\t\t}));\n\t\tthis._register(this.toggle.onChange(() => this._action.checked = !!this.toggle && this.toggle.checked));\n\t}\n\n\toverride render(container: HTMLElement): void {\n\t\tthis.element = container;\n\t\tthis.element.appendChild(this.toggle.domNode);\n\t}\n\n\tprotected override updateEnabled(): void {\n\t\tif (this.toggle) {\n\t\t\tif (this.isEnabled()) {\n\t\t\t\tthis.toggle.enable();\n\t\t\t} else {\n\t\t\t\tthis.toggle.disable();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected override updateChecked(): void {\n\t\tthis.toggle.checked = !!this._action.checked;\n\t}\n\n\toverride focus(): void {\n\t\tthis.toggle.domNode.tabIndex = 0;\n\t\tthis.toggle.focus();\n\t}\n\n\toverride blur(): void {\n\t\tthis.toggle.domNode.tabIndex = -1;\n\t\tthis.toggle.domNode.blur();\n\t}\n\n\toverride setFocusable(focusable: boolean): void {\n\t\tthis.toggle.domNode.tabIndex = focusable ? 0 : -1;\n\t}\n\n}\n\nexport class Toggle extends Widget {\n\n\tprivate readonly _onChange = this._register(new Emitter<boolean>());\n\treadonly onChange: Event<boolean /* via keyboard */> = this._onChange.event;\n\n\tprivate readonly _onKeyDown = this._register(new Emitter<IKeyboardEvent>());\n\treadonly onKeyDown: Event<IKeyboardEvent> = this._onKeyDown.event;\n\n\tprivate readonly _opts: IToggleOpts;\n\tprivate _icon: ThemeIcon | undefined;\n\treadonly domNode: HTMLElement;\n\n\tprivate _checked: boolean;\n\tprivate _hover: ICustomHover;\n\n\tconstructor(opts: IToggleOpts) {\n\t\tsuper();\n\n\t\tthis._opts = opts;\n\t\tthis._checked = this._opts.isChecked;\n\n\t\tconst classes = ['monaco-custom-toggle'];\n\t\tif (this._opts.icon) {\n\t\t\tthis._icon = this._opts.icon;\n\t\t\tclasses.push(...ThemeIcon.asClassNameArray(this._icon));\n\t\t}\n\t\tif (this._opts.actionClassName) {\n\t\t\tclasses.push(...this._opts.actionClassName.split(' '));\n\t\t}\n\t\tif (this._checked) {\n\t\t\tclasses.push('checked');\n\t\t}\n\n\t\tthis.domNode = document.createElement('div');\n\t\tthis._hover = this._register(setupCustomHover(getDefaultHoverDelegate('mouse'), this.domNode, this._opts.title));\n\t\tthis.domNode.classList.add(...classes);\n\t\tif (!this._opts.notFocusable) {\n\t\t\tthis.domNode.tabIndex = 0;\n\t\t}\n\t\tthis.domNode.setAttribute('role', 'checkbox');\n\t\tthis.domNode.setAttribute('aria-checked', String(this._checked));\n\t\tthis.domNode.setAttribute('aria-label', this._opts.title);\n\n\t\tthis.applyStyles();\n\n\t\tthis.onclick(this.domNode, (ev) => {\n\t\t\tif (this.enabled) {\n\t\t\t\tthis.checked = !this._checked;\n\t\t\t\tthis._onChange.fire(false);\n\t\t\t\tev.preventDefault();\n\t\t\t}\n\t\t});\n\n\t\tthis._register(this.ignoreGesture(this.domNode));\n\n\t\tthis.onkeydown(this.domNode, (keyboardEvent) => {\n\t\t\tif (keyboardEvent.keyCode === KeyCode.Space || keyboardEvent.keyCode === KeyCode.Enter) {\n\t\t\t\tthis.checked = !this._checked;\n\t\t\t\tthis._onChange.fire(true);\n\t\t\t\tkeyboardEvent.preventDefault();\n\t\t\t\tkeyboardEvent.stopPropagation();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._onKeyDown.fire(keyboardEvent);\n\t\t});\n\t}\n\n\tget enabled(): boolean {\n\t\treturn this.domNode.getAttribute('aria-disabled') !== 'true';\n\t}\n\n\tfocus(): void {\n\t\tthis.domNode.focus();\n\t}\n\n\tget checked(): boolean {\n\t\treturn this._checked;\n\t}\n\n\tset checked(newIsChecked: boolean) {\n\t\tthis._checked = newIsChecked;\n\n\t\tthis.domNode.setAttribute('aria-checked', String(this._checked));\n\t\tthis.domNode.classList.toggle('checked', this._checked);\n\n\t\tthis.applyStyles();\n\t}\n\n\tsetIcon(icon: ThemeIcon | undefined): void {\n\t\tif (this._icon) {\n\t\t\tthis.domNode.classList.remove(...ThemeIcon.asClassNameArray(this._icon));\n\t\t}\n\t\tthis._icon = icon;\n\t\tif (this._icon) {\n\t\t\tthis.domNode.classList.add(...ThemeIcon.asClassNameArray(this._icon));\n\t\t}\n\t}\n\n\twidth(): number {\n\t\treturn 2 /*margin left*/ + 2 /*border*/ + 2 /*padding*/ + 16 /* icon width */;\n\t}\n\n\tprotected applyStyles(): void {\n\t\tif (this.domNode) {\n\t\t\tthis.domNode.style.borderColor = (this._checked && this._opts.inputActiveOptionBorder) || '';\n\t\t\tthis.domNode.style.color = (this._checked && this._opts.inputActiveOptionForeground) || 'inherit';\n\t\t\tthis.domNode.style.backgroundColor = (this._checked && this._opts.inputActiveOptionBackground) || '';\n\t\t}\n\t}\n\n\tenable(): void {\n\t\tthis.domNode.setAttribute('aria-disabled', String(false));\n\t}\n\n\tdisable(): void {\n\t\tthis.domNode.setAttribute('aria-disabled', String(true));\n\t}\n\n\tsetTitle(newTitle: string): void {\n\t\tthis._hover.update(newTitle);\n\t\tthis.domNode.setAttribute('aria-label', newTitle);\n\t}\n}\n\nexport class Checkbox extends Widget {\n\n\tprivate readonly _onChange = this._register(new Emitter<boolean>());\n\treadonly onChange: Event<boolean /* via keyboard */> = this._onChange.event;\n\n\tprivate checkbox: Toggle;\n\tprivate styles: ICheckboxStyles;\n\n\treadonly domNode: HTMLElement;\n\n\tconstructor(private title: string, private isChecked: boolean, styles: ICheckboxStyles) {\n\t\tsuper();\n\n\t\tthis.checkbox = new Toggle({ title: this.title, isChecked: this.isChecked, icon: Codicon.check, actionClassName: 'monaco-checkbox', ...unthemedToggleStyles });\n\n\t\tthis.domNode = this.checkbox.domNode;\n\n\t\tthis.styles = styles;\n\n\t\tthis.applyStyles();\n\n\t\tthis._register(this.checkbox.onChange(keyboard => {\n\t\t\tthis.applyStyles();\n\t\t\tthis._onChange.fire(keyboard);\n\t\t}));\n\t}\n\n\tget checked(): boolean {\n\t\treturn this.checkbox.checked;\n\t}\n\n\tset checked(newIsChecked: boolean) {\n\t\tthis.checkbox.checked = newIsChecked;\n\n\t\tthis.applyStyles();\n\t}\n\n\tfocus(): void {\n\t\tthis.domNode.focus();\n\t}\n\n\thasFocus(): boolean {\n\t\treturn isActiveElement(this.domNode);\n\t}\n\n\tenable(): void {\n\t\tthis.checkbox.enable();\n\t}\n\n\tdisable(): void {\n\t\tthis.checkbox.disable();\n\t}\n\n\tprotected applyStyles(): void {\n\t\tthis.domNode.style.color = this.styles.checkboxForeground || '';\n\t\tthis.domNode.style.backgroundColor = this.styles.checkboxBackground || '';\n\t\tthis.domNode.style.borderColor = this.styles.checkboxBorder || '';\n\t}\n}\n\nexport interface ICheckboxActionViewItemOptions extends IActionViewItemOptions {\n\tcheckboxStyles: ICheckboxStyles;\n}\n\nexport class CheckboxActionViewItem extends BaseActionViewItem {\n\n\tprotected readonly toggle: Checkbox;\n\tprivate cssClass?: string;\n\n\tconstructor(context: any, action: IAction, options: ICheckboxActionViewItemOptions) {\n\t\tsuper(context, action, options);\n\n\t\tthis.toggle = this._register(new Checkbox(this._action.label, !!this._action.checked, options.checkboxStyles));\n\t\tthis._register(this.toggle.onChange(() => this.onChange()));\n\t}\n\n\toverride render(container: HTMLElement): void {\n\t\tthis.element = container;\n\t\tthis.element.classList.add('checkbox-action-item');\n\t\tthis.element.appendChild(this.toggle.domNode);\n\t\tif ((<IActionViewItemOptions>this.options).label && this._action.label) {\n\t\t\tconst label = this.element.appendChild($('span.checkbox-label', undefined, this._action.label));\n\t\t\tthis._register(addDisposableListener(label, EventType.CLICK, (e: MouseEvent) => {\n\t\t\t\tthis.toggle.checked = !this.toggle.checked;\n\t\t\t\te.stopPropagation();\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.onChange();\n\t\t\t}));\n\t\t}\n\n\t\tthis.updateEnabled();\n\t\tthis.updateClass();\n\t\tthis.updateChecked();\n\t}\n\n\tprivate onChange(): void {\n\t\tthis._action.checked = !!this.toggle && this.toggle.checked;\n\t\tthis.actionRunner.run(this._action, this._context);\n\t}\n\n\tprotected override updateEnabled(): void {\n\t\tif (this.isEnabled()) {\n\t\t\tthis.toggle.enable();\n\t\t} else {\n\t\t\tthis.toggle.disable();\n\t\t}\n\t\tif (this.action.enabled) {\n\t\t\tthis.element?.classList.remove('disabled');\n\t\t} else {\n\t\t\tthis.element?.classList.add('disabled');\n\t\t}\n\t}\n\n\tprotected override updateChecked(): void {\n\t\tthis.toggle.checked = !!this._action.checked;\n\t}\n\n\tprotected override updateClass(): void {\n\t\tif (this.cssClass) {\n\t\t\tthis.toggle.domNode.classList.remove(...this.cssClass.split(' '));\n\t\t}\n\t\tthis.cssClass = this.getClass();\n\t\tif (this.cssClass) {\n\t\t\tthis.toggle.domNode.classList.add(...this.cssClass.split(' '));\n\t\t}\n\t}\n\n\toverride focus(): void {\n\t\tthis.toggle.domNode.tabIndex = 0;\n\t\tthis.toggle.focus();\n\t}\n\n\toverride blur(): void {\n\t\tthis.toggle.domNode.tabIndex = -1;\n\t\tthis.toggle.domNode.blur();\n\t}\n\n\toverride setFocusable(focusable: boolean): void {\n\t\tthis.toggle.domNode.tabIndex = focusable ? 0 : -1;\n\t}\n\n}\n"]}