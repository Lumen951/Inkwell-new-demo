{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/base/browser/dnd.ts","vs/base/browser/dnd.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,+BAAyD;AACzD,mDAAiD;AACjD,yCAAuC;AAEvC;;;GAGG;AACH,MAAa,kBAAmB,SAAQ,sBAAU;IAGjD,YAAY,SAAsB,EAAE,QAAoB;QACvD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,SAAS,CAAC,IAAA,2BAAqB,EAAC,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE;YAC/D,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,qHAAqH;YAEzI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBACnB,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE;oBAC9B,QAAQ,EAAE,CAAC;oBAEX,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACrB,CAAC,EAAE,GAAG,CAAC,CAAC;YACT,CAAC;QACF,CAAC,CAAC,CAAC,CAAC;QAEJ,CAAC,WAAW,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC/C,IAAI,CAAC,SAAS,CAAC,IAAA,2BAAqB,EAAC,SAAS,EAAE,IAAI,EAAE,GAAG,EAAE;gBAC1D,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,gBAAgB;QACvB,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACrB,CAAC;IACF,CAAC;IAEQ,OAAO;QACf,KAAK,CAAC,OAAO,EAAE,CAAC;QAEhB,IAAI,CAAC,gBAAgB,EAAE,CAAC;IACzB,CAAC;CACD;AArCD,gDAqCC;AAED,wBAAwB;AACX,QAAA,aAAa,GAAG;IAE5B;;OAEG;IACH,SAAS,EAAE,cAAc;IAEzB;;OAEG;IACH,YAAY,EAAE,aAAa;IAE3B;;OAEG;IACH,KAAK,EAAE,OAAO;IAEd;;OAEG;IACH,IAAI,EAAE,YAAK,CAAC,IAAI;IAEhB;;;;OAIG;IACH,iBAAiB,EAAE,+BAA+B;CAClD,CAAC;AAEF,SAAgB,cAAc,CAAC,KAAgB,EAAE,KAAoB,EAAE,KAAa,EAAE,eAA+B,EAAE,eAA+B;IACrJ,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAChD,SAAS,CAAC,SAAS,GAAG,KAAK,CAAC;IAC5B,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC;IAE9B,IAAI,eAAe,EAAE,CAAC;QACrB,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,eAAe,CAAC;IACzC,CAAC;IAED,IAAI,eAAe,EAAE,CAAC;QACrB,SAAS,CAAC,KAAK,CAAC,UAAU,GAAG,eAAe,CAAC;IAC9C,CAAC;IAED,IAAI,KAAK,CAAC,YAAY,EAAE,CAAC;QACxB,MAAM,aAAa,GAAG,IAAA,eAAS,EAAC,KAAK,CAAC,CAAC,QAAQ,CAAC;QAChD,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC1C,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;QAErD,qDAAqD;QACrD,UAAU,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;IAChE,CAAC;AACF,CAAC;AArBD,wCAqBC","file":"dnd.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getWindow } from './dom';\nimport { Disposable } from '../common/lifecycle';\nimport { Mimes } from '../common/mime';\n\n/**\n * A helper that will execute a provided function when the provided HTMLElement receives\n *  dragover event for 800ms. If the drag is aborted before, the callback will not be triggered.\n */\nexport class DelayedDragHandler extends Disposable {\n\tprivate timeout: any;\n\n\tconstructor(container: HTMLElement, callback: () => void) {\n\t\tsuper();\n\n\t\tthis._register(addDisposableListener(container, 'dragover', e => {\n\t\t\te.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n\t\t\tif (!this.timeout) {\n\t\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\t\tcallback();\n\n\t\t\t\t\tthis.timeout = null;\n\t\t\t\t}, 800);\n\t\t\t}\n\t\t}));\n\n\t\t['dragleave', 'drop', 'dragend'].forEach(type => {\n\t\t\tthis._register(addDisposableListener(container, type, () => {\n\t\t\t\tthis.clearDragTimeout();\n\t\t\t}));\n\t\t});\n\t}\n\n\tprivate clearDragTimeout(): void {\n\t\tif (this.timeout) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.clearDragTimeout();\n\t}\n}\n\n// Common data transfers\nexport const DataTransfers = {\n\n\t/**\n\t * Application specific resource transfer type\n\t */\n\tRESOURCES: 'ResourceURLs',\n\n\t/**\n\t * Browser specific transfer type to download\n\t */\n\tDOWNLOAD_URL: 'DownloadURL',\n\n\t/**\n\t * Browser specific transfer type for files\n\t */\n\tFILES: 'Files',\n\n\t/**\n\t * Typically transfer type for copy/paste transfers.\n\t */\n\tTEXT: Mimes.text,\n\n\t/**\n\t * Internal type used to pass around text/uri-list data.\n\t *\n\t * This is needed to work around https://bugs.chromium.org/p/chromium/issues/detail?id=239745.\n\t */\n\tINTERNAL_URI_LIST: 'application/vnd.code.uri-list',\n};\n\nexport function applyDragImage(event: DragEvent, label: string | null, clazz: string, backgroundColor?: string | null, foregroundColor?: string | null): void {\n\tconst dragImage = document.createElement('div');\n\tdragImage.className = clazz;\n\tdragImage.textContent = label;\n\n\tif (foregroundColor) {\n\t\tdragImage.style.color = foregroundColor;\n\t}\n\n\tif (backgroundColor) {\n\t\tdragImage.style.background = backgroundColor;\n\t}\n\n\tif (event.dataTransfer) {\n\t\tconst ownerDocument = getWindow(event).document;\n\t\townerDocument.body.appendChild(dragImage);\n\t\tevent.dataTransfer.setDragImage(dragImage, -10, -10);\n\n\t\t// Removes the element when the DND operation is done\n\t\tsetTimeout(() => ownerDocument.body.removeChild(dragImage), 0);\n\t}\n}\n\nexport interface IDragAndDropData {\n\tupdate(dataTransfer: DataTransfer): void;\n\tgetData(): unknown;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getWindow } from './dom';\nimport { Disposable } from '../common/lifecycle';\nimport { Mimes } from '../common/mime';\n\n/**\n * A helper that will execute a provided function when the provided HTMLElement receives\n *  dragover event for 800ms. If the drag is aborted before, the callback will not be triggered.\n */\nexport class DelayedDragHandler extends Disposable {\n\tprivate timeout: any;\n\n\tconstructor(container: HTMLElement, callback: () => void) {\n\t\tsuper();\n\n\t\tthis._register(addDisposableListener(container, 'dragover', e => {\n\t\t\te.preventDefault(); // needed so that the drop event fires (https://stackoverflow.com/questions/21339924/drop-event-not-firing-in-chrome)\n\n\t\t\tif (!this.timeout) {\n\t\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\t\tcallback();\n\n\t\t\t\t\tthis.timeout = null;\n\t\t\t\t}, 800);\n\t\t\t}\n\t\t}));\n\n\t\t['dragleave', 'drop', 'dragend'].forEach(type => {\n\t\t\tthis._register(addDisposableListener(container, type, () => {\n\t\t\t\tthis.clearDragTimeout();\n\t\t\t}));\n\t\t});\n\t}\n\n\tprivate clearDragTimeout(): void {\n\t\tif (this.timeout) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.clearDragTimeout();\n\t}\n}\n\n// Common data transfers\nexport const DataTransfers = {\n\n\t/**\n\t * Application specific resource transfer type\n\t */\n\tRESOURCES: 'ResourceURLs',\n\n\t/**\n\t * Browser specific transfer type to download\n\t */\n\tDOWNLOAD_URL: 'DownloadURL',\n\n\t/**\n\t * Browser specific transfer type for files\n\t */\n\tFILES: 'Files',\n\n\t/**\n\t * Typically transfer type for copy/paste transfers.\n\t */\n\tTEXT: Mimes.text,\n\n\t/**\n\t * Internal type used to pass around text/uri-list data.\n\t *\n\t * This is needed to work around https://bugs.chromium.org/p/chromium/issues/detail?id=239745.\n\t */\n\tINTERNAL_URI_LIST: 'application/vnd.code.uri-list',\n};\n\nexport function applyDragImage(event: DragEvent, label: string | null, clazz: string, backgroundColor?: string | null, foregroundColor?: string | null): void {\n\tconst dragImage = document.createElement('div');\n\tdragImage.className = clazz;\n\tdragImage.textContent = label;\n\n\tif (foregroundColor) {\n\t\tdragImage.style.color = foregroundColor;\n\t}\n\n\tif (backgroundColor) {\n\t\tdragImage.style.background = backgroundColor;\n\t}\n\n\tif (event.dataTransfer) {\n\t\tconst ownerDocument = getWindow(event).document;\n\t\townerDocument.body.appendChild(dragImage);\n\t\tevent.dataTransfer.setDragImage(dragImage, -10, -10);\n\n\t\t// Removes the element when the DND operation is done\n\t\tsetTimeout(() => ownerDocument.body.removeChild(dragImage), 0);\n\t}\n}\n\nexport interface IDragAndDropData {\n\tupdate(dataTransfer: DataTransfer): void;\n\tgetData(): unknown;\n}\n"]}