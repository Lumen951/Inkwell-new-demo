{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/base/common/sequence.ts","vs/base/common/sequence.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,mCAAyC;AAiBzC,MAAa,QAAQ;IAArB;QAEU,aAAQ,GAAQ,EAAE,CAAC;QAEX,iBAAY,GAAG,IAAI,eAAO,EAAc,CAAC;QACjD,gBAAW,GAAsB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;IAMnE,CAAC;IAJA,MAAM,CAAC,KAAa,EAAE,WAAmB,EAAE,WAAyB,EAAE;QACrE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC,CAAC;QACtD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC1D,CAAC;CACD;AAXD,4BAWC","file":"sequence.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from './event';\n\nexport interface ISplice<T> {\n\treadonly start: number;\n\treadonly deleteCount: number;\n\treadonly toInsert: readonly T[];\n}\n\nexport interface ISpliceable<T> {\n\tsplice(start: number, deleteCount: number, toInsert: readonly T[]): void;\n}\n\nexport interface ISequence<T> {\n\treadonly elements: T[];\n\treadonly onDidSplice: Event<ISplice<T>>;\n}\n\nexport class Sequence<T> implements ISequence<T>, ISpliceable<T> {\n\n\treadonly elements: T[] = [];\n\n\tprivate readonly _onDidSplice = new Emitter<ISplice<T>>();\n\treadonly onDidSplice: Event<ISplice<T>> = this._onDidSplice.event;\n\n\tsplice(start: number, deleteCount: number, toInsert: readonly T[] = []): void {\n\t\tthis.elements.splice(start, deleteCount, ...toInsert);\n\t\tthis._onDidSplice.fire({ start, deleteCount, toInsert });\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from './event';\n\nexport interface ISplice<T> {\n\treadonly start: number;\n\treadonly deleteCount: number;\n\treadonly toInsert: readonly T[];\n}\n\nexport interface ISpliceable<T> {\n\tsplice(start: number, deleteCount: number, toInsert: readonly T[]): void;\n}\n\nexport interface ISequence<T> {\n\treadonly elements: T[];\n\treadonly onDidSplice: Event<ISplice<T>>;\n}\n\nexport class Sequence<T> implements ISequence<T>, ISpliceable<T> {\n\n\treadonly elements: T[] = [];\n\n\tprivate readonly _onDidSplice = new Emitter<ISplice<T>>();\n\treadonly onDidSplice: Event<ISplice<T>> = this._onDidSplice.event;\n\n\tsplice(start: number, deleteCount: number, toInsert: readonly T[] = []): void {\n\t\tthis.elements.splice(start, deleteCount, ...toInsert);\n\t\tthis._onDidSplice.fire({ start, deleteCount, toInsert });\n\t}\n}\n"]}