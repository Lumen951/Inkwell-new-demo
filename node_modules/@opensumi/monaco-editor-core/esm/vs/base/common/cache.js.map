{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/base/common/cache.ts","vs/base/common/cache.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,iDAA4E;AAO5E,MAAa,KAAK;IAGjB,YAAoB,IAA2C;QAA3C,SAAI,GAAJ,IAAI,CAAuC;QADvD,WAAM,GAA0B,IAAI,CAAC;IACsB,CAAC;IAEpE,GAAG;QACF,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;QAED,MAAM,GAAG,GAAG,IAAI,sCAAuB,EAAE,CAAC;QAC1C,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAErC,IAAI,CAAC,MAAM,GAAG;YACb,OAAO;YACP,OAAO,EAAE,GAAG,EAAE;gBACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,GAAG,CAAC,MAAM,EAAE,CAAC;gBACb,GAAG,CAAC,OAAO,EAAE,CAAC;YACf,CAAC;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;CACD;AAxBD,sBAwBC;AAED;;;;EAIE;AACF,MAAa,iBAAiB;IAI7B,YAA6B,EAA4B;QAA5B,OAAE,GAAF,EAAE,CAA0B;QAHjD,cAAS,GAA0B,SAAS,CAAC;QAC7C,eAAU,GAAuB,SAAS,CAAC;IAGnD,CAAC;IAEM,GAAG,CAAC,GAAS;QACnB,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,IAAI,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC;YAC7B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;YACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC;QACD,OAAO,IAAI,CAAC,SAAU,CAAC;IACxB,CAAC;CACD;AAfD,8CAeC;AAED;;EAEE;AACF,MAAa,cAAc;IAE1B,IAAW,YAAY;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAED,YAA6B,EAAyB;QAAzB,OAAE,GAAF,EAAE,CAAuB;QALrC,SAAI,GAAG,IAAI,GAAG,EAAgB,CAAC;IAKU,CAAC;IAEpD,GAAG,CAAC,GAAS;QACnB,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;YACxB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;QAC5B,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC1B,OAAO,KAAK,CAAC;IACd,CAAC;CACD;AAhBD,wCAgBC","file":"cache.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, CancellationTokenSource } from './cancellation';\nimport { IDisposable } from './lifecycle';\n\nexport interface CacheResult<T> extends IDisposable {\n\tpromise: Promise<T>;\n}\n\nexport class Cache<T> {\n\n\tprivate result: CacheResult<T> | null = null;\n\tconstructor(private task: (ct: CancellationToken) => Promise<T>) { }\n\n\tget(): CacheResult<T> {\n\t\tif (this.result) {\n\t\t\treturn this.result;\n\t\t}\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tconst promise = this.task(cts.token);\n\n\t\tthis.result = {\n\t\t\tpromise,\n\t\t\tdispose: () => {\n\t\t\t\tthis.result = null;\n\t\t\t\tcts.cancel();\n\t\t\t\tcts.dispose();\n\t\t\t}\n\t\t};\n\n\t\treturn this.result;\n\t}\n}\n\n/**\n * Uses a LRU cache to make a given parametrized function cached.\n * Caches just the last value.\n * The key must be JSON serializable.\n*/\nexport class LRUCachedFunction<TArg, TComputed> {\n\tprivate lastCache: TComputed | undefined = undefined;\n\tprivate lastArgKey: string | undefined = undefined;\n\n\tconstructor(private readonly fn: (arg: TArg) => TComputed) {\n\t}\n\n\tpublic get(arg: TArg): TComputed {\n\t\tconst key = JSON.stringify(arg);\n\t\tif (this.lastArgKey !== key) {\n\t\t\tthis.lastArgKey = key;\n\t\t\tthis.lastCache = this.fn(arg);\n\t\t}\n\t\treturn this.lastCache!;\n\t}\n}\n\n/**\n * Uses an unbounded cache (referential equality) to memoize the results of the given function.\n*/\nexport class CachedFunction<TArg, TValue> {\n\tprivate readonly _map = new Map<TArg, TValue>();\n\tpublic get cachedValues(): ReadonlyMap<TArg, TValue> {\n\t\treturn this._map;\n\t}\n\n\tconstructor(private readonly fn: (arg: TArg) => TValue) { }\n\n\tpublic get(arg: TArg): TValue {\n\t\tif (this._map.has(arg)) {\n\t\t\treturn this._map.get(arg)!;\n\t\t}\n\t\tconst value = this.fn(arg);\n\t\tthis._map.set(arg, value);\n\t\treturn value;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, CancellationTokenSource } from './cancellation';\nimport { IDisposable } from './lifecycle';\n\nexport interface CacheResult<T> extends IDisposable {\n\tpromise: Promise<T>;\n}\n\nexport class Cache<T> {\n\n\tprivate result: CacheResult<T> | null = null;\n\tconstructor(private task: (ct: CancellationToken) => Promise<T>) { }\n\n\tget(): CacheResult<T> {\n\t\tif (this.result) {\n\t\t\treturn this.result;\n\t\t}\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tconst promise = this.task(cts.token);\n\n\t\tthis.result = {\n\t\t\tpromise,\n\t\t\tdispose: () => {\n\t\t\t\tthis.result = null;\n\t\t\t\tcts.cancel();\n\t\t\t\tcts.dispose();\n\t\t\t}\n\t\t};\n\n\t\treturn this.result;\n\t}\n}\n\n/**\n * Uses a LRU cache to make a given parametrized function cached.\n * Caches just the last value.\n * The key must be JSON serializable.\n*/\nexport class LRUCachedFunction<TArg, TComputed> {\n\tprivate lastCache: TComputed | undefined = undefined;\n\tprivate lastArgKey: string | undefined = undefined;\n\n\tconstructor(private readonly fn: (arg: TArg) => TComputed) {\n\t}\n\n\tpublic get(arg: TArg): TComputed {\n\t\tconst key = JSON.stringify(arg);\n\t\tif (this.lastArgKey !== key) {\n\t\t\tthis.lastArgKey = key;\n\t\t\tthis.lastCache = this.fn(arg);\n\t\t}\n\t\treturn this.lastCache!;\n\t}\n}\n\n/**\n * Uses an unbounded cache (referential equality) to memoize the results of the given function.\n*/\nexport class CachedFunction<TArg, TValue> {\n\tprivate readonly _map = new Map<TArg, TValue>();\n\tpublic get cachedValues(): ReadonlyMap<TArg, TValue> {\n\t\treturn this._map;\n\t}\n\n\tconstructor(private readonly fn: (arg: TArg) => TValue) { }\n\n\tpublic get(arg: TArg): TValue {\n\t\tif (this._map.has(arg)) {\n\t\t\treturn this._map.get(arg)!;\n\t\t}\n\t\tconst value = this.fn(arg);\n\t\tthis._map.set(arg, value);\n\t\treturn value;\n\t}\n}\n"]}