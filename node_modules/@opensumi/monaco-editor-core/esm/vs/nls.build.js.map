{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/nls.build.ts","vs/nls.build.ts"],"names":[],"mappings":"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","file":"nls.build.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst buildMap: { [name: string]: string[] } = {};\nconst buildMapKeys: { [name: string]: string[] } = {};\nconst entryPoints: { [entryPoint: string]: string[] } = {};\n\nexport interface ILocalizeInfo {\n\tkey: string;\n\tcomment: string[];\n}\n\nexport function localize(data: ILocalizeInfo | string, message: string, ...args: (string | number | boolean | undefined | null)[]): string {\n\tthrow new Error(`Not supported at build time!`);\n}\n\nexport function localize2(data: ILocalizeInfo | string, message: string, ...args: (string | number | boolean | undefined | null)[]): never {\n\tthrow new Error(`Not supported at build time!`);\n}\n\nexport function getConfiguredDefaultLocale(): string | undefined {\n\tthrow new Error(`Not supported at build time!`);\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function load(name: string, req: AMDLoader.IRelativeRequire, load: AMDLoader.IPluginLoadCallback, config: AMDLoader.IConfigurationOptions): void {\n\tif (!name || name.length === 0) {\n\t\tload({ localize, localize2, getConfiguredDefaultLocale });\n\t} else {\n\t\treq([name + '.nls', name + '.nls.keys'], function (messages: string[], keys: string[]) {\n\t\t\tbuildMap[name] = messages;\n\t\t\tbuildMapKeys[name] = keys;\n\t\t\tload(messages);\n\t\t});\n\t}\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function write(pluginName: string, moduleName: string, write: AMDLoader.IPluginWriteCallback): void {\n\tconst entryPoint = write.getEntryPoint();\n\n\tentryPoints[entryPoint] = entryPoints[entryPoint] || [];\n\tentryPoints[entryPoint].push(moduleName);\n\n\tif (moduleName !== entryPoint) {\n\t\twrite.asModule(pluginName + '!' + moduleName, 'define([\\'vs/nls\\', \\'vs/nls!' + entryPoint + '\\'], function(nls, data) { return nls.create(\"' + moduleName + '\", data); });');\n\t}\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function writeFile(pluginName: string, moduleName: string, req: AMDLoader.IRelativeRequire, write: AMDLoader.IPluginWriteFileCallback, config: AMDLoader.IConfigurationOptions): void {\n\tif (entryPoints.hasOwnProperty(moduleName)) {\n\t\tconst fileName = req.toUrl(moduleName + '.nls.js');\n\t\tconst contents = [\n\t\t\t'/*---------------------------------------------------------',\n\t\t\t' * Copyright (c) Microsoft Corporation. All rights reserved.',\n\t\t\t' *--------------------------------------------------------*/'\n\t\t],\n\t\t\tentries = entryPoints[moduleName];\n\n\t\tconst data: { [moduleName: string]: string[] } = {};\n\t\tfor (let i = 0; i < entries.length; i++) {\n\t\t\tdata[entries[i]] = buildMap[entries[i]];\n\t\t}\n\n\t\tcontents.push('define(\"' + moduleName + '.nls\", ' + JSON.stringify(data, null, '\\t') + ');');\n\t\twrite(fileName, contents.join('\\r\\n'));\n\t}\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function finishBuild(write: AMDLoader.IPluginWriteFileCallback): void {\n\twrite('nls.metadata.json', JSON.stringify({\n\t\tkeys: buildMapKeys,\n\t\tmessages: buildMap,\n\t\tbundles: entryPoints\n\t}, null, '\\t'));\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst buildMap: { [name: string]: string[] } = {};\nconst buildMapKeys: { [name: string]: string[] } = {};\nconst entryPoints: { [entryPoint: string]: string[] } = {};\n\nexport interface ILocalizeInfo {\n\tkey: string;\n\tcomment: string[];\n}\n\nexport function localize(data: ILocalizeInfo | string, message: string, ...args: (string | number | boolean | undefined | null)[]): string {\n\tthrow new Error(`Not supported at build time!`);\n}\n\nexport function localize2(data: ILocalizeInfo | string, message: string, ...args: (string | number | boolean | undefined | null)[]): never {\n\tthrow new Error(`Not supported at build time!`);\n}\n\nexport function getConfiguredDefaultLocale(): string | undefined {\n\tthrow new Error(`Not supported at build time!`);\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function load(name: string, req: AMDLoader.IRelativeRequire, load: AMDLoader.IPluginLoadCallback, config: AMDLoader.IConfigurationOptions): void {\n\tif (!name || name.length === 0) {\n\t\tload({ localize, localize2, getConfiguredDefaultLocale });\n\t} else {\n\t\treq([name + '.nls', name + '.nls.keys'], function (messages: string[], keys: string[]) {\n\t\t\tbuildMap[name] = messages;\n\t\t\tbuildMapKeys[name] = keys;\n\t\t\tload(messages);\n\t\t});\n\t}\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function write(pluginName: string, moduleName: string, write: AMDLoader.IPluginWriteCallback): void {\n\tconst entryPoint = write.getEntryPoint();\n\n\tentryPoints[entryPoint] = entryPoints[entryPoint] || [];\n\tentryPoints[entryPoint].push(moduleName);\n\n\tif (moduleName !== entryPoint) {\n\t\twrite.asModule(pluginName + '!' + moduleName, 'define([\\'vs/nls\\', \\'vs/nls!' + entryPoint + '\\'], function(nls, data) { return nls.create(\"' + moduleName + '\", data); });');\n\t}\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function writeFile(pluginName: string, moduleName: string, req: AMDLoader.IRelativeRequire, write: AMDLoader.IPluginWriteFileCallback, config: AMDLoader.IConfigurationOptions): void {\n\tif (entryPoints.hasOwnProperty(moduleName)) {\n\t\tconst fileName = req.toUrl(moduleName + '.nls.js');\n\t\tconst contents = [\n\t\t\t'/*---------------------------------------------------------',\n\t\t\t' * Copyright (c) Microsoft Corporation. All rights reserved.',\n\t\t\t' *--------------------------------------------------------*/'\n\t\t],\n\t\t\tentries = entryPoints[moduleName];\n\n\t\tconst data: { [moduleName: string]: string[] } = {};\n\t\tfor (let i = 0; i < entries.length; i++) {\n\t\t\tdata[entries[i]] = buildMap[entries[i]];\n\t\t}\n\n\t\tcontents.push('define(\"' + moduleName + '.nls\", ' + JSON.stringify(data, null, '\\t') + ');');\n\t\twrite(fileName, contents.join('\\r\\n'));\n\t}\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function finishBuild(write: AMDLoader.IPluginWriteFileCallback): void {\n\twrite('nls.metadata.json', JSON.stringify({\n\t\tkeys: buildMapKeys,\n\t\tmessages: buildMap,\n\t\tbundles: entryPoints\n\t}, null, '\\t'));\n}\n"]}