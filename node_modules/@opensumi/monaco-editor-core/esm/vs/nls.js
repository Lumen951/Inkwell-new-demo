"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreferenceScope = exports.getConfiguredDefaultLocale = exports.localize2 = exports.localize = exports.configureLocaleFactory = exports.loadLocaleBundle = exports.setLocale = void 0;
// @ts-ignore
const zhCnBundle = require('../../dev/vs/editor/editor.main.nls.zh-cn.json');
function _format(message, args) {
    let result;
    if (args.length === 0) {
        result = message;
    }
    else {
        result = message.replace(/\{(\d+)\}/g, function (match, rest) {
            const index = rest[0];
            return typeof args[index] !== 'undefined' ? args[index] : match;
        });
    }
    return result;
}
let defaultLocale;
let initialized = false;
let CURRENT_LOCALE_DATA = null;
let localeFactory;
function setLocale(locale) {
    defaultLocale = locale;
}
exports.setLocale = setLocale;
function loadLocaleBundle(bundle) {
    CURRENT_LOCALE_DATA = bundle;
}
exports.loadLocaleBundle = loadLocaleBundle;
function configureLocaleFactory(factory) {
    localeFactory = factory;
}
exports.configureLocaleFactory = configureLocaleFactory;
function localize(data, message, ...args) {
    // allow-any-unicode-next-line
    // 第一次调用 localize 时如果没有默认语言，或语言包尚未初始化，则走初始化逻辑
    if (!defaultLocale || !initialized) {
        const factory = localeFactory || defaultInitialLocaleBundle;
        if (factory) {
            defaultLocale = factory();
            // allow-any-unicode-next-line
            // 由于目前仅支持中/英文，所以如果 locale 为 'zh-cn'，则表示已经设置了中文，locale 不设置的话，直接用传入的默认值
            if ((defaultLocale === null || defaultLocale === void 0 ? void 0 : defaultLocale.toLowerCase()) === 'zh-cn') {
                CURRENT_LOCALE_DATA = zhCnBundle;
            }
            initialized = true;
        }
    }
    if (typeof data === 'string') {
        let template;
        if (CURRENT_LOCALE_DATA && CURRENT_LOCALE_DATA[data]) {
            template = CURRENT_LOCALE_DATA[data][message];
        }
        const [defaultMessage, ...otherArgs] = args;
        return _format(template || defaultMessage, otherArgs);
    }
    return _format(message, args);
}
exports.localize = localize;
function localize2(data, message, ...args) {
    // eslint-disable-next-line local/code-no-unexternalized-strings
    const res = localize(data, message, ...args);
    return {
        original: res,
        value: res
    };
}
exports.localize2 = localize2;
function getConfiguredDefaultLocale(_) {
    return undefined;
}
exports.getConfiguredDefaultLocale = getConfiguredDefaultLocale;
var PreferenceScope;
(function (PreferenceScope) {
    PreferenceScope[PreferenceScope["Default"] = 0] = "Default";
    PreferenceScope[PreferenceScope["User"] = 1] = "User";
})(PreferenceScope || (exports.PreferenceScope = PreferenceScope = {}));
const KAITIAN_LANGUAGE_KEY = 'general.language';
function defaultInitialLocaleBundle() {
    // @ts-ignore
    if (!global.localStorage || !self.localStorage) {
        return;
    }
    let _locale = defaultLocale;
    if (!_locale) {
        if (localStorage[`${PreferenceScope.User}:${KAITIAN_LANGUAGE_KEY}`]) {
            _locale = localStorage[`${PreferenceScope.User}:${KAITIAN_LANGUAGE_KEY}`];
        }
        else if (localStorage[`${PreferenceScope.Default}:${KAITIAN_LANGUAGE_KEY}`]) {
            _locale = localStorage[`${PreferenceScope.Default}:${KAITIAN_LANGUAGE_KEY}`];
        }
        else {
            _locale = 'zh-CN';
        }
    }
    return _locale;
}
//# sourceMappingURL=nls.js.map