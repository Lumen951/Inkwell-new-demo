{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/standalone/common/standaloneTheme.ts","vs/editor/standalone/common/standaloneTheme.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAIhG,wFAAuF;AAG1E,QAAA,uBAAuB,GAAG,IAAA,+BAAe,EAA0B,cAAc,CAAC,CAAC","file":"standaloneTheme.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from '../../../base/common/color';\nimport { ITokenThemeRule, TokenTheme } from '../../common/languages/supports/tokenization';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation';\nimport { IColorTheme, IThemeService } from '../../../platform/theme/common/themeService';\n\nexport const IStandaloneThemeService = createDecorator<IStandaloneThemeService>('themeService');\n\nexport type BuiltinTheme = 'vs' | 'vs-dark' | 'hc-black' | 'hc-light';\nexport type IColors = { [colorId: string]: string };\n\nexport interface IStandaloneThemeData {\n\tbase: BuiltinTheme;\n\tinherit: boolean;\n\trules: ITokenThemeRule[];\n\tencodedTokensColors?: string[];\n\tcolors: IColors;\n}\n\nexport interface IStandaloneTheme extends IColorTheme {\n\ttokenTheme: TokenTheme;\n\tthemeName: string;\n}\n\nexport interface IStandaloneThemeService extends IThemeService {\n\treadonly _serviceBrand: undefined;\n\n\tsetTheme(themeName: string): void;\n\n\tsetAutoDetectHighContrast(autoDetectHighContrast: boolean): void;\n\n\tdefineTheme(themeName: string, themeData: IStandaloneThemeData): void;\n\n\tgetColorTheme(): IStandaloneTheme;\n\n\tsetColorMapOverride(colorMapOverride: Color[] | null): void;\n\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from '../../../base/common/color';\nimport { ITokenThemeRule, TokenTheme } from '../../common/languages/supports/tokenization';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation';\nimport { IColorTheme, IThemeService } from '../../../platform/theme/common/themeService';\n\nexport const IStandaloneThemeService = createDecorator<IStandaloneThemeService>('themeService');\n\nexport type BuiltinTheme = 'vs' | 'vs-dark' | 'hc-black' | 'hc-light';\nexport type IColors = { [colorId: string]: string };\n\nexport interface IStandaloneThemeData {\n\tbase: BuiltinTheme;\n\tinherit: boolean;\n\trules: ITokenThemeRule[];\n\tencodedTokensColors?: string[];\n\tcolors: IColors;\n}\n\nexport interface IStandaloneTheme extends IColorTheme {\n\ttokenTheme: TokenTheme;\n\tthemeName: string;\n}\n\nexport interface IStandaloneThemeService extends IThemeService {\n\treadonly _serviceBrand: undefined;\n\n\tsetTheme(themeName: string): void;\n\n\tsetAutoDetectHighContrast(autoDetectHighContrast: boolean): void;\n\n\tdefineTheme(themeName: string, themeData: IStandaloneThemeData): void;\n\n\tgetColorTheme(): IStandaloneTheme;\n\n\tsetColorMapOverride(colorMapOverride: Color[] | null): void;\n\n}\n"]}