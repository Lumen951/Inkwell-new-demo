{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/standalone/browser/quickAccess/standaloneGotoLineQuickAccess.ts","vs/editor/standalone/browser/quickAccess/standaloneGotoLineQuickAccess.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;;;;;;;;;;AAEhG,kGAA+G;AAC/G,4EAAyE;AACzE,oFAAsG;AACtG,mFAAiF;AACjF,yEAAgE;AAChE,yDAAsD;AACtD,wEAAyG;AACzG,yEAAsE;AAGtE,kFAAuF;AAEhF,IAAM,qCAAqC,GAA3C,MAAM,qCAAsC,SAAQ,yDAAmC;IAI7F,YAAgC,aAAkD;QACjF,KAAK,EAAE,CAAC;QADwC,kBAAa,GAAb,aAAa,CAAoB;QAF/D,uCAAkC,GAAG,aAAK,CAAC,IAAI,CAAC;IAInE,CAAC;IAED,IAAc,uBAAuB;;QACpC,OAAO,MAAA,IAAI,CAAC,aAAa,CAAC,oBAAoB,EAAE,mCAAI,SAAS,CAAC;IAC/D,CAAC;CACD,CAAA;AAXY,sFAAqC;gDAArC,qCAAqC;IAIpC,WAAA,sCAAkB,CAAA;GAJnB,qCAAqC,CAWjD;AAED,MAAa,cAAe,SAAQ,+BAAY;IAI/C;QACC,KAAK,CAAC;YACL,EAAE,EAAE,cAAc,CAAC,EAAE;YACrB,KAAK,EAAE,+BAAW,CAAC,mBAAmB;YACtC,KAAK,EAAE,sBAAsB;YAC7B,YAAY,EAAE,SAAS;YACvB,MAAM,EAAE;gBACP,MAAM,EAAE,qCAAiB,CAAC,KAAK;gBAC/B,OAAO,EAAE,iDAA6B;gBACtC,GAAG,EAAE,EAAE,OAAO,EAAE,gDAA6B,EAAE;gBAC/C,MAAM,0CAAgC;aACtC;SACD,CAAC,CAAC;IACJ,CAAC;IAED,GAAG,CAAC,QAA0B;QAC7B,QAAQ,CAAC,GAAG,CAAC,+BAAkB,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,qCAAqC,CAAC,MAAM,CAAC,CAAC;IACjG,CAAC;;AArBF,wCAsBC;AApBgB,iBAAE,GAAG,wBAAwB,CAAC;AAsB/C,IAAA,uCAAoB,EAAC,cAAc,CAAC,CAAC;AAErC,mBAAQ,CAAC,EAAE,CAAuB,wBAAU,CAAC,WAAW,CAAC,CAAC,2BAA2B,CAAC;IACrF,IAAI,EAAE,qCAAqC;IAC3C,MAAM,EAAE,qCAAqC,CAAC,MAAM;IACpD,WAAW,EAAE,CAAC,EAAE,WAAW,EAAE,+BAAW,CAAC,mBAAmB,EAAE,SAAS,EAAE,cAAc,CAAC,EAAE,EAAE,CAAC;CAC7F,CAAC,CAAC","file":"standaloneGotoLineQuickAccess.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AbstractGotoLineQuickAccessProvider } from '../../../contrib/quickAccess/browser/gotoLineQuickAccess';\nimport { Registry } from '../../../../platform/registry/common/platform';\nimport { IQuickAccessRegistry, Extensions } from '../../../../platform/quickinput/common/quickAccess';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService';\nimport { GoToLineNLS } from '../../../common/standaloneStrings';\nimport { Event } from '../../../../base/common/event';\nimport { EditorAction, registerEditorAction, ServicesAccessor } from '../../../browser/editorExtensions';\nimport { EditorContextKeys } from '../../../common/editorContextKeys';\nimport { KeyMod, KeyCode } from '../../../../base/common/keyCodes';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput';\n\nexport class StandaloneGotoLineQuickAccessProvider extends AbstractGotoLineQuickAccessProvider {\n\n\tprotected readonly onDidActiveTextEditorControlChange = Event.None;\n\n\tconstructor(@ICodeEditorService private readonly editorService: ICodeEditorService) {\n\t\tsuper();\n\t}\n\n\tprotected get activeTextEditorControl() {\n\t\treturn this.editorService.getFocusedCodeEditor() ?? undefined;\n\t}\n}\n\nexport class GotoLineAction extends EditorAction {\n\n\tstatic readonly ID = 'editor.action.gotoLine';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: GotoLineAction.ID,\n\t\t\tlabel: GoToLineNLS.gotoLineActionLabel,\n\t\t\talias: 'Go to Line/Column...',\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyG,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyG },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\taccessor.get(IQuickInputService).quickAccess.show(StandaloneGotoLineQuickAccessProvider.PREFIX);\n\t}\n}\n\nregisterEditorAction(GotoLineAction);\n\nRegistry.as<IQuickAccessRegistry>(Extensions.Quickaccess).registerQuickAccessProvider({\n\tctor: StandaloneGotoLineQuickAccessProvider,\n\tprefix: StandaloneGotoLineQuickAccessProvider.PREFIX,\n\thelpEntries: [{ description: GoToLineNLS.gotoLineActionLabel, commandId: GotoLineAction.ID }]\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AbstractGotoLineQuickAccessProvider } from '../../../contrib/quickAccess/browser/gotoLineQuickAccess';\nimport { Registry } from '../../../../platform/registry/common/platform';\nimport { IQuickAccessRegistry, Extensions } from '../../../../platform/quickinput/common/quickAccess';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService';\nimport { GoToLineNLS } from '../../../common/standaloneStrings';\nimport { Event } from '../../../../base/common/event';\nimport { EditorAction, registerEditorAction, ServicesAccessor } from '../../../browser/editorExtensions';\nimport { EditorContextKeys } from '../../../common/editorContextKeys';\nimport { KeyMod, KeyCode } from '../../../../base/common/keyCodes';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput';\n\nexport class StandaloneGotoLineQuickAccessProvider extends AbstractGotoLineQuickAccessProvider {\n\n\tprotected readonly onDidActiveTextEditorControlChange = Event.None;\n\n\tconstructor(@ICodeEditorService private readonly editorService: ICodeEditorService) {\n\t\tsuper();\n\t}\n\n\tprotected get activeTextEditorControl() {\n\t\treturn this.editorService.getFocusedCodeEditor() ?? undefined;\n\t}\n}\n\nexport class GotoLineAction extends EditorAction {\n\n\tstatic readonly ID = 'editor.action.gotoLine';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: GotoLineAction.ID,\n\t\t\tlabel: GoToLineNLS.gotoLineActionLabel,\n\t\t\talias: 'Go to Line/Column...',\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyG,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyG },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\taccessor.get(IQuickInputService).quickAccess.show(StandaloneGotoLineQuickAccessProvider.PREFIX);\n\t}\n}\n\nregisterEditorAction(GotoLineAction);\n\nRegistry.as<IQuickAccessRegistry>(Extensions.Quickaccess).registerQuickAccessProvider({\n\tctor: StandaloneGotoLineQuickAccessProvider,\n\tprefix: StandaloneGotoLineQuickAccessProvider.PREFIX,\n\thelpEntries: [{ description: GoToLineNLS.gotoLineActionLabel, commandId: GotoLineAction.ID }]\n});\n"]}