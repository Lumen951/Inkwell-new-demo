{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/standalone/browser/quickAccess/standaloneCommandsQuickAccess.ts","vs/editor/standalone/browser/quickAccess/standaloneCommandsQuickAccess.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;;;;;;;;;;AAEhG,4EAAyE;AACzE,oFAAsG;AACtG,yEAAoE;AAEpE,mFAAiF;AACjF,kGAAqH;AAErH,2FAAkH;AAClH,kFAAuF;AACvF,4EAAgF;AAChF,+EAAoF;AACpF,yEAA6E;AAC7E,wEAAuF;AACvF,yEAAsE;AAGtE,kFAAuF;AAEhF,IAAM,qCAAqC,GAA3C,MAAM,qCAAsC,SAAQ,+DAAyC;IAEnG,IAAc,uBAAuB,aAA0B,OAAO,MAAA,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,EAAE,mCAAI,SAAS,CAAC,CAAC,CAAC;IAEnI,YACwB,oBAA2C,EAC7B,iBAAqC,EACtD,iBAAqC,EACxC,cAA+B,EAC7B,gBAAmC,EACtC,aAA6B;QAE7C,KAAK,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,cAAc,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;QANjF,sBAAiB,GAAjB,iBAAiB,CAAoB;IAO3E,CAAC;IAES,KAAK,CAAC,eAAe;QAC9B,OAAO,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACzC,CAAC;IAES,yBAAyB;QAClC,OAAO,KAAK,CAAC;IACd,CAAC;IAES,KAAK,CAAC,yBAAyB;QACxC,OAAO,EAAE,CAAC;IACX,CAAC;CACD,CAAA;AA1BY,sFAAqC;gDAArC,qCAAqC;IAK/C,WAAA,qCAAqB,CAAA;IACrB,WAAA,sCAAkB,CAAA;IAClB,WAAA,+BAAkB,CAAA;IAClB,WAAA,0BAAe,CAAA;IACf,WAAA,6BAAiB,CAAA;IACjB,WAAA,wBAAc,CAAA;GAVJ,qCAAqC,CA0BjD;AAED,MAAa,cAAe,SAAQ,+BAAY;IAI/C;QACC,KAAK,CAAC;YACL,EAAE,EAAE,cAAc,CAAC,EAAE;YACrB,KAAK,EAAE,mCAAe,CAAC,uBAAuB;YAC9C,KAAK,EAAE,iBAAiB;YACxB,YAAY,EAAE,SAAS;YACvB,MAAM,EAAE;gBACP,MAAM,EAAE,qCAAiB,CAAC,KAAK;gBAC/B,OAAO,qBAAY;gBACnB,MAAM,0CAAgC;aACtC;YACD,eAAe,EAAE;gBAChB,KAAK,EAAE,YAAY;gBACnB,KAAK,EAAE,CAAC;aACR;SACD,CAAC,CAAC;IACJ,CAAC;IAED,GAAG,CAAC,QAA0B;QAC7B,QAAQ,CAAC,GAAG,CAAC,+BAAkB,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,qCAAqC,CAAC,MAAM,CAAC,CAAC;IACjG,CAAC;;AAxBF,wCAyBC;AAvBgB,iBAAE,GAAG,4BAA4B,CAAC;AAyBnD,IAAA,uCAAoB,EAAC,cAAc,CAAC,CAAC;AAErC,mBAAQ,CAAC,EAAE,CAAuB,wBAAU,CAAC,WAAW,CAAC,CAAC,2BAA2B,CAAC;IACrF,IAAI,EAAE,qCAAqC;IAC3C,MAAM,EAAE,qCAAqC,CAAC,MAAM;IACpD,WAAW,EAAE,CAAC,EAAE,WAAW,EAAE,mCAAe,CAAC,gBAAgB,EAAE,SAAS,EAAE,cAAc,CAAC,EAAE,EAAE,CAAC;CAC9F,CAAC,CAAC","file":"standaloneCommandsQuickAccess.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from '../../../../platform/registry/common/platform';\nimport { IQuickAccessRegistry, Extensions } from '../../../../platform/quickinput/common/quickAccess';\nimport { QuickCommandNLS } from '../../../common/standaloneStrings';\nimport { ICommandQuickPick } from '../../../../platform/quickinput/browser/commandsQuickAccess';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService';\nimport { AbstractEditorCommandsQuickAccessProvider } from '../../../contrib/quickAccess/browser/commandsQuickAccess';\nimport { IEditor } from '../../../common/editorCommon';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';\nimport { ICommandService } from '../../../../platform/commands/common/commands';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions';\nimport { EditorContextKeys } from '../../../common/editorContextKeys';\nimport { KeyCode } from '../../../../base/common/keyCodes';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput';\n\nexport class StandaloneCommandsQuickAccessProvider extends AbstractEditorCommandsQuickAccessProvider {\n\n\tprotected get activeTextEditorControl(): IEditor | undefined { return this.codeEditorService.getFocusedCodeEditor() ?? undefined; }\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IDialogService dialogService: IDialogService\n\t) {\n\t\tsuper({ showAlias: false }, instantiationService, keybindingService, commandService, telemetryService, dialogService);\n\t}\n\n\tprotected async getCommandPicks(): Promise<Array<ICommandQuickPick>> {\n\t\treturn this.getCodeEditorCommandPicks();\n\t}\n\n\tprotected hasAdditionalCommandPicks(): boolean {\n\t\treturn false;\n\t}\n\n\tprotected async getAdditionalCommandPicks(): Promise<ICommandQuickPick[]> {\n\t\treturn [];\n\t}\n}\n\nexport class GotoLineAction extends EditorAction {\n\n\tstatic readonly ID = 'editor.action.quickCommand';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: GotoLineAction.ID,\n\t\t\tlabel: QuickCommandNLS.quickCommandActionLabel,\n\t\t\talias: 'Command Palette',\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyCode.F1,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: 'z_commands',\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\taccessor.get(IQuickInputService).quickAccess.show(StandaloneCommandsQuickAccessProvider.PREFIX);\n\t}\n}\n\nregisterEditorAction(GotoLineAction);\n\nRegistry.as<IQuickAccessRegistry>(Extensions.Quickaccess).registerQuickAccessProvider({\n\tctor: StandaloneCommandsQuickAccessProvider,\n\tprefix: StandaloneCommandsQuickAccessProvider.PREFIX,\n\thelpEntries: [{ description: QuickCommandNLS.quickCommandHelp, commandId: GotoLineAction.ID }]\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from '../../../../platform/registry/common/platform';\nimport { IQuickAccessRegistry, Extensions } from '../../../../platform/quickinput/common/quickAccess';\nimport { QuickCommandNLS } from '../../../common/standaloneStrings';\nimport { ICommandQuickPick } from '../../../../platform/quickinput/browser/commandsQuickAccess';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService';\nimport { AbstractEditorCommandsQuickAccessProvider } from '../../../contrib/quickAccess/browser/commandsQuickAccess';\nimport { IEditor } from '../../../common/editorCommon';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';\nimport { ICommandService } from '../../../../platform/commands/common/commands';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions';\nimport { EditorContextKeys } from '../../../common/editorContextKeys';\nimport { KeyCode } from '../../../../base/common/keyCodes';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput';\n\nexport class StandaloneCommandsQuickAccessProvider extends AbstractEditorCommandsQuickAccessProvider {\n\n\tprotected get activeTextEditorControl(): IEditor | undefined { return this.codeEditorService.getFocusedCodeEditor() ?? undefined; }\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IDialogService dialogService: IDialogService\n\t) {\n\t\tsuper({ showAlias: false }, instantiationService, keybindingService, commandService, telemetryService, dialogService);\n\t}\n\n\tprotected async getCommandPicks(): Promise<Array<ICommandQuickPick>> {\n\t\treturn this.getCodeEditorCommandPicks();\n\t}\n\n\tprotected hasAdditionalCommandPicks(): boolean {\n\t\treturn false;\n\t}\n\n\tprotected async getAdditionalCommandPicks(): Promise<ICommandQuickPick[]> {\n\t\treturn [];\n\t}\n}\n\nexport class GotoLineAction extends EditorAction {\n\n\tstatic readonly ID = 'editor.action.quickCommand';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: GotoLineAction.ID,\n\t\t\tlabel: QuickCommandNLS.quickCommandActionLabel,\n\t\t\talias: 'Command Palette',\n\t\t\tprecondition: undefined,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyCode.F1,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: 'z_commands',\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\taccessor.get(IQuickInputService).quickAccess.show(StandaloneCommandsQuickAccessProvider.PREFIX);\n\t}\n}\n\nregisterEditorAction(GotoLineAction);\n\nRegistry.as<IQuickAccessRegistry>(Extensions.Quickaccess).registerQuickAccessProvider({\n\tctor: StandaloneCommandsQuickAccessProvider,\n\tprefix: StandaloneCommandsQuickAccessProvider.PREFIX,\n\thelpEntries: [{ description: QuickCommandNLS.quickCommandHelp, commandId: GotoLineAction.ID }]\n});\n"]}