import { Disposable } from '../../../../base/common/lifecycle';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { EditorAction, ServicesAccessor } from '../../../browser/editorExtensions';
import { IEditorContribution } from '../../../common/editorCommon';
import { ILanguageFeaturesService } from '../../../common/services/languageFeatures';
import { TriggerContext } from './parameterHintsModel';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
export declare class ParameterHintsController extends Disposable implements IEditorContribution {
    static readonly ID = "editor.controller.parameterHints";
    static get(editor: ICodeEditor): ParameterHintsController | null;
    private readonly editor;
    private readonly model;
    private readonly widget;
    constructor(editor: ICodeEditor, instantiationService: IInstantiationService, languageFeaturesService: ILanguageFeaturesService);
    cancel(): void;
    previous(): void;
    next(): void;
    trigger(context: TriggerContext): void;
}
export declare class TriggerParameterHintsAction extends EditorAction {
    constructor();
    run(accessor: ServicesAccessor, editor: ICodeEditor): void;
}
