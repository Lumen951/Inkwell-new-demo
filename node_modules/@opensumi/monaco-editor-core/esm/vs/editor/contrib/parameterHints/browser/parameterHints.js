"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ParameterHintsController_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TriggerParameterHintsAction = exports.ParameterHintsController = void 0;
const lazy_1 = require("../../../../base/common/lazy");
const lifecycle_1 = require("../../../../base/common/lifecycle");
const editorExtensions_1 = require("../../../browser/editorExtensions");
const editorContextKeys_1 = require("../../../common/editorContextKeys");
const languages = require("../../../common/languages");
const languageFeatures_1 = require("../../../common/services/languageFeatures");
const parameterHintsModel_1 = require("./parameterHintsModel");
const provideSignatureHelp_1 = require("./provideSignatureHelp");
const nls = require("../../../../nls");
const contextkey_1 = require("../../../../platform/contextkey/common/contextkey");
const instantiation_1 = require("../../../../platform/instantiation/common/instantiation");
const parameterHintsWidget_1 = require("./parameterHintsWidget");
let ParameterHintsController = ParameterHintsController_1 = class ParameterHintsController extends lifecycle_1.Disposable {
    static get(editor) {
        return editor.getContribution(ParameterHintsController_1.ID);
    }
    constructor(editor, instantiationService, languageFeaturesService) {
        super();
        this.editor = editor;
        this.model = this._register(new parameterHintsModel_1.ParameterHintsModel(editor, languageFeaturesService.signatureHelpProvider));
        this._register(this.model.onChangedHints(newParameterHints => {
            var _a;
            if (newParameterHints) {
                this.widget.value.show();
                this.widget.value.render(newParameterHints);
            }
            else {
                (_a = this.widget.rawValue) === null || _a === void 0 ? void 0 : _a.hide();
            }
        }));
        this.widget = new lazy_1.Lazy(() => this._register(instantiationService.createInstance(parameterHintsWidget_1.ParameterHintsWidget, this.editor, this.model)));
    }
    cancel() {
        this.model.cancel();
    }
    previous() {
        var _a;
        (_a = this.widget.rawValue) === null || _a === void 0 ? void 0 : _a.previous();
    }
    next() {
        var _a;
        (_a = this.widget.rawValue) === null || _a === void 0 ? void 0 : _a.next();
    }
    trigger(context) {
        this.model.trigger(context, 0);
    }
};
exports.ParameterHintsController = ParameterHintsController;
ParameterHintsController.ID = 'editor.controller.parameterHints';
exports.ParameterHintsController = ParameterHintsController = ParameterHintsController_1 = __decorate([
    __param(1, instantiation_1.IInstantiationService),
    __param(2, languageFeatures_1.ILanguageFeaturesService)
], ParameterHintsController);
class TriggerParameterHintsAction extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.triggerParameterHints',
            label: nls.localize("vs/editor/contrib/parameterHints/browser/parameterHints",0, "Trigger Parameter Hints"),
            alias: 'Trigger Parameter Hints',
            precondition: editorContextKeys_1.EditorContextKeys.hasSignatureHelpProvider,
            kbOpts: {
                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,
                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 10 /* KeyCode.Space */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            }
        });
    }
    run(accessor, editor) {
        const controller = ParameterHintsController.get(editor);
        controller === null || controller === void 0 ? void 0 : controller.trigger({
            triggerKind: languages.SignatureHelpTriggerKind.Invoke
        });
    }
}
exports.TriggerParameterHintsAction = TriggerParameterHintsAction;
(0, editorExtensions_1.registerEditorContribution)(ParameterHintsController.ID, ParameterHintsController, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);
(0, editorExtensions_1.registerEditorAction)(TriggerParameterHintsAction);
const weight = 100 /* KeybindingWeight.EditorContrib */ + 75;
const ParameterHintsCommand = editorExtensions_1.EditorCommand.bindToContribution(ParameterHintsController.get);
(0, editorExtensions_1.registerEditorCommand)(new ParameterHintsCommand({
    id: 'closeParameterHints',
    precondition: provideSignatureHelp_1.Context.Visible,
    handler: x => x.cancel(),
    kbOpts: {
        weight: weight,
        kbExpr: editorContextKeys_1.EditorContextKeys.focus,
        primary: 9 /* KeyCode.Escape */,
        secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]
    }
}));
(0, editorExtensions_1.registerEditorCommand)(new ParameterHintsCommand({
    id: 'showPrevParameterHint',
    precondition: contextkey_1.ContextKeyExpr.and(provideSignatureHelp_1.Context.Visible, provideSignatureHelp_1.Context.MultipleSignatures),
    handler: x => x.previous(),
    kbOpts: {
        weight: weight,
        kbExpr: editorContextKeys_1.EditorContextKeys.focus,
        primary: 16 /* KeyCode.UpArrow */,
        secondary: [512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */],
        mac: { primary: 16 /* KeyCode.UpArrow */, secondary: [512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */, 256 /* KeyMod.WinCtrl */ | 46 /* KeyCode.KeyP */] }
    }
}));
(0, editorExtensions_1.registerEditorCommand)(new ParameterHintsCommand({
    id: 'showNextParameterHint',
    precondition: contextkey_1.ContextKeyExpr.and(provideSignatureHelp_1.Context.Visible, provideSignatureHelp_1.Context.MultipleSignatures),
    handler: x => x.next(),
    kbOpts: {
        weight: weight,
        kbExpr: editorContextKeys_1.EditorContextKeys.focus,
        primary: 18 /* KeyCode.DownArrow */,
        secondary: [512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */],
        mac: { primary: 18 /* KeyCode.DownArrow */, secondary: [512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */, 256 /* KeyMod.WinCtrl */ | 44 /* KeyCode.KeyN */] }
    }
}));
//# sourceMappingURL=parameterHints.js.map