"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.provideSignatureHelp = exports.Context = void 0;
const cancellation_1 = require("../../../../base/common/cancellation");
const errors_1 = require("../../../../base/common/errors");
const types_1 = require("../../../../base/common/types");
const uri_1 = require("../../../../base/common/uri");
const position_1 = require("../../../common/core/position");
const languages = require("../../../common/languages");
const languageFeatures_1 = require("../../../common/services/languageFeatures");
const resolverService_1 = require("../../../common/services/resolverService");
const commands_1 = require("../../../../platform/commands/common/commands");
const contextkey_1 = require("../../../../platform/contextkey/common/contextkey");
exports.Context = {
    Visible: new contextkey_1.RawContextKey('parameterHintsVisible', false),
    MultipleSignatures: new contextkey_1.RawContextKey('parameterHintsMultipleSignatures', false),
};
async function provideSignatureHelp(registry, model, position, context, token) {
    const supports = registry.ordered(model);
    for (const support of supports) {
        try {
            const result = await support.provideSignatureHelp(model, position, token, context);
            if (result) {
                return result;
            }
        }
        catch (err) {
            (0, errors_1.onUnexpectedExternalError)(err);
        }
    }
    return undefined;
}
exports.provideSignatureHelp = provideSignatureHelp;
commands_1.CommandsRegistry.registerCommand('_executeSignatureHelpProvider', async (accessor, ...args) => {
    const [uri, position, triggerCharacter] = args;
    (0, types_1.assertType)(uri_1.URI.isUri(uri));
    (0, types_1.assertType)(position_1.Position.isIPosition(position));
    (0, types_1.assertType)(typeof triggerCharacter === 'string' || !triggerCharacter);
    const languageFeaturesService = accessor.get(languageFeatures_1.ILanguageFeaturesService);
    const ref = await accessor.get(resolverService_1.ITextModelService).createModelReference(uri);
    try {
        const result = await provideSignatureHelp(languageFeaturesService.signatureHelpProvider, ref.object.textEditorModel, position_1.Position.lift(position), {
            triggerKind: languages.SignatureHelpTriggerKind.Invoke,
            isRetrigger: false,
            triggerCharacter,
        }, cancellation_1.CancellationToken.None);
        if (!result) {
            return undefined;
        }
        setTimeout(() => result.dispose(), 0);
        return result.value;
    }
    finally {
        ref.dispose();
    }
});
//# sourceMappingURL=provideSignatureHelp.js.map