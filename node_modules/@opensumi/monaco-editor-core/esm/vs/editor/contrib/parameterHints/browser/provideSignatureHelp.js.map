{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/parameterHints/browser/provideSignatureHelp.ts","vs/editor/contrib/parameterHints/browser/provideSignatureHelp.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,uEAAyE;AACzE,2DAA2E;AAC3E,yDAA2D;AAC3D,qDAAkD;AAClD,4DAAoE;AAEpE,uDAAuD;AAEvD,gFAAqF;AACrF,8EAA6E;AAC7E,4EAAiF;AACjF,kFAAkF;AAErE,QAAA,OAAO,GAAG;IACtB,OAAO,EAAE,IAAI,0BAAa,CAAU,uBAAuB,EAAE,KAAK,CAAC;IACnE,kBAAkB,EAAE,IAAI,0BAAa,CAAU,kCAAkC,EAAE,KAAK,CAAC;CACzF,CAAC;AAEK,KAAK,UAAU,oBAAoB,CACzC,QAAkE,EAClE,KAAiB,EACjB,QAAkB,EAClB,OAAuC,EACvC,KAAwB;IAGxB,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAEzC,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;QAChC,IAAI,CAAC;YACJ,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,oBAAoB,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;YACnF,IAAI,MAAM,EAAE,CAAC;gBACZ,OAAO,MAAM,CAAC;YACf,CAAC;QACF,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACd,IAAA,kCAAyB,EAAC,GAAG,CAAC,CAAC;QAChC,CAAC;IACF,CAAC;IACD,OAAO,SAAS,CAAC;AAClB,CAAC;AArBD,oDAqBC;AAED,2BAAgB,CAAC,eAAe,CAAC,+BAA+B,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAA+B,EAAE,EAAE;IACxH,MAAM,CAAC,GAAG,EAAE,QAAQ,EAAE,gBAAgB,CAAC,GAAG,IAAI,CAAC;IAC/C,IAAA,kBAAU,EAAC,SAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,IAAA,kBAAU,EAAC,mBAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3C,IAAA,kBAAU,EAAC,OAAO,gBAAgB,KAAK,QAAQ,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAEtE,MAAM,uBAAuB,GAAG,QAAQ,CAAC,GAAG,CAAC,2CAAwB,CAAC,CAAC;IAEvE,MAAM,GAAG,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,mCAAiB,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;IAC5E,IAAI,CAAC;QAEJ,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,uBAAuB,CAAC,qBAAqB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,mBAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC7I,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,MAAM;YACtD,WAAW,EAAE,KAAK;YAClB,gBAAgB;SAChB,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC;QAE3B,IAAI,CAAC,MAAM,EAAE,CAAC;YACb,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;QACtC,OAAO,MAAM,CAAC,KAAK,CAAC;IAErB,CAAC;YAAS,CAAC;QACV,GAAG,CAAC,OAAO,EAAE,CAAC;IACf,CAAC;AACF,CAAC,CAAC,CAAC","file":"provideSignatureHelp.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors';\nimport { assertType } from '../../../../base/common/types';\nimport { URI } from '../../../../base/common/uri';\nimport { IPosition, Position } from '../../../common/core/position';\nimport { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry';\nimport * as languages from '../../../common/languages';\nimport { ITextModel } from '../../../common/model';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { ITextModelService } from '../../../common/services/resolverService';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey';\n\nexport const Context = {\n\tVisible: new RawContextKey<boolean>('parameterHintsVisible', false),\n\tMultipleSignatures: new RawContextKey<boolean>('parameterHintsMultipleSignatures', false),\n};\n\nexport async function provideSignatureHelp(\n\tregistry: LanguageFeatureRegistry<languages.SignatureHelpProvider>,\n\tmodel: ITextModel,\n\tposition: Position,\n\tcontext: languages.SignatureHelpContext,\n\ttoken: CancellationToken\n): Promise<languages.SignatureHelpResult | undefined> {\n\n\tconst supports = registry.ordered(model);\n\n\tfor (const support of supports) {\n\t\ttry {\n\t\t\tconst result = await support.provideSignatureHelp(model, position, token, context);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tonUnexpectedExternalError(err);\n\t\t}\n\t}\n\treturn undefined;\n}\n\nCommandsRegistry.registerCommand('_executeSignatureHelpProvider', async (accessor, ...args: [URI, IPosition, string?]) => {\n\tconst [uri, position, triggerCharacter] = args;\n\tassertType(URI.isUri(uri));\n\tassertType(Position.isIPosition(position));\n\tassertType(typeof triggerCharacter === 'string' || !triggerCharacter);\n\n\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\n\tconst ref = await accessor.get(ITextModelService).createModelReference(uri);\n\ttry {\n\n\t\tconst result = await provideSignatureHelp(languageFeaturesService.signatureHelpProvider, ref.object.textEditorModel, Position.lift(position), {\n\t\t\ttriggerKind: languages.SignatureHelpTriggerKind.Invoke,\n\t\t\tisRetrigger: false,\n\t\t\ttriggerCharacter,\n\t\t}, CancellationToken.None);\n\n\t\tif (!result) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tsetTimeout(() => result.dispose(), 0);\n\t\treturn result.value;\n\n\t} finally {\n\t\tref.dispose();\n\t}\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors';\nimport { assertType } from '../../../../base/common/types';\nimport { URI } from '../../../../base/common/uri';\nimport { IPosition, Position } from '../../../common/core/position';\nimport { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry';\nimport * as languages from '../../../common/languages';\nimport { ITextModel } from '../../../common/model';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { ITextModelService } from '../../../common/services/resolverService';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey';\n\nexport const Context = {\n\tVisible: new RawContextKey<boolean>('parameterHintsVisible', false),\n\tMultipleSignatures: new RawContextKey<boolean>('parameterHintsMultipleSignatures', false),\n};\n\nexport async function provideSignatureHelp(\n\tregistry: LanguageFeatureRegistry<languages.SignatureHelpProvider>,\n\tmodel: ITextModel,\n\tposition: Position,\n\tcontext: languages.SignatureHelpContext,\n\ttoken: CancellationToken\n): Promise<languages.SignatureHelpResult | undefined> {\n\n\tconst supports = registry.ordered(model);\n\n\tfor (const support of supports) {\n\t\ttry {\n\t\t\tconst result = await support.provideSignatureHelp(model, position, token, context);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tonUnexpectedExternalError(err);\n\t\t}\n\t}\n\treturn undefined;\n}\n\nCommandsRegistry.registerCommand('_executeSignatureHelpProvider', async (accessor, ...args: [URI, IPosition, string?]) => {\n\tconst [uri, position, triggerCharacter] = args;\n\tassertType(URI.isUri(uri));\n\tassertType(Position.isIPosition(position));\n\tassertType(typeof triggerCharacter === 'string' || !triggerCharacter);\n\n\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\n\tconst ref = await accessor.get(ITextModelService).createModelReference(uri);\n\ttry {\n\n\t\tconst result = await provideSignatureHelp(languageFeaturesService.signatureHelpProvider, ref.object.textEditorModel, Position.lift(position), {\n\t\t\ttriggerKind: languages.SignatureHelpTriggerKind.Invoke,\n\t\t\tisRetrigger: false,\n\t\t\ttriggerCharacter,\n\t\t}, CancellationToken.None);\n\n\t\tif (!result) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tsetTimeout(() => result.dispose(), 0);\n\t\treturn result.value;\n\n\t} finally {\n\t\tref.dispose();\n\t}\n});\n"]}