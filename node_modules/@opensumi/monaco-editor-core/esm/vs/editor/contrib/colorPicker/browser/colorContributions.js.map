{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/colorPicker/browser/colorContributions.ts","vs/editor/contrib/colorPicker/browser/colorContributions.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,iEAA+D;AAE/D,wEAAgH;AAEhH,sDAAmD;AAEnD,mDAAoE;AACpE,mEAAgE;AAChE,qDAA4D;AAE5D,+DAA0E;AAE1E,MAAa,iBAAkB,SAAQ,sBAAU;IAMhD,YAA6B,OAAoB;QAEhD,KAAK,EAAE,CAAC;QAFoB,YAAO,GAAP,OAAO,CAAa;QAGhD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE,CAAC;IAEQ,OAAO;QACf,KAAK,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAEO,WAAW,CAAC,UAA6B;QAEhD,MAAM,0BAA0B,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,mDAAyC,CAAC;QACnG,IAAI,0BAA0B,KAAK,OAAO,IAAI,0BAA0B,KAAK,eAAe,EAAE,CAAC;YAC9F,OAAO;QACR,CAAC;QAED,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;QAEjC,IAAI,MAAM,CAAC,IAAI,yCAAiC,EAAE,CAAC;YAClD,OAAO;QACR,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;YACjC,OAAO;QACR,CAAC;QAED,IAAI,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,KAAK,iDAAiC,EAAE,CAAC;YAC3F,OAAO;QACR,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACnB,OAAO;QACR,CAAC;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAkB,uBAAe,CAAC,EAAE,CAAC,CAAC;QAC1F,IAAI,CAAC,eAAe,EAAE,CAAC;YACtB,OAAO;QACR,CAAC;QACD,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE,CAAC;YAC3C,MAAM,KAAK,GAAG,IAAI,aAAK,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,MAAM,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,MAAM,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;YAC5I,eAAe,CAAC,gBAAgB,CAAC,KAAK,oEAAoD,KAAK,EAAE,IAAI,CAAC,CAAC;QACxG,CAAC;IACF,CAAC;;AAjDF,8CAkDC;AAhDuB,oBAAE,GAAW,kCAAkC,CAAC;AAEvD,gCAAc,GAAG,IAAI,CAAC,CAAC,KAAK;AAgD7C,IAAA,6CAA0B,EAAC,iBAAiB,CAAC,EAAE,EAAE,iBAAiB,iEAAyD,CAAC;AAC5H,qCAAwB,CAAC,QAAQ,CAAC,6CAAqB,CAAC,CAAC","file":"colorContributions.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { ICodeEditor, IEditorMouseEvent, MouseTargetType } from '../../../browser/editorBrowser';\nimport { EditorContributionInstantiation, registerEditorContribution } from '../../../browser/editorExtensions';\nimport { EditorOption } from '../../../common/config/editorOptions';\nimport { Range } from '../../../common/core/range';\nimport { IEditorContribution } from '../../../common/editorCommon';\nimport { ColorDecorationInjectedTextMarker } from './colorDetector';\nimport { ColorHoverParticipant } from './colorHoverParticipant';\nimport { HoverController } from '../../hover/browser/hover';\nimport { HoverStartMode, HoverStartSource } from '../../hover/browser/hoverOperation';\nimport { HoverParticipantRegistry } from '../../hover/browser/hoverTypes';\n\nexport class ColorContribution extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID: string = 'editor.contrib.colorContribution';\n\n\tstatic readonly RECOMPUTE_TIME = 1000; // ms\n\n\tconstructor(private readonly _editor: ICodeEditor,\n\t) {\n\t\tsuper();\n\t\tthis._register(_editor.onMouseDown((e) => this.onMouseDown(e)));\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tprivate onMouseDown(mouseEvent: IEditorMouseEvent) {\n\n\t\tconst colorDecoratorsActivatedOn = this._editor.getOption(EditorOption.colorDecoratorsActivatedOn);\n\t\tif (colorDecoratorsActivatedOn !== 'click' && colorDecoratorsActivatedOn !== 'clickAndHover') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst target = mouseEvent.target;\n\n\t\tif (target.type !== MouseTargetType.CONTENT_TEXT) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!target.detail.injectedText) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (target.detail.injectedText.options.attachedData !== ColorDecorationInjectedTextMarker) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!target.range) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst hoverController = this._editor.getContribution<HoverController>(HoverController.ID);\n\t\tif (!hoverController) {\n\t\t\treturn;\n\t\t}\n\t\tif (!hoverController.isColorPickerVisible) {\n\t\t\tconst range = new Range(target.range.startLineNumber, target.range.startColumn + 1, target.range.endLineNumber, target.range.endColumn + 1);\n\t\t\thoverController.showContentHover(range, HoverStartMode.Immediate, HoverStartSource.Mouse, false, true);\n\t\t}\n\t}\n}\n\nregisterEditorContribution(ColorContribution.ID, ColorContribution, EditorContributionInstantiation.BeforeFirstInteraction);\nHoverParticipantRegistry.register(ColorHoverParticipant);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { ICodeEditor, IEditorMouseEvent, MouseTargetType } from '../../../browser/editorBrowser';\nimport { EditorContributionInstantiation, registerEditorContribution } from '../../../browser/editorExtensions';\nimport { EditorOption } from '../../../common/config/editorOptions';\nimport { Range } from '../../../common/core/range';\nimport { IEditorContribution } from '../../../common/editorCommon';\nimport { ColorDecorationInjectedTextMarker } from './colorDetector';\nimport { ColorHoverParticipant } from './colorHoverParticipant';\nimport { HoverController } from '../../hover/browser/hover';\nimport { HoverStartMode, HoverStartSource } from '../../hover/browser/hoverOperation';\nimport { HoverParticipantRegistry } from '../../hover/browser/hoverTypes';\n\nexport class ColorContribution extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID: string = 'editor.contrib.colorContribution';\n\n\tstatic readonly RECOMPUTE_TIME = 1000; // ms\n\n\tconstructor(private readonly _editor: ICodeEditor,\n\t) {\n\t\tsuper();\n\t\tthis._register(_editor.onMouseDown((e) => this.onMouseDown(e)));\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tprivate onMouseDown(mouseEvent: IEditorMouseEvent) {\n\n\t\tconst colorDecoratorsActivatedOn = this._editor.getOption(EditorOption.colorDecoratorsActivatedOn);\n\t\tif (colorDecoratorsActivatedOn !== 'click' && colorDecoratorsActivatedOn !== 'clickAndHover') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst target = mouseEvent.target;\n\n\t\tif (target.type !== MouseTargetType.CONTENT_TEXT) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!target.detail.injectedText) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (target.detail.injectedText.options.attachedData !== ColorDecorationInjectedTextMarker) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!target.range) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst hoverController = this._editor.getContribution<HoverController>(HoverController.ID);\n\t\tif (!hoverController) {\n\t\t\treturn;\n\t\t}\n\t\tif (!hoverController.isColorPickerVisible) {\n\t\t\tconst range = new Range(target.range.startLineNumber, target.range.startColumn + 1, target.range.endLineNumber, target.range.endColumn + 1);\n\t\t\thoverController.showContentHover(range, HoverStartMode.Immediate, HoverStartSource.Mouse, false, true);\n\t\t}\n\t}\n}\n\nregisterEditorContribution(ColorContribution.ID, ColorContribution, EditorContributionInstantiation.BeforeFirstInteraction);\nHoverParticipantRegistry.register(ColorHoverParticipant);\n"]}