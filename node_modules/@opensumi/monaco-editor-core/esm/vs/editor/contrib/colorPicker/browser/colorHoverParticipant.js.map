{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/colorPicker/browser/colorHoverParticipant.ts","vs/editor/contrib/colorPicker/browser/colorHoverParticipant.ts"],"names":[],"mappings":"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","file":"colorHoverParticipant.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AsyncIterableObject } from '../../../../base/common/async';\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { Color, RGBA } from '../../../../base/common/color';\nimport { Disposable, DisposableStore, IDisposable } from '../../../../base/common/lifecycle';\nimport { IActiveCodeEditor, ICodeEditor } from '../../../browser/editorBrowser';\nimport { EditorOption } from '../../../common/config/editorOptions';\nimport { Range } from '../../../common/core/range';\nimport { IModelDecoration, ITextModel, TrackedRangeStickiness } from '../../../common/model';\nimport { DocumentColorProvider, IColorInformation } from '../../../common/languages';\nimport { getColorPresentations, getColors } from './color';\nimport { ColorDetector } from './colorDetector';\nimport { ColorPickerModel } from './colorPickerModel';\nimport { ColorPickerWidget } from './colorPickerWidget';\nimport { HoverAnchor, HoverAnchorType, IEditorHoverParticipant, IEditorHoverRenderContext, IHoverPart } from '../../hover/browser/hoverTypes';\nimport { IThemeService } from '../../../../platform/theme/common/themeService';\nimport { ISingleEditOperation } from '../../../common/core/editOperation';\nimport { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry';\nimport { Dimension } from '../../../../base/browser/dom';\n\nexport class ColorHover implements IHoverPart {\n\n\t/**\n\t * Force the hover to always be rendered at this specific range,\n\t * even in the case of multiple hover parts.\n\t */\n\tpublic readonly forceShowAtRange: boolean = true;\n\n\tconstructor(\n\t\tpublic readonly owner: IEditorHoverParticipant<ColorHover>,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly model: ColorPickerModel,\n\t\tpublic readonly provider: DocumentColorProvider\n\t) { }\n\n\tpublic isValidForHoverAnchor(anchor: HoverAnchor): boolean {\n\t\treturn (\n\t\t\tanchor.type === HoverAnchorType.Range\n\t\t\t&& this.range.startColumn <= anchor.range.startColumn\n\t\t\t&& this.range.endColumn >= anchor.range.endColumn\n\t\t);\n\t}\n}\n\nexport class ColorHoverParticipant implements IEditorHoverParticipant<ColorHover> {\n\n\tpublic readonly hoverOrdinal: number = 2;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) { }\n\n\tpublic computeSync(_anchor: HoverAnchor, _lineDecorations: IModelDecoration[]): ColorHover[] {\n\t\treturn [];\n\t}\n\n\tpublic computeAsync(anchor: HoverAnchor, lineDecorations: IModelDecoration[], token: CancellationToken): AsyncIterableObject<ColorHover> {\n\t\treturn AsyncIterableObject.fromPromise(this._computeAsync(anchor, lineDecorations, token));\n\t}\n\n\tprivate async _computeAsync(_anchor: HoverAnchor, lineDecorations: IModelDecoration[], _token: CancellationToken): Promise<ColorHover[]> {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\t\tconst colorDetector = ColorDetector.get(this._editor);\n\t\tif (!colorDetector) {\n\t\t\treturn [];\n\t\t}\n\t\tfor (const d of lineDecorations) {\n\t\t\tif (!colorDetector.isColorDecoration(d)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst colorData = colorDetector.getColorData(d.range.getStartPosition());\n\t\t\tif (colorData) {\n\t\t\t\tconst colorHover = await _createColorHover(this, this._editor.getModel(), colorData.colorInfo, colorData.provider);\n\t\t\t\treturn [colorHover];\n\t\t\t}\n\n\t\t}\n\t\treturn [];\n\t}\n\n\tpublic renderHoverParts(context: IEditorHoverRenderContext, hoverParts: ColorHover[]): IDisposable {\n\t\treturn renderHoverParts(this, this._editor, this._themeService, hoverParts, context);\n\t}\n}\n\nexport class StandaloneColorPickerHover {\n\tconstructor(\n\t\tpublic readonly owner: StandaloneColorPickerParticipant,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly model: ColorPickerModel,\n\t\tpublic readonly provider: DocumentColorProvider\n\t) { }\n}\n\nexport class StandaloneColorPickerParticipant {\n\n\tpublic readonly hoverOrdinal: number = 2;\n\tprivate _color: Color | null = null;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) { }\n\n\tpublic async createColorHover(defaultColorInfo: IColorInformation, defaultColorProvider: DocumentColorProvider, colorProviderRegistry: LanguageFeatureRegistry<DocumentColorProvider>): Promise<{ colorHover: StandaloneColorPickerHover; foundInEditor: boolean } | null> {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn null;\n\t\t}\n\t\tconst colorDetector = ColorDetector.get(this._editor);\n\t\tif (!colorDetector) {\n\t\t\treturn null;\n\t\t}\n\t\tconst colors = await getColors(colorProviderRegistry, this._editor.getModel(), CancellationToken.None);\n\t\tlet foundColorInfo: IColorInformation | null = null;\n\t\tlet foundColorProvider: DocumentColorProvider | null = null;\n\t\tfor (const colorData of colors) {\n\t\t\tconst colorInfo = colorData.colorInfo;\n\t\t\tif (Range.containsRange(colorInfo.range, defaultColorInfo.range)) {\n\t\t\t\tfoundColorInfo = colorInfo;\n\t\t\t\tfoundColorProvider = colorData.provider;\n\t\t\t}\n\t\t}\n\t\tconst colorInfo = foundColorInfo ?? defaultColorInfo;\n\t\tconst colorProvider = foundColorProvider ?? defaultColorProvider;\n\t\tconst foundInEditor = !!foundColorInfo;\n\t\treturn { colorHover: await _createColorHover(this, this._editor.getModel(), colorInfo, colorProvider), foundInEditor: foundInEditor };\n\t}\n\n\tpublic async updateEditorModel(colorHoverData: StandaloneColorPickerHover): Promise<void> {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst colorPickerModel = colorHoverData.model;\n\t\tlet range = new Range(colorHoverData.range.startLineNumber, colorHoverData.range.startColumn, colorHoverData.range.endLineNumber, colorHoverData.range.endColumn);\n\t\tif (this._color) {\n\t\t\tawait _updateColorPresentations(this._editor.getModel(), colorPickerModel, this._color, range, colorHoverData);\n\t\t\trange = _updateEditorModel(this._editor, range, colorPickerModel);\n\t\t}\n\t}\n\n\tpublic renderHoverParts(context: IEditorHoverRenderContext, hoverParts: ColorHover[] | StandaloneColorPickerHover[]): IDisposable {\n\t\treturn renderHoverParts(this, this._editor, this._themeService, hoverParts, context);\n\t}\n\n\tpublic set color(color: Color | null) {\n\t\tthis._color = color;\n\t}\n\n\tpublic get color(): Color | null {\n\t\treturn this._color;\n\t}\n}\n\nasync function _createColorHover<T extends ColorHoverParticipant | StandaloneColorPickerParticipant>(participant: T, editorModel: ITextModel, colorInfo: IColorInformation, provider: DocumentColorProvider): Promise<T extends ColorHoverParticipant ? ColorHover : StandaloneColorPickerHover>;\nasync function _createColorHover(participant: ColorHoverParticipant | StandaloneColorPickerParticipant, editorModel: ITextModel, colorInfo: IColorInformation, provider: DocumentColorProvider): Promise<ColorHover | StandaloneColorPickerHover> {\n\tconst originalText = editorModel.getValueInRange(colorInfo.range);\n\tconst { red, green, blue, alpha } = colorInfo.color;\n\tconst rgba = new RGBA(Math.round(red * 255), Math.round(green * 255), Math.round(blue * 255), alpha);\n\tconst color = new Color(rgba);\n\n\tconst colorPresentations = await getColorPresentations(editorModel, colorInfo, provider, CancellationToken.None);\n\tconst model = new ColorPickerModel(color, [], 0);\n\tmodel.colorPresentations = colorPresentations || [];\n\tmodel.guessColorPresentation(color, originalText);\n\n\tif (participant instanceof ColorHoverParticipant) {\n\t\treturn new ColorHover(participant, Range.lift(colorInfo.range), model, provider);\n\t} else {\n\t\treturn new StandaloneColorPickerHover(participant, Range.lift(colorInfo.range), model, provider);\n\t}\n}\n\nfunction renderHoverParts(participant: ColorHoverParticipant | StandaloneColorPickerParticipant, editor: ICodeEditor, themeService: IThemeService, hoverParts: ColorHover[] | StandaloneColorPickerHover[], context: IEditorHoverRenderContext) {\n\tif (hoverParts.length === 0 || !editor.hasModel()) {\n\t\treturn Disposable.None;\n\t}\n\tif (context.setMinimumDimensions) {\n\t\tconst minimumHeight = editor.getOption(EditorOption.lineHeight) + 8;\n\t\tcontext.setMinimumDimensions(new Dimension(302, minimumHeight));\n\t}\n\n\tconst disposables = new DisposableStore();\n\tconst colorHover = hoverParts[0];\n\tconst editorModel = editor.getModel();\n\tconst model = colorHover.model;\n\tconst widget = disposables.add(new ColorPickerWidget(context.fragment, model, editor.getOption(EditorOption.pixelRatio), themeService, participant instanceof StandaloneColorPickerParticipant));\n\tcontext.setColorPicker(widget);\n\n\tlet editorUpdatedByColorPicker = false;\n\tlet range = new Range(colorHover.range.startLineNumber, colorHover.range.startColumn, colorHover.range.endLineNumber, colorHover.range.endColumn);\n\tif (participant instanceof StandaloneColorPickerParticipant) {\n\t\tconst color = hoverParts[0].model.color;\n\t\tparticipant.color = color;\n\t\t_updateColorPresentations(editorModel, model, color, range, colorHover);\n\t\tdisposables.add(model.onColorFlushed((color: Color) => {\n\t\t\tparticipant.color = color;\n\t\t}));\n\t} else {\n\t\tdisposables.add(model.onColorFlushed(async (color: Color) => {\n\t\t\tawait _updateColorPresentations(editorModel, model, color, range, colorHover);\n\t\t\teditorUpdatedByColorPicker = true;\n\t\t\trange = _updateEditorModel(editor, range, model);\n\t\t}));\n\t}\n\tdisposables.add(model.onDidChangeColor((color: Color) => {\n\t\t_updateColorPresentations(editorModel, model, color, range, colorHover);\n\t}));\n\tdisposables.add(editor.onDidChangeModelContent((e) => {\n\t\tif (editorUpdatedByColorPicker) {\n\t\t\teditorUpdatedByColorPicker = false;\n\t\t} else {\n\t\t\tcontext.hide();\n\t\t\teditor.focus();\n\t\t}\n\t}));\n\treturn disposables;\n}\n\nfunction _updateEditorModel(editor: IActiveCodeEditor, range: Range, model: ColorPickerModel): Range {\n\tconst textEdits: ISingleEditOperation[] = [];\n\tconst edit = model.presentation.textEdit ?? { range, text: model.presentation.label, forceMoveMarkers: false };\n\ttextEdits.push(edit);\n\n\tif (model.presentation.additionalTextEdits) {\n\t\ttextEdits.push(...model.presentation.additionalTextEdits);\n\t}\n\tconst replaceRange = Range.lift(edit.range);\n\tconst trackedRange = editor.getModel()._setTrackedRange(null, replaceRange, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter);\n\teditor.executeEdits('colorpicker', textEdits);\n\teditor.pushUndoStop();\n\treturn editor.getModel()._getTrackedRange(trackedRange) ?? replaceRange;\n}\n\nasync function _updateColorPresentations(editorModel: ITextModel, colorPickerModel: ColorPickerModel, color: Color, range: Range, colorHover: ColorHover | StandaloneColorPickerHover) {\n\tconst colorPresentations = await getColorPresentations(editorModel, {\n\t\trange: range,\n\t\tcolor: {\n\t\t\tred: color.rgba.r / 255,\n\t\t\tgreen: color.rgba.g / 255,\n\t\t\tblue: color.rgba.b / 255,\n\t\t\talpha: color.rgba.a\n\t\t}\n\t}, colorHover.provider, CancellationToken.None);\n\tcolorPickerModel.colorPresentations = colorPresentations || [];\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AsyncIterableObject } from '../../../../base/common/async';\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { Color, RGBA } from '../../../../base/common/color';\nimport { Disposable, DisposableStore, IDisposable } from '../../../../base/common/lifecycle';\nimport { IActiveCodeEditor, ICodeEditor } from '../../../browser/editorBrowser';\nimport { EditorOption } from '../../../common/config/editorOptions';\nimport { Range } from '../../../common/core/range';\nimport { IModelDecoration, ITextModel, TrackedRangeStickiness } from '../../../common/model';\nimport { DocumentColorProvider, IColorInformation } from '../../../common/languages';\nimport { getColorPresentations, getColors } from './color';\nimport { ColorDetector } from './colorDetector';\nimport { ColorPickerModel } from './colorPickerModel';\nimport { ColorPickerWidget } from './colorPickerWidget';\nimport { HoverAnchor, HoverAnchorType, IEditorHoverParticipant, IEditorHoverRenderContext, IHoverPart } from '../../hover/browser/hoverTypes';\nimport { IThemeService } from '../../../../platform/theme/common/themeService';\nimport { ISingleEditOperation } from '../../../common/core/editOperation';\nimport { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry';\nimport { Dimension } from '../../../../base/browser/dom';\n\nexport class ColorHover implements IHoverPart {\n\n\t/**\n\t * Force the hover to always be rendered at this specific range,\n\t * even in the case of multiple hover parts.\n\t */\n\tpublic readonly forceShowAtRange: boolean = true;\n\n\tconstructor(\n\t\tpublic readonly owner: IEditorHoverParticipant<ColorHover>,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly model: ColorPickerModel,\n\t\tpublic readonly provider: DocumentColorProvider\n\t) { }\n\n\tpublic isValidForHoverAnchor(anchor: HoverAnchor): boolean {\n\t\treturn (\n\t\t\tanchor.type === HoverAnchorType.Range\n\t\t\t&& this.range.startColumn <= anchor.range.startColumn\n\t\t\t&& this.range.endColumn >= anchor.range.endColumn\n\t\t);\n\t}\n}\n\nexport class ColorHoverParticipant implements IEditorHoverParticipant<ColorHover> {\n\n\tpublic readonly hoverOrdinal: number = 2;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) { }\n\n\tpublic computeSync(_anchor: HoverAnchor, _lineDecorations: IModelDecoration[]): ColorHover[] {\n\t\treturn [];\n\t}\n\n\tpublic computeAsync(anchor: HoverAnchor, lineDecorations: IModelDecoration[], token: CancellationToken): AsyncIterableObject<ColorHover> {\n\t\treturn AsyncIterableObject.fromPromise(this._computeAsync(anchor, lineDecorations, token));\n\t}\n\n\tprivate async _computeAsync(_anchor: HoverAnchor, lineDecorations: IModelDecoration[], _token: CancellationToken): Promise<ColorHover[]> {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\t\tconst colorDetector = ColorDetector.get(this._editor);\n\t\tif (!colorDetector) {\n\t\t\treturn [];\n\t\t}\n\t\tfor (const d of lineDecorations) {\n\t\t\tif (!colorDetector.isColorDecoration(d)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst colorData = colorDetector.getColorData(d.range.getStartPosition());\n\t\t\tif (colorData) {\n\t\t\t\tconst colorHover = await _createColorHover(this, this._editor.getModel(), colorData.colorInfo, colorData.provider);\n\t\t\t\treturn [colorHover];\n\t\t\t}\n\n\t\t}\n\t\treturn [];\n\t}\n\n\tpublic renderHoverParts(context: IEditorHoverRenderContext, hoverParts: ColorHover[]): IDisposable {\n\t\treturn renderHoverParts(this, this._editor, this._themeService, hoverParts, context);\n\t}\n}\n\nexport class StandaloneColorPickerHover {\n\tconstructor(\n\t\tpublic readonly owner: StandaloneColorPickerParticipant,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly model: ColorPickerModel,\n\t\tpublic readonly provider: DocumentColorProvider\n\t) { }\n}\n\nexport class StandaloneColorPickerParticipant {\n\n\tpublic readonly hoverOrdinal: number = 2;\n\tprivate _color: Color | null = null;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) { }\n\n\tpublic async createColorHover(defaultColorInfo: IColorInformation, defaultColorProvider: DocumentColorProvider, colorProviderRegistry: LanguageFeatureRegistry<DocumentColorProvider>): Promise<{ colorHover: StandaloneColorPickerHover; foundInEditor: boolean } | null> {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn null;\n\t\t}\n\t\tconst colorDetector = ColorDetector.get(this._editor);\n\t\tif (!colorDetector) {\n\t\t\treturn null;\n\t\t}\n\t\tconst colors = await getColors(colorProviderRegistry, this._editor.getModel(), CancellationToken.None);\n\t\tlet foundColorInfo: IColorInformation | null = null;\n\t\tlet foundColorProvider: DocumentColorProvider | null = null;\n\t\tfor (const colorData of colors) {\n\t\t\tconst colorInfo = colorData.colorInfo;\n\t\t\tif (Range.containsRange(colorInfo.range, defaultColorInfo.range)) {\n\t\t\t\tfoundColorInfo = colorInfo;\n\t\t\t\tfoundColorProvider = colorData.provider;\n\t\t\t}\n\t\t}\n\t\tconst colorInfo = foundColorInfo ?? defaultColorInfo;\n\t\tconst colorProvider = foundColorProvider ?? defaultColorProvider;\n\t\tconst foundInEditor = !!foundColorInfo;\n\t\treturn { colorHover: await _createColorHover(this, this._editor.getModel(), colorInfo, colorProvider), foundInEditor: foundInEditor };\n\t}\n\n\tpublic async updateEditorModel(colorHoverData: StandaloneColorPickerHover): Promise<void> {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst colorPickerModel = colorHoverData.model;\n\t\tlet range = new Range(colorHoverData.range.startLineNumber, colorHoverData.range.startColumn, colorHoverData.range.endLineNumber, colorHoverData.range.endColumn);\n\t\tif (this._color) {\n\t\t\tawait _updateColorPresentations(this._editor.getModel(), colorPickerModel, this._color, range, colorHoverData);\n\t\t\trange = _updateEditorModel(this._editor, range, colorPickerModel);\n\t\t}\n\t}\n\n\tpublic renderHoverParts(context: IEditorHoverRenderContext, hoverParts: ColorHover[] | StandaloneColorPickerHover[]): IDisposable {\n\t\treturn renderHoverParts(this, this._editor, this._themeService, hoverParts, context);\n\t}\n\n\tpublic set color(color: Color | null) {\n\t\tthis._color = color;\n\t}\n\n\tpublic get color(): Color | null {\n\t\treturn this._color;\n\t}\n}\n\nasync function _createColorHover<T extends ColorHoverParticipant | StandaloneColorPickerParticipant>(participant: T, editorModel: ITextModel, colorInfo: IColorInformation, provider: DocumentColorProvider): Promise<T extends ColorHoverParticipant ? ColorHover : StandaloneColorPickerHover>;\nasync function _createColorHover(participant: ColorHoverParticipant | StandaloneColorPickerParticipant, editorModel: ITextModel, colorInfo: IColorInformation, provider: DocumentColorProvider): Promise<ColorHover | StandaloneColorPickerHover> {\n\tconst originalText = editorModel.getValueInRange(colorInfo.range);\n\tconst { red, green, blue, alpha } = colorInfo.color;\n\tconst rgba = new RGBA(Math.round(red * 255), Math.round(green * 255), Math.round(blue * 255), alpha);\n\tconst color = new Color(rgba);\n\n\tconst colorPresentations = await getColorPresentations(editorModel, colorInfo, provider, CancellationToken.None);\n\tconst model = new ColorPickerModel(color, [], 0);\n\tmodel.colorPresentations = colorPresentations || [];\n\tmodel.guessColorPresentation(color, originalText);\n\n\tif (participant instanceof ColorHoverParticipant) {\n\t\treturn new ColorHover(participant, Range.lift(colorInfo.range), model, provider);\n\t} else {\n\t\treturn new StandaloneColorPickerHover(participant, Range.lift(colorInfo.range), model, provider);\n\t}\n}\n\nfunction renderHoverParts(participant: ColorHoverParticipant | StandaloneColorPickerParticipant, editor: ICodeEditor, themeService: IThemeService, hoverParts: ColorHover[] | StandaloneColorPickerHover[], context: IEditorHoverRenderContext) {\n\tif (hoverParts.length === 0 || !editor.hasModel()) {\n\t\treturn Disposable.None;\n\t}\n\tif (context.setMinimumDimensions) {\n\t\tconst minimumHeight = editor.getOption(EditorOption.lineHeight) + 8;\n\t\tcontext.setMinimumDimensions(new Dimension(302, minimumHeight));\n\t}\n\n\tconst disposables = new DisposableStore();\n\tconst colorHover = hoverParts[0];\n\tconst editorModel = editor.getModel();\n\tconst model = colorHover.model;\n\tconst widget = disposables.add(new ColorPickerWidget(context.fragment, model, editor.getOption(EditorOption.pixelRatio), themeService, participant instanceof StandaloneColorPickerParticipant));\n\tcontext.setColorPicker(widget);\n\n\tlet editorUpdatedByColorPicker = false;\n\tlet range = new Range(colorHover.range.startLineNumber, colorHover.range.startColumn, colorHover.range.endLineNumber, colorHover.range.endColumn);\n\tif (participant instanceof StandaloneColorPickerParticipant) {\n\t\tconst color = hoverParts[0].model.color;\n\t\tparticipant.color = color;\n\t\t_updateColorPresentations(editorModel, model, color, range, colorHover);\n\t\tdisposables.add(model.onColorFlushed((color: Color) => {\n\t\t\tparticipant.color = color;\n\t\t}));\n\t} else {\n\t\tdisposables.add(model.onColorFlushed(async (color: Color) => {\n\t\t\tawait _updateColorPresentations(editorModel, model, color, range, colorHover);\n\t\t\teditorUpdatedByColorPicker = true;\n\t\t\trange = _updateEditorModel(editor, range, model);\n\t\t}));\n\t}\n\tdisposables.add(model.onDidChangeColor((color: Color) => {\n\t\t_updateColorPresentations(editorModel, model, color, range, colorHover);\n\t}));\n\tdisposables.add(editor.onDidChangeModelContent((e) => {\n\t\tif (editorUpdatedByColorPicker) {\n\t\t\teditorUpdatedByColorPicker = false;\n\t\t} else {\n\t\t\tcontext.hide();\n\t\t\teditor.focus();\n\t\t}\n\t}));\n\treturn disposables;\n}\n\nfunction _updateEditorModel(editor: IActiveCodeEditor, range: Range, model: ColorPickerModel): Range {\n\tconst textEdits: ISingleEditOperation[] = [];\n\tconst edit = model.presentation.textEdit ?? { range, text: model.presentation.label, forceMoveMarkers: false };\n\ttextEdits.push(edit);\n\n\tif (model.presentation.additionalTextEdits) {\n\t\ttextEdits.push(...model.presentation.additionalTextEdits);\n\t}\n\tconst replaceRange = Range.lift(edit.range);\n\tconst trackedRange = editor.getModel()._setTrackedRange(null, replaceRange, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter);\n\teditor.executeEdits('colorpicker', textEdits);\n\teditor.pushUndoStop();\n\treturn editor.getModel()._getTrackedRange(trackedRange) ?? replaceRange;\n}\n\nasync function _updateColorPresentations(editorModel: ITextModel, colorPickerModel: ColorPickerModel, color: Color, range: Range, colorHover: ColorHover | StandaloneColorPickerHover) {\n\tconst colorPresentations = await getColorPresentations(editorModel, {\n\t\trange: range,\n\t\tcolor: {\n\t\t\tred: color.rgba.r / 255,\n\t\t\tgreen: color.rgba.g / 255,\n\t\t\tblue: color.rgba.b / 255,\n\t\t\talpha: color.rgba.a\n\t\t}\n\t}, colorHover.provider, CancellationToken.None);\n\tcolorPickerModel.colorPresentations = colorPresentations || [];\n}\n"]}