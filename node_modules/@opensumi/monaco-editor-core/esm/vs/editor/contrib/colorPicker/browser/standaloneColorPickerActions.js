"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShowOrFocusStandaloneColorPicker = void 0;
const editorExtensions_1 = require("../../../browser/editorExtensions");
const nls_1 = require("../../../../nls");
const standaloneColorPickerWidget_1 = require("./standaloneColorPickerWidget");
const editorContextKeys_1 = require("../../../common/editorContextKeys");
const actions_1 = require("../../../../platform/actions/common/actions");
require("./colorPicker.css");
class ShowOrFocusStandaloneColorPicker extends editorExtensions_1.EditorAction2 {
    constructor() {
        super({
            id: 'editor.action.showOrFocusStandaloneColorPicker',
            title: {
                ...(0, nls_1.localize2)("vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions",3, "Show or Focus Standalone Color Picker"),
                mnemonicTitle: (0, nls_1.localize)("vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions",0, "&&Show or Focus Standalone Color Picker"),
            },
            precondition: undefined,
            menu: [
                { id: actions_1.MenuId.CommandPalette },
            ]
        });
    }
    runEditorCommand(_accessor, editor) {
        var _a;
        (_a = standaloneColorPickerWidget_1.StandaloneColorPickerController.get(editor)) === null || _a === void 0 ? void 0 : _a.showOrFocus();
    }
}
exports.ShowOrFocusStandaloneColorPicker = ShowOrFocusStandaloneColorPicker;
class HideStandaloneColorPicker extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.hideColorPicker',
            label: (0, nls_1.localize)("vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions",1, "Hide the Color Picker"),





            alias: 'Hide the Color Picker',
            precondition: editorContextKeys_1.EditorContextKeys.standaloneColorPickerVisible.isEqualTo(true),
            kbOpts: {
                primary: 9 /* KeyCode.Escape */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            }
        });
    }
    run(_accessor, editor) {
        var _a;
        (_a = standaloneColorPickerWidget_1.StandaloneColorPickerController.get(editor)) === null || _a === void 0 ? void 0 : _a.hide();
    }
}
class InsertColorWithStandaloneColorPicker extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.insertColorWithStandaloneColorPicker',
            label: (0, nls_1.localize)("vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions",2, "Insert Color with Standalone Color Picker"),





            alias: 'Insert Color with Standalone Color Picker',
            precondition: editorContextKeys_1.EditorContextKeys.standaloneColorPickerFocused.isEqualTo(true),
            kbOpts: {
                primary: 3 /* KeyCode.Enter */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            }
        });
    }
    run(_accessor, editor) {
        var _a;
        (_a = standaloneColorPickerWidget_1.StandaloneColorPickerController.get(editor)) === null || _a === void 0 ? void 0 : _a.insertColor();
    }
}
(0, editorExtensions_1.registerEditorAction)(HideStandaloneColorPicker);
(0, editorExtensions_1.registerEditorAction)(InsertColorWithStandaloneColorPicker);
(0, actions_1.registerAction2)(ShowOrFocusStandaloneColorPicker);
//# sourceMappingURL=standaloneColorPickerActions.js.map