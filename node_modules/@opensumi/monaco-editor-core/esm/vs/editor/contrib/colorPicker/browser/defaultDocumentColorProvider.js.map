{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/colorPicker/browser/defaultDocumentColorProvider.ts","vs/editor/contrib/colorPicker/browser/defaultDocumentColorProvider.ts"],"names":[],"mappings":"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","file":"defaultDocumentColorProvider.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { Color, RGBA } from '../../../../base/common/color';\nimport { ITextModel } from '../../../common/model';\nimport { DocumentColorProvider, IColor, IColorInformation, IColorPresentation } from '../../../common/languages';\nimport { EditorWorkerClient } from '../../../browser/services/editorWorkerService';\nimport { IModelService } from '../../../common/services/model';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry';\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { registerEditorFeature } from '../../../common/editorFeatures';\n\nexport class DefaultDocumentColorProvider implements DocumentColorProvider {\n\n\tprivate _editorWorkerClient: EditorWorkerClient;\n\n\tconstructor(\n\t\tmodelService: IModelService,\n\t\tlanguageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tthis._editorWorkerClient = new EditorWorkerClient(modelService, false, 'editorWorkerService', languageConfigurationService);\n\t}\n\n\tasync provideDocumentColors(model: ITextModel, _token: CancellationToken): Promise<IColorInformation[] | null> {\n\t\treturn this._editorWorkerClient.computeDefaultDocumentColors(model.uri);\n\t}\n\n\tprovideColorPresentations(_model: ITextModel, colorInfo: IColorInformation, _token: CancellationToken): IColorPresentation[] {\n\t\tconst range = colorInfo.range;\n\t\tconst colorFromInfo: IColor = colorInfo.color;\n\t\tconst alpha = colorFromInfo.alpha;\n\t\tconst color = new Color(new RGBA(Math.round(255 * colorFromInfo.red), Math.round(255 * colorFromInfo.green), Math.round(255 * colorFromInfo.blue), alpha));\n\n\t\tconst rgb = alpha ? Color.Format.CSS.formatRGB(color) : Color.Format.CSS.formatRGBA(color);\n\t\tconst hsl = alpha ? Color.Format.CSS.formatHSL(color) : Color.Format.CSS.formatHSLA(color);\n\t\tconst hex = alpha ? Color.Format.CSS.formatHex(color) : Color.Format.CSS.formatHexA(color);\n\n\t\tconst colorPresentations: IColorPresentation[] = [];\n\t\tcolorPresentations.push({ label: rgb, textEdit: { range: range, text: rgb } });\n\t\tcolorPresentations.push({ label: hsl, textEdit: { range: range, text: hsl } });\n\t\tcolorPresentations.push({ label: hex, textEdit: { range: range, text: hex } });\n\t\treturn colorPresentations;\n\t}\n}\n\nclass DefaultDocumentColorProviderFeature extends Disposable {\n\tconstructor(\n\t\t@IModelService _modelService: IModelService,\n\t\t@ILanguageConfigurationService _languageConfigurationService: ILanguageConfigurationService,\n\t\t@ILanguageFeaturesService _languageFeaturesService: ILanguageFeaturesService,\n\t) {\n\t\tsuper();\n\t\tthis._register(_languageFeaturesService.colorProvider.register('*', new DefaultDocumentColorProvider(_modelService, _languageConfigurationService)));\n\t}\n}\n\nregisterEditorFeature(DefaultDocumentColorProviderFeature);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { Color, RGBA } from '../../../../base/common/color';\nimport { ITextModel } from '../../../common/model';\nimport { DocumentColorProvider, IColor, IColorInformation, IColorPresentation } from '../../../common/languages';\nimport { EditorWorkerClient } from '../../../browser/services/editorWorkerService';\nimport { IModelService } from '../../../common/services/model';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry';\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { registerEditorFeature } from '../../../common/editorFeatures';\n\nexport class DefaultDocumentColorProvider implements DocumentColorProvider {\n\n\tprivate _editorWorkerClient: EditorWorkerClient;\n\n\tconstructor(\n\t\tmodelService: IModelService,\n\t\tlanguageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tthis._editorWorkerClient = new EditorWorkerClient(modelService, false, 'editorWorkerService', languageConfigurationService);\n\t}\n\n\tasync provideDocumentColors(model: ITextModel, _token: CancellationToken): Promise<IColorInformation[] | null> {\n\t\treturn this._editorWorkerClient.computeDefaultDocumentColors(model.uri);\n\t}\n\n\tprovideColorPresentations(_model: ITextModel, colorInfo: IColorInformation, _token: CancellationToken): IColorPresentation[] {\n\t\tconst range = colorInfo.range;\n\t\tconst colorFromInfo: IColor = colorInfo.color;\n\t\tconst alpha = colorFromInfo.alpha;\n\t\tconst color = new Color(new RGBA(Math.round(255 * colorFromInfo.red), Math.round(255 * colorFromInfo.green), Math.round(255 * colorFromInfo.blue), alpha));\n\n\t\tconst rgb = alpha ? Color.Format.CSS.formatRGB(color) : Color.Format.CSS.formatRGBA(color);\n\t\tconst hsl = alpha ? Color.Format.CSS.formatHSL(color) : Color.Format.CSS.formatHSLA(color);\n\t\tconst hex = alpha ? Color.Format.CSS.formatHex(color) : Color.Format.CSS.formatHexA(color);\n\n\t\tconst colorPresentations: IColorPresentation[] = [];\n\t\tcolorPresentations.push({ label: rgb, textEdit: { range: range, text: rgb } });\n\t\tcolorPresentations.push({ label: hsl, textEdit: { range: range, text: hsl } });\n\t\tcolorPresentations.push({ label: hex, textEdit: { range: range, text: hex } });\n\t\treturn colorPresentations;\n\t}\n}\n\nclass DefaultDocumentColorProviderFeature extends Disposable {\n\tconstructor(\n\t\t@IModelService _modelService: IModelService,\n\t\t@ILanguageConfigurationService _languageConfigurationService: ILanguageConfigurationService,\n\t\t@ILanguageFeaturesService _languageFeaturesService: ILanguageFeaturesService,\n\t) {\n\t\tsuper();\n\t\tthis._register(_languageFeaturesService.colorProvider.register('*', new DefaultDocumentColorProvider(_modelService, _languageConfigurationService)));\n\t}\n}\n\nregisterEditorFeature(DefaultDocumentColorProviderFeature);\n"]}