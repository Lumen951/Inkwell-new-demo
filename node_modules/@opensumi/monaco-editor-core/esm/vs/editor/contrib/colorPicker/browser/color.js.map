{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/colorPicker/browser/color.ts","vs/editor/contrib/colorPicker/browser/color.ts"],"names":[],"mappings":"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","file":"color.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { illegalArgument, onUnexpectedExternalError } from '../../../../base/common/errors';\nimport { URI } from '../../../../base/common/uri';\nimport { IRange, Range } from '../../../common/core/range';\nimport { ITextModel } from '../../../common/model';\nimport { DocumentColorProvider, IColorInformation, IColorPresentation } from '../../../common/languages';\nimport { IModelService } from '../../../common/services/model';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry';\nimport { DefaultDocumentColorProvider } from './defaultDocumentColorProvider';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration';\nimport { ServicesAccessor } from '../../../browser/editorExtensions';\n\nexport async function getColors(colorProviderRegistry: LanguageFeatureRegistry<DocumentColorProvider>, model: ITextModel, token: CancellationToken, isDefaultColorDecoratorsEnabled: boolean = true): Promise<IColorData[]> {\n\treturn _findColorData<IColorData>(new ColorDataCollector(), colorProviderRegistry, model, token, isDefaultColorDecoratorsEnabled);\n}\n\nexport function getColorPresentations(model: ITextModel, colorInfo: IColorInformation, provider: DocumentColorProvider, token: CancellationToken): Promise<IColorPresentation[] | null | undefined> {\n\treturn Promise.resolve(provider.provideColorPresentations(model, colorInfo, token));\n}\n\nexport interface IColorData {\n\tcolorInfo: IColorInformation;\n\tprovider: DocumentColorProvider;\n}\n\ninterface IExtColorData { range: IRange; color: [number, number, number, number] }\n\ninterface DataCollector<T> {\n\tcompute(provider: DocumentColorProvider, model: ITextModel, token: CancellationToken, result: T[]): Promise<boolean>;\n}\n\nclass ColorDataCollector implements DataCollector<IColorData> {\n\tconstructor() { }\n\tasync compute(provider: DocumentColorProvider, model: ITextModel, token: CancellationToken, colors: IColorData[]): Promise<boolean> {\n\t\tconst documentColors = await provider.provideDocumentColors(model, token);\n\t\tif (Array.isArray(documentColors)) {\n\t\t\tfor (const colorInfo of documentColors) {\n\t\t\t\tcolors.push({ colorInfo, provider });\n\t\t\t}\n\t\t}\n\t\treturn Array.isArray(documentColors);\n\t}\n}\n\nclass ExtColorDataCollector implements DataCollector<IExtColorData> {\n\tconstructor() { }\n\tasync compute(provider: DocumentColorProvider, model: ITextModel, token: CancellationToken, colors: IExtColorData[]): Promise<boolean> {\n\t\tconst documentColors = await provider.provideDocumentColors(model, token);\n\t\tif (Array.isArray(documentColors)) {\n\t\t\tfor (const colorInfo of documentColors) {\n\t\t\t\tcolors.push({ range: colorInfo.range, color: [colorInfo.color.red, colorInfo.color.green, colorInfo.color.blue, colorInfo.color.alpha] });\n\t\t\t}\n\t\t}\n\t\treturn Array.isArray(documentColors);\n\t}\n\n}\n\nclass ColorPresentationsCollector implements DataCollector<IColorPresentation> {\n\tconstructor(private colorInfo: IColorInformation) { }\n\tasync compute(provider: DocumentColorProvider, model: ITextModel, _token: CancellationToken, colors: IColorPresentation[]): Promise<boolean> {\n\t\tconst documentColors = await provider.provideColorPresentations(model, this.colorInfo, CancellationToken.None);\n\t\tif (Array.isArray(documentColors)) {\n\t\t\tcolors.push(...documentColors);\n\t\t}\n\t\treturn Array.isArray(documentColors);\n\t}\n}\n\nasync function _findColorData<T extends IColorPresentation | IExtColorData | IColorData>(collector: DataCollector<T>, colorProviderRegistry: LanguageFeatureRegistry<DocumentColorProvider>, model: ITextModel, token: CancellationToken, isDefaultColorDecoratorsEnabled: boolean): Promise<T[]> {\n\tlet validDocumentColorProviderFound = false;\n\tlet defaultProvider: DefaultDocumentColorProvider | undefined;\n\tconst colorData: T[] = [];\n\tconst documentColorProviders = colorProviderRegistry.ordered(model);\n\tfor (let i = documentColorProviders.length - 1; i >= 0; i--) {\n\t\tconst provider = documentColorProviders[i];\n\t\tif (provider instanceof DefaultDocumentColorProvider) {\n\t\t\tdefaultProvider = provider;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tif (await collector.compute(provider, model, token, colorData)) {\n\t\t\t\t\tvalidDocumentColorProviderFound = true;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tonUnexpectedExternalError(e);\n\t\t\t}\n\t\t}\n\t}\n\tif (validDocumentColorProviderFound) {\n\t\treturn colorData;\n\t}\n\tif (defaultProvider && isDefaultColorDecoratorsEnabled) {\n\t\tawait collector.compute(defaultProvider, model, token, colorData);\n\t\treturn colorData;\n\t}\n\treturn [];\n}\n\nfunction _setupColorCommand(accessor: ServicesAccessor, resource: URI): { model: ITextModel; colorProviderRegistry: LanguageFeatureRegistry<DocumentColorProvider>; isDefaultColorDecoratorsEnabled: boolean } {\n\tconst { colorProvider: colorProviderRegistry } = accessor.get(ILanguageFeaturesService);\n\tconst model = accessor.get(IModelService).getModel(resource);\n\tif (!model) {\n\t\tthrow illegalArgument();\n\t}\n\tconst isDefaultColorDecoratorsEnabled = accessor.get(IConfigurationService).getValue<boolean>('editor.defaultColorDecorators', { resource });\n\treturn { model, colorProviderRegistry, isDefaultColorDecoratorsEnabled };\n}\n\nCommandsRegistry.registerCommand('_executeDocumentColorProvider', function (accessor, ...args) {\n\tconst [resource] = args;\n\tif (!(resource instanceof URI)) {\n\t\tthrow illegalArgument();\n\t}\n\tconst { model, colorProviderRegistry, isDefaultColorDecoratorsEnabled } = _setupColorCommand(accessor, resource);\n\treturn _findColorData<IExtColorData>(new ExtColorDataCollector(), colorProviderRegistry, model, CancellationToken.None, isDefaultColorDecoratorsEnabled);\n});\n\nCommandsRegistry.registerCommand('_executeColorPresentationProvider', function (accessor, ...args) {\n\tconst [color, context] = args;\n\tconst { uri, range } = context;\n\tif (!(uri instanceof URI) || !Array.isArray(color) || color.length !== 4 || !Range.isIRange(range)) {\n\t\tthrow illegalArgument();\n\t}\n\tconst { model, colorProviderRegistry, isDefaultColorDecoratorsEnabled } = _setupColorCommand(accessor, uri);\n\tconst [red, green, blue, alpha] = color;\n\treturn _findColorData<IColorPresentation>(new ColorPresentationsCollector({ range: range, color: { red, green, blue, alpha } }), colorProviderRegistry, model, CancellationToken.None, isDefaultColorDecoratorsEnabled);\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { illegalArgument, onUnexpectedExternalError } from '../../../../base/common/errors';\nimport { URI } from '../../../../base/common/uri';\nimport { IRange, Range } from '../../../common/core/range';\nimport { ITextModel } from '../../../common/model';\nimport { DocumentColorProvider, IColorInformation, IColorPresentation } from '../../../common/languages';\nimport { IModelService } from '../../../common/services/model';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry';\nimport { DefaultDocumentColorProvider } from './defaultDocumentColorProvider';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration';\nimport { ServicesAccessor } from '../../../browser/editorExtensions';\n\nexport async function getColors(colorProviderRegistry: LanguageFeatureRegistry<DocumentColorProvider>, model: ITextModel, token: CancellationToken, isDefaultColorDecoratorsEnabled: boolean = true): Promise<IColorData[]> {\n\treturn _findColorData<IColorData>(new ColorDataCollector(), colorProviderRegistry, model, token, isDefaultColorDecoratorsEnabled);\n}\n\nexport function getColorPresentations(model: ITextModel, colorInfo: IColorInformation, provider: DocumentColorProvider, token: CancellationToken): Promise<IColorPresentation[] | null | undefined> {\n\treturn Promise.resolve(provider.provideColorPresentations(model, colorInfo, token));\n}\n\nexport interface IColorData {\n\tcolorInfo: IColorInformation;\n\tprovider: DocumentColorProvider;\n}\n\ninterface IExtColorData { range: IRange; color: [number, number, number, number] }\n\ninterface DataCollector<T> {\n\tcompute(provider: DocumentColorProvider, model: ITextModel, token: CancellationToken, result: T[]): Promise<boolean>;\n}\n\nclass ColorDataCollector implements DataCollector<IColorData> {\n\tconstructor() { }\n\tasync compute(provider: DocumentColorProvider, model: ITextModel, token: CancellationToken, colors: IColorData[]): Promise<boolean> {\n\t\tconst documentColors = await provider.provideDocumentColors(model, token);\n\t\tif (Array.isArray(documentColors)) {\n\t\t\tfor (const colorInfo of documentColors) {\n\t\t\t\tcolors.push({ colorInfo, provider });\n\t\t\t}\n\t\t}\n\t\treturn Array.isArray(documentColors);\n\t}\n}\n\nclass ExtColorDataCollector implements DataCollector<IExtColorData> {\n\tconstructor() { }\n\tasync compute(provider: DocumentColorProvider, model: ITextModel, token: CancellationToken, colors: IExtColorData[]): Promise<boolean> {\n\t\tconst documentColors = await provider.provideDocumentColors(model, token);\n\t\tif (Array.isArray(documentColors)) {\n\t\t\tfor (const colorInfo of documentColors) {\n\t\t\t\tcolors.push({ range: colorInfo.range, color: [colorInfo.color.red, colorInfo.color.green, colorInfo.color.blue, colorInfo.color.alpha] });\n\t\t\t}\n\t\t}\n\t\treturn Array.isArray(documentColors);\n\t}\n\n}\n\nclass ColorPresentationsCollector implements DataCollector<IColorPresentation> {\n\tconstructor(private colorInfo: IColorInformation) { }\n\tasync compute(provider: DocumentColorProvider, model: ITextModel, _token: CancellationToken, colors: IColorPresentation[]): Promise<boolean> {\n\t\tconst documentColors = await provider.provideColorPresentations(model, this.colorInfo, CancellationToken.None);\n\t\tif (Array.isArray(documentColors)) {\n\t\t\tcolors.push(...documentColors);\n\t\t}\n\t\treturn Array.isArray(documentColors);\n\t}\n}\n\nasync function _findColorData<T extends IColorPresentation | IExtColorData | IColorData>(collector: DataCollector<T>, colorProviderRegistry: LanguageFeatureRegistry<DocumentColorProvider>, model: ITextModel, token: CancellationToken, isDefaultColorDecoratorsEnabled: boolean): Promise<T[]> {\n\tlet validDocumentColorProviderFound = false;\n\tlet defaultProvider: DefaultDocumentColorProvider | undefined;\n\tconst colorData: T[] = [];\n\tconst documentColorProviders = colorProviderRegistry.ordered(model);\n\tfor (let i = documentColorProviders.length - 1; i >= 0; i--) {\n\t\tconst provider = documentColorProviders[i];\n\t\tif (provider instanceof DefaultDocumentColorProvider) {\n\t\t\tdefaultProvider = provider;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tif (await collector.compute(provider, model, token, colorData)) {\n\t\t\t\t\tvalidDocumentColorProviderFound = true;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tonUnexpectedExternalError(e);\n\t\t\t}\n\t\t}\n\t}\n\tif (validDocumentColorProviderFound) {\n\t\treturn colorData;\n\t}\n\tif (defaultProvider && isDefaultColorDecoratorsEnabled) {\n\t\tawait collector.compute(defaultProvider, model, token, colorData);\n\t\treturn colorData;\n\t}\n\treturn [];\n}\n\nfunction _setupColorCommand(accessor: ServicesAccessor, resource: URI): { model: ITextModel; colorProviderRegistry: LanguageFeatureRegistry<DocumentColorProvider>; isDefaultColorDecoratorsEnabled: boolean } {\n\tconst { colorProvider: colorProviderRegistry } = accessor.get(ILanguageFeaturesService);\n\tconst model = accessor.get(IModelService).getModel(resource);\n\tif (!model) {\n\t\tthrow illegalArgument();\n\t}\n\tconst isDefaultColorDecoratorsEnabled = accessor.get(IConfigurationService).getValue<boolean>('editor.defaultColorDecorators', { resource });\n\treturn { model, colorProviderRegistry, isDefaultColorDecoratorsEnabled };\n}\n\nCommandsRegistry.registerCommand('_executeDocumentColorProvider', function (accessor, ...args) {\n\tconst [resource] = args;\n\tif (!(resource instanceof URI)) {\n\t\tthrow illegalArgument();\n\t}\n\tconst { model, colorProviderRegistry, isDefaultColorDecoratorsEnabled } = _setupColorCommand(accessor, resource);\n\treturn _findColorData<IExtColorData>(new ExtColorDataCollector(), colorProviderRegistry, model, CancellationToken.None, isDefaultColorDecoratorsEnabled);\n});\n\nCommandsRegistry.registerCommand('_executeColorPresentationProvider', function (accessor, ...args) {\n\tconst [color, context] = args;\n\tconst { uri, range } = context;\n\tif (!(uri instanceof URI) || !Array.isArray(color) || color.length !== 4 || !Range.isIRange(range)) {\n\t\tthrow illegalArgument();\n\t}\n\tconst { model, colorProviderRegistry, isDefaultColorDecoratorsEnabled } = _setupColorCommand(accessor, uri);\n\tconst [red, green, blue, alpha] = color;\n\treturn _findColorData<IColorPresentation>(new ColorPresentationsCollector({ range: range, color: { red, green, blue, alpha } }), colorProviderRegistry, model, CancellationToken.None, isDefaultColorDecoratorsEnabled);\n});\n"]}