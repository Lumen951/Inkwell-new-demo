import { Disposable } from '../../../../base/common/lifecycle';
import { ICodeEditor, IContentWidget, IContentWidgetPosition } from '../../../browser/editorBrowser';
import { StandaloneColorPickerHover } from './colorHoverParticipant';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';
import { ILanguageFeaturesService } from '../../../common/services/languageFeatures';
import { IEditorContribution } from '../../../common/editorCommon';
import { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey';
import { IModelService } from '../../../common/services/model';
import { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry';
import './colorPicker.css';
export declare class StandaloneColorPickerController extends Disposable implements IEditorContribution {
    private readonly _editor;
    private readonly _modelService;
    private readonly _keybindingService;
    private readonly _instantiationService;
    private readonly _languageFeatureService;
    private readonly _languageConfigurationService;
    static ID: string;
    private _standaloneColorPickerWidget;
    private _standaloneColorPickerVisible;
    private _standaloneColorPickerFocused;
    constructor(_editor: ICodeEditor, _contextKeyService: IContextKeyService, _modelService: IModelService, _keybindingService: IKeybindingService, _instantiationService: IInstantiationService, _languageFeatureService: ILanguageFeaturesService, _languageConfigurationService: ILanguageConfigurationService);
    showOrFocus(): void;
    hide(): void;
    insertColor(): void;
    static get(editor: ICodeEditor): StandaloneColorPickerController | null;
}
export declare class StandaloneColorPickerWidget extends Disposable implements IContentWidget {
    private readonly _editor;
    private readonly _standaloneColorPickerVisible;
    private readonly _standaloneColorPickerFocused;
    private readonly _modelService;
    private readonly _keybindingService;
    private readonly _languageFeaturesService;
    private readonly _languageConfigurationService;
    static readonly ID = "editor.contrib.standaloneColorPickerWidget";
    readonly allowEditorOverflow = true;
    private readonly _position;
    private readonly _standaloneColorPickerParticipant;
    private _body;
    private _colorHover;
    private _selectionSetInEditor;
    private readonly _onResult;
    readonly onResult: import("../../../../base/common/event").Event<StandaloneColorPickerResult>;
    constructor(_editor: ICodeEditor, _standaloneColorPickerVisible: IContextKey<boolean>, _standaloneColorPickerFocused: IContextKey<boolean>, _instantiationService: IInstantiationService, _modelService: IModelService, _keybindingService: IKeybindingService, _languageFeaturesService: ILanguageFeaturesService, _languageConfigurationService: ILanguageConfigurationService);
    updateEditor(): void;
    getId(): string;
    getDomNode(): HTMLElement;
    getPosition(): IContentWidgetPosition | null;
    hide(): void;
    focus(): void;
    private _start;
    private _computeAsync;
    private _render;
}
declare class StandaloneColorPickerResult {
    readonly value: StandaloneColorPickerHover;
    readonly foundInEditor: boolean;
    constructor(value: StandaloneColorPickerHover, foundInEditor: boolean);
}
export {};
