{"version":3,"sources":["vs/editor/contrib/readOnlyMessage/browser/contribution.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,qEAAqE;AACrE,iEAA+D;AAE/D,wEAAgH;AAGhH,+EAA4E;AAC5E,uCAAuC;AAEvC,MAAa,yBAA0B,SAAQ,sBAAU;IAIxD,YACkB,MAAmB;QAEpC,KAAK,EAAE,CAAC;QAFS,WAAM,GAAN,MAAM,CAAa;QAGpC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,wBAAwB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC;IAC9F,CAAC;IAEO,yBAAyB;QAChC,MAAM,iBAAiB,GAAG,qCAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7D,IAAI,iBAAiB,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;YACjD,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,GAAG,uCAA8B,CAAC;YACzE,IAAI,CAAC,OAAO,EAAE,CAAC;gBACd,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;oBAChC,OAAO,GAAG,IAAI,4BAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,yDAAwB,EAAE,gCAAgC,CAAC,CAAC,CAAC;gBACxG,CAAC;qBAAM,CAAC;oBACP,OAAO,GAAG,IAAI,4BAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,iCAAiC,CAAC,CAAC,CAAC;gBAClG,CAAC;YACF,CAAC;YAED,iBAAiB,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;QACnE,CAAC;IACF,CAAC;;AAzBF,8DA0BC;AAxBuB,4BAAE,GAAG,0CAA0C,CAAC;AA0BxE,IAAA,6CAA0B,EAAC,yBAAyB,CAAC,EAAE,EAAE,yBAAyB,iEAAyD,CAAC","file":"contribution.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownString } from '../../../../base/common/htmlContent';\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { EditorContributionInstantiation, registerEditorContribution } from '../../../browser/editorExtensions';\nimport { EditorOption } from '../../../common/config/editorOptions';\nimport { IEditorContribution } from '../../../common/editorCommon';\nimport { MessageController } from '../../message/browser/messageController';\nimport * as nls from '../../../../nls';\n\nexport class ReadOnlyMessageController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.readOnlyMessageController';\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor\n\t) {\n\t\tsuper();\n\t\tthis._register(this.editor.onDidAttemptReadOnlyEdit(() => this._onDidAttemptReadOnlyEdit()));\n\t}\n\n\tprivate _onDidAttemptReadOnlyEdit(): void {\n\t\tconst messageController = MessageController.get(this.editor);\n\t\tif (messageController && this.editor.hasModel()) {\n\t\t\tlet message = this.editor.getOptions().get(EditorOption.readOnlyMessage);\n\t\t\tif (!message) {\n\t\t\t\tif (this.editor.isSimpleWidget) {\n\t\t\t\t\tmessage = new MarkdownString(nls.localize('editor.simple.readonly', \"Cannot edit in read-only input\"));\n\t\t\t\t} else {\n\t\t\t\t\tmessage = new MarkdownString(nls.localize('editor.readonly', \"Cannot edit in read-only editor\"));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmessageController.showMessage(message, this.editor.getPosition());\n\t\t}\n\t}\n}\n\nregisterEditorContribution(ReadOnlyMessageController.ID, ReadOnlyMessageController, EditorContributionInstantiation.BeforeFirstInteraction);\n"]}