{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/inlineEdit/browser/inlineEditController.ts","vs/editor/contrib/inlineEdit/browser/inlineEditController.ts"],"names":[],"mappings":"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","file":"inlineEditController.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle';\nimport { ISettableObservable, autorun, constObservable, disposableObservableValue, observableFromEvent, observableSignalFromEvent } from '../../../../base/common/observable';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { EditOperation } from '../../../common/core/editOperation';\nimport { Position } from '../../../common/core/position';\nimport { Range } from '../../../common/core/range';\nimport { GhostTextWidget } from './ghostTextWidget';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { IInlineEdit, InlineEditTriggerKind } from '../../../common/languages';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation';\nimport { GhostText, GhostTextPart } from '../../inlineCompletions/browser/ghostText';\nimport { ICommandService } from '../../../../platform/commands/common/commands';\nimport { InlineEditHintsWidget } from './inlineEditHintsWidget';\nimport { EditorOption } from '../../../common/config/editorOptions';\nimport { createStyleSheet2 } from '../../../../base/browser/dom';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration';\n\nexport class InlineEditWidget implements IDisposable {\n\tconstructor(public readonly widget: GhostTextWidget, public readonly edit: IInlineEdit) { }\n\n\tdispose(): void {\n\t\tthis.widget.dispose();\n\t}\n}\n\nexport class InlineEditController extends Disposable {\n\tstatic ID = 'editor.contrib.inlineEditController';\n\n\tpublic static readonly inlineEditVisibleKey = 'inlineEditVisible';\n\tpublic static readonly inlineEditVisibleContext = new RawContextKey<boolean>(InlineEditController.inlineEditVisibleKey, false);\n\tprivate _isVisibleContext = InlineEditController.inlineEditVisibleContext.bindTo(this.contextKeyService);\n\n\tpublic static readonly cursorAtInlineEditKey = 'cursorAtInlineEdit';\n\tpublic static readonly cursorAtInlineEditContext = new RawContextKey<boolean>(InlineEditController.cursorAtInlineEditKey, false);\n\tprivate _isCursorAtInlineEditContext = InlineEditController.cursorAtInlineEditContext.bindTo(this.contextKeyService);\n\n\tpublic static get(editor: ICodeEditor): InlineEditController | null {\n\t\treturn editor.getContribution<InlineEditController>(InlineEditController.ID);\n\t}\n\n\tprivate _currentEdit: ISettableObservable<InlineEditWidget | undefined> = this._register(disposableObservableValue(this, undefined));\n\tprivate _currentRequestCts: CancellationTokenSource | undefined;\n\n\tprivate _jumpBackPosition: Position | undefined;\n\tprivate _isAccepting: boolean = false;\n\n\tprivate readonly _enabled = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(EditorOption.inlineEdit).enabled);\n\tprivate readonly _fontFamily = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(EditorOption.inlineEdit).fontFamily);\n\tprivate readonly _backgroundColoring = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(EditorOption.inlineEdit).backgroundColoring);\n\n\n\tconstructor(\n\t\tpublic readonly editor: ICodeEditor,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\t//Automatically request inline edit when the content was changed\n\t\t//Cancel the previous request if there is one\n\t\t//Remove the previous ghost text\n\t\tconst modelChangedSignal = observableSignalFromEvent('InlineEditController.modelContentChangedSignal', editor.onDidChangeModelContent);\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description InlineEditController.modelContentChanged model */\n\t\t\tif (!this._enabled.read(reader)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmodelChangedSignal.read(reader);\n\t\t\tthis.getInlineEdit(editor, true);\n\t\t}));\n\n\t\t//Check if the cursor is at the ghost text\n\t\tconst cursorPosition = observableFromEvent(editor.onDidChangeCursorPosition, () => editor.getPosition());\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description InlineEditController.cursorPositionChanged model */\n\t\t\tif (!this._enabled.read(reader)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst pos = cursorPosition.read(reader);\n\t\t\tif (pos) {\n\t\t\t\tthis.checkCursorPosition(pos);\n\t\t\t}\n\t\t}));\n\n\t\t//Perform stuff when the current edit has changed\n\t\tthis._register(autorun((reader) => {\n\t\t\t/** @description InlineEditController.update model */\n\t\t\tconst currentEdit = this._currentEdit.read(reader);\n\t\t\tthis._isCursorAtInlineEditContext.set(false);\n\t\t\tif (!currentEdit) {\n\t\t\t\tthis._isVisibleContext.set(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._isVisibleContext.set(true);\n\t\t\tconst pos = editor.getPosition();\n\t\t\tif (pos) {\n\t\t\t\tthis.checkCursorPosition(pos);\n\t\t\t}\n\t\t}));\n\n\t\t//Clear suggestions on lost focus\n\t\tconst editorBlurSingal = observableSignalFromEvent('InlineEditController.editorBlurSignal', editor.onDidBlurEditorWidget);\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description InlineEditController.editorBlur */\n\t\t\tif (!this._enabled.read(reader)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\teditorBlurSingal.read(reader);\n\t\t\t// This is a hidden setting very useful for debugging\n\t\t\tif (this._configurationService.getValue('editor.experimentalInlineEdit.keepOnBlur') || editor.getOption(EditorOption.inlineEdit).keepOnBlur) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._currentRequestCts?.dispose();\n\t\t\tthis._currentRequestCts = undefined;\n\t\t\tthis.clear(false);\n\t\t}));\n\n\t\t//Invoke provider on focus\n\t\tconst editorFocusSignal = observableSignalFromEvent('InlineEditController.editorFocusSignal', editor.onDidFocusEditorText);\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description InlineEditController.editorFocus */\n\t\t\tif (!this._enabled.read(reader)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\teditorFocusSignal.read(reader);\n\t\t\tthis.getInlineEdit(editor, true);\n\t\t}));\n\n\n\t\t//handle changes of font setting\n\t\tconst styleElement = this._register(createStyleSheet2());\n\t\tthis._register(autorun(reader => {\n\t\t\tconst fontFamily = this._fontFamily.read(reader);\n\t\t\tstyleElement.setStyle(fontFamily === '' || fontFamily === 'default' ? `` : `\n.monaco-editor .inline-edit-decoration,\n.monaco-editor .inline-edit-decoration-preview,\n.monaco-editor .inline-edit {\n\tfont-family: ${fontFamily};\n}`);\n\t\t}));\n\n\t\tthis._register(new InlineEditHintsWidget(this.editor, this._currentEdit, this.instantiationService));\n\t}\n\n\tprivate checkCursorPosition(position: Position) {\n\t\tif (!this._currentEdit) {\n\t\t\tthis._isCursorAtInlineEditContext.set(false);\n\t\t\treturn;\n\t\t}\n\t\tconst gt = this._currentEdit.get()?.edit;\n\t\tif (!gt) {\n\t\t\tthis._isCursorAtInlineEditContext.set(false);\n\t\t\treturn;\n\t\t}\n\t\tthis._isCursorAtInlineEditContext.set(Range.containsPosition(gt.range, position));\n\t}\n\n\tprivate validateInlineEdit(editor: ICodeEditor, edit: IInlineEdit): boolean {\n\t\t//Multiline inline replacing edit must replace whole lines\n\t\tif (edit.text.includes('\\n') && edit.range.startLineNumber !== edit.range.endLineNumber && edit.range.startColumn !== edit.range.endColumn) {\n\t\t\tconst firstColumn = edit.range.startColumn;\n\t\t\tif (firstColumn !== 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst lastLine = edit.range.endLineNumber;\n\t\t\tconst lastColumn = edit.range.endColumn;\n\t\t\tconst lineLength = editor.getModel()?.getLineLength(lastLine) ?? 0;\n\t\t\tif (lastColumn !== lineLength + 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async fetchInlineEdit(editor: ICodeEditor, auto: boolean): Promise<IInlineEdit | undefined> {\n\t\tif (this._currentRequestCts) {\n\t\t\tthis._currentRequestCts.dispose(true);\n\t\t}\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst modelVersion = model.getVersionId();\n\t\tconst providers = this.languageFeaturesService.inlineEditProvider.all(model);\n\t\tif (providers.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst provider = providers[0];\n\t\tthis._currentRequestCts = new CancellationTokenSource();\n\t\tconst token = this._currentRequestCts.token;\n\t\tconst triggerKind = auto ? InlineEditTriggerKind.Automatic : InlineEditTriggerKind.Invoke;\n\t\tconst shouldDebounce = auto;\n\t\tif (shouldDebounce) {\n\t\t\tawait wait(50, token);\n\t\t}\n\t\tif (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n\t\t\treturn;\n\t\t}\n\t\tconst edit = await provider.provideInlineEdit(model, { triggerKind }, token);\n\t\tif (!edit) {\n\t\t\treturn;\n\t\t}\n\t\tif (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this.validateInlineEdit(editor, edit)) {\n\t\t\treturn;\n\t\t}\n\t\treturn edit;\n\t}\n\n\tprivate async getInlineEdit(editor: ICodeEditor, auto: boolean) {\n\t\tthis._isCursorAtInlineEditContext.set(false);\n\t\tthis.clear();\n\t\tthis._isAccepting = false;\n\t\tconst edit = await this.fetchInlineEdit(editor, auto);\n\t\tif (!edit) {\n\t\t\treturn;\n\t\t}\n\t\tconst line = edit.range.endLineNumber;\n\t\tconst column = edit.range.endColumn;\n\t\tconst ghostText = new GhostText(line, [new GhostTextPart(column, edit.text, false)]);\n\t\tconst instance = this.instantiationService.createInstance(GhostTextWidget, this.editor, {\n\t\t\tghostText: constObservable(ghostText),\n\t\t\tminReservedLineCount: constObservable(0),\n\t\t\ttargetTextModel: constObservable(this.editor.getModel() ?? undefined),\n\t\t\trange: constObservable(edit.range),\n\t\t\tbackgroundColoring: this._backgroundColoring\n\t\t});\n\t\tthis._currentEdit.set(new InlineEditWidget(instance, edit), undefined);\n\t}\n\n\tpublic async trigger() {\n\t\tawait this.getInlineEdit(this.editor, false);\n\t}\n\n\tpublic async jumpBack() {\n\t\tif (!this._jumpBackPosition) {\n\t\t\treturn;\n\t\t}\n\t\tthis.editor.setPosition(this._jumpBackPosition);\n\t\t//if position is outside viewports, scroll to it\n\t\tthis.editor.revealPositionInCenterIfOutsideViewport(this._jumpBackPosition);\n\t}\n\n\tpublic accept(): void {\n\t\tthis._isAccepting = true;\n\t\tconst data = this._currentEdit.get()?.edit;\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\t//It should only happen in case of last line suggestion\n\t\tlet text = data.text;\n\t\tif (data.text.startsWith('\\n')) {\n\t\t\ttext = data.text.substring(1);\n\t\t}\n\t\tthis.editor.pushUndoStop();\n\t\tthis.editor.executeEdits('acceptCurrent', [EditOperation.replace(Range.lift(data.range), text)]);\n\t\tif (data.accepted) {\n\t\t\tthis._commandService.executeCommand(data.accepted.id, ...data.accepted.arguments || []);\n\t\t}\n\t\tthis.freeEdit(data);\n\t\tthis._currentEdit.set(undefined, undefined);\n\t}\n\n\tpublic jumpToCurrent(): void {\n\t\tthis._jumpBackPosition = this.editor.getSelection()?.getStartPosition();\n\n\t\tconst data = this._currentEdit.get()?.edit;\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tconst position = Position.lift({ lineNumber: data.range.startLineNumber, column: data.range.startColumn });\n\t\tthis.editor.setPosition(position);\n\t\t//if position is outside viewports, scroll to it\n\t\tthis.editor.revealPositionInCenterIfOutsideViewport(position);\n\t}\n\n\tpublic clear(sendRejection: boolean = true) {\n\t\tconst edit = this._currentEdit.get()?.edit;\n\t\tif (edit && edit?.rejected && !this._isAccepting && sendRejection) {\n\t\t\tthis._commandService.executeCommand(edit.rejected.id, ...edit.rejected.arguments || []);\n\t\t}\n\t\tif (edit) {\n\t\t\tthis.freeEdit(edit);\n\t\t}\n\t\tthis._currentEdit.set(undefined, undefined);\n\t}\n\n\tprivate freeEdit(edit: IInlineEdit) {\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst providers = this.languageFeaturesService.inlineEditProvider.all(model);\n\t\tif (providers.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tproviders[0].freeInlineEdit(edit);\n\t}\n\n\tpublic shouldShowHoverAt(range: Range) {\n\t\tconst currentEdit = this._currentEdit.get();\n\t\tif (!currentEdit) {\n\t\t\treturn false;\n\t\t}\n\t\tconst edit = currentEdit.edit;\n\t\tconst model = currentEdit.widget.model;\n\t\tconst overReplaceRange = Range.containsPosition(edit.range, range.getStartPosition()) || Range.containsPosition(edit.range, range.getEndPosition());\n\t\tif (overReplaceRange) {\n\t\t\treturn true;\n\t\t}\n\t\tconst ghostText = model.ghostText.get();\n\t\tif (ghostText) {\n\t\t\treturn ghostText.parts.some(p => range.containsPosition(new Position(ghostText.lineNumber, p.column)));\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic shouldShowHoverAtViewZone(viewZoneId: string): boolean {\n\t\treturn this._currentEdit.get()?.widget.ownsViewZone(viewZoneId) ?? false;\n\t}\n\n}\n\nfunction wait(ms: number, cancellationToken?: CancellationToken): Promise<void> {\n\treturn new Promise(resolve => {\n\t\tlet d: IDisposable | undefined = undefined;\n\t\tconst handle = setTimeout(() => {\n\t\t\tif (d) { d.dispose(); }\n\t\t\tresolve();\n\t\t}, ms);\n\t\tif (cancellationToken) {\n\t\t\td = cancellationToken.onCancellationRequested(() => {\n\t\t\t\tclearTimeout(handle);\n\t\t\t\tif (d) { d.dispose(); }\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}\n\t});\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, IDisposable } from '../../../../base/common/lifecycle';\nimport { ISettableObservable, autorun, constObservable, disposableObservableValue, observableFromEvent, observableSignalFromEvent } from '../../../../base/common/observable';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { EditOperation } from '../../../common/core/editOperation';\nimport { Position } from '../../../common/core/position';\nimport { Range } from '../../../common/core/range';\nimport { GhostTextWidget } from './ghostTextWidget';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { IInlineEdit, InlineEditTriggerKind } from '../../../common/languages';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation';\nimport { GhostText, GhostTextPart } from '../../inlineCompletions/browser/ghostText';\nimport { ICommandService } from '../../../../platform/commands/common/commands';\nimport { InlineEditHintsWidget } from './inlineEditHintsWidget';\nimport { EditorOption } from '../../../common/config/editorOptions';\nimport { createStyleSheet2 } from '../../../../base/browser/dom';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration';\n\nexport class InlineEditWidget implements IDisposable {\n\tconstructor(public readonly widget: GhostTextWidget, public readonly edit: IInlineEdit) { }\n\n\tdispose(): void {\n\t\tthis.widget.dispose();\n\t}\n}\n\nexport class InlineEditController extends Disposable {\n\tstatic ID = 'editor.contrib.inlineEditController';\n\n\tpublic static readonly inlineEditVisibleKey = 'inlineEditVisible';\n\tpublic static readonly inlineEditVisibleContext = new RawContextKey<boolean>(InlineEditController.inlineEditVisibleKey, false);\n\tprivate _isVisibleContext = InlineEditController.inlineEditVisibleContext.bindTo(this.contextKeyService);\n\n\tpublic static readonly cursorAtInlineEditKey = 'cursorAtInlineEdit';\n\tpublic static readonly cursorAtInlineEditContext = new RawContextKey<boolean>(InlineEditController.cursorAtInlineEditKey, false);\n\tprivate _isCursorAtInlineEditContext = InlineEditController.cursorAtInlineEditContext.bindTo(this.contextKeyService);\n\n\tpublic static get(editor: ICodeEditor): InlineEditController | null {\n\t\treturn editor.getContribution<InlineEditController>(InlineEditController.ID);\n\t}\n\n\tprivate _currentEdit: ISettableObservable<InlineEditWidget | undefined> = this._register(disposableObservableValue(this, undefined));\n\tprivate _currentRequestCts: CancellationTokenSource | undefined;\n\n\tprivate _jumpBackPosition: Position | undefined;\n\tprivate _isAccepting: boolean = false;\n\n\tprivate readonly _enabled = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(EditorOption.inlineEdit).enabled);\n\tprivate readonly _fontFamily = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(EditorOption.inlineEdit).fontFamily);\n\tprivate readonly _backgroundColoring = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(EditorOption.inlineEdit).backgroundColoring);\n\n\n\tconstructor(\n\t\tpublic readonly editor: ICodeEditor,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\t//Automatically request inline edit when the content was changed\n\t\t//Cancel the previous request if there is one\n\t\t//Remove the previous ghost text\n\t\tconst modelChangedSignal = observableSignalFromEvent('InlineEditController.modelContentChangedSignal', editor.onDidChangeModelContent);\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description InlineEditController.modelContentChanged model */\n\t\t\tif (!this._enabled.read(reader)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmodelChangedSignal.read(reader);\n\t\t\tthis.getInlineEdit(editor, true);\n\t\t}));\n\n\t\t//Check if the cursor is at the ghost text\n\t\tconst cursorPosition = observableFromEvent(editor.onDidChangeCursorPosition, () => editor.getPosition());\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description InlineEditController.cursorPositionChanged model */\n\t\t\tif (!this._enabled.read(reader)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst pos = cursorPosition.read(reader);\n\t\t\tif (pos) {\n\t\t\t\tthis.checkCursorPosition(pos);\n\t\t\t}\n\t\t}));\n\n\t\t//Perform stuff when the current edit has changed\n\t\tthis._register(autorun((reader) => {\n\t\t\t/** @description InlineEditController.update model */\n\t\t\tconst currentEdit = this._currentEdit.read(reader);\n\t\t\tthis._isCursorAtInlineEditContext.set(false);\n\t\t\tif (!currentEdit) {\n\t\t\t\tthis._isVisibleContext.set(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._isVisibleContext.set(true);\n\t\t\tconst pos = editor.getPosition();\n\t\t\tif (pos) {\n\t\t\t\tthis.checkCursorPosition(pos);\n\t\t\t}\n\t\t}));\n\n\t\t//Clear suggestions on lost focus\n\t\tconst editorBlurSingal = observableSignalFromEvent('InlineEditController.editorBlurSignal', editor.onDidBlurEditorWidget);\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description InlineEditController.editorBlur */\n\t\t\tif (!this._enabled.read(reader)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\teditorBlurSingal.read(reader);\n\t\t\t// This is a hidden setting very useful for debugging\n\t\t\tif (this._configurationService.getValue('editor.experimentalInlineEdit.keepOnBlur') || editor.getOption(EditorOption.inlineEdit).keepOnBlur) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._currentRequestCts?.dispose();\n\t\t\tthis._currentRequestCts = undefined;\n\t\t\tthis.clear(false);\n\t\t}));\n\n\t\t//Invoke provider on focus\n\t\tconst editorFocusSignal = observableSignalFromEvent('InlineEditController.editorFocusSignal', editor.onDidFocusEditorText);\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description InlineEditController.editorFocus */\n\t\t\tif (!this._enabled.read(reader)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\teditorFocusSignal.read(reader);\n\t\t\tthis.getInlineEdit(editor, true);\n\t\t}));\n\n\n\t\t//handle changes of font setting\n\t\tconst styleElement = this._register(createStyleSheet2());\n\t\tthis._register(autorun(reader => {\n\t\t\tconst fontFamily = this._fontFamily.read(reader);\n\t\t\tstyleElement.setStyle(fontFamily === '' || fontFamily === 'default' ? `` : `\n.monaco-editor .inline-edit-decoration,\n.monaco-editor .inline-edit-decoration-preview,\n.monaco-editor .inline-edit {\n\tfont-family: ${fontFamily};\n}`);\n\t\t}));\n\n\t\tthis._register(new InlineEditHintsWidget(this.editor, this._currentEdit, this.instantiationService));\n\t}\n\n\tprivate checkCursorPosition(position: Position) {\n\t\tif (!this._currentEdit) {\n\t\t\tthis._isCursorAtInlineEditContext.set(false);\n\t\t\treturn;\n\t\t}\n\t\tconst gt = this._currentEdit.get()?.edit;\n\t\tif (!gt) {\n\t\t\tthis._isCursorAtInlineEditContext.set(false);\n\t\t\treturn;\n\t\t}\n\t\tthis._isCursorAtInlineEditContext.set(Range.containsPosition(gt.range, position));\n\t}\n\n\tprivate validateInlineEdit(editor: ICodeEditor, edit: IInlineEdit): boolean {\n\t\t//Multiline inline replacing edit must replace whole lines\n\t\tif (edit.text.includes('\\n') && edit.range.startLineNumber !== edit.range.endLineNumber && edit.range.startColumn !== edit.range.endColumn) {\n\t\t\tconst firstColumn = edit.range.startColumn;\n\t\t\tif (firstColumn !== 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst lastLine = edit.range.endLineNumber;\n\t\t\tconst lastColumn = edit.range.endColumn;\n\t\t\tconst lineLength = editor.getModel()?.getLineLength(lastLine) ?? 0;\n\t\t\tif (lastColumn !== lineLength + 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async fetchInlineEdit(editor: ICodeEditor, auto: boolean): Promise<IInlineEdit | undefined> {\n\t\tif (this._currentRequestCts) {\n\t\t\tthis._currentRequestCts.dispose(true);\n\t\t}\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst modelVersion = model.getVersionId();\n\t\tconst providers = this.languageFeaturesService.inlineEditProvider.all(model);\n\t\tif (providers.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst provider = providers[0];\n\t\tthis._currentRequestCts = new CancellationTokenSource();\n\t\tconst token = this._currentRequestCts.token;\n\t\tconst triggerKind = auto ? InlineEditTriggerKind.Automatic : InlineEditTriggerKind.Invoke;\n\t\tconst shouldDebounce = auto;\n\t\tif (shouldDebounce) {\n\t\t\tawait wait(50, token);\n\t\t}\n\t\tif (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n\t\t\treturn;\n\t\t}\n\t\tconst edit = await provider.provideInlineEdit(model, { triggerKind }, token);\n\t\tif (!edit) {\n\t\t\treturn;\n\t\t}\n\t\tif (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this.validateInlineEdit(editor, edit)) {\n\t\t\treturn;\n\t\t}\n\t\treturn edit;\n\t}\n\n\tprivate async getInlineEdit(editor: ICodeEditor, auto: boolean) {\n\t\tthis._isCursorAtInlineEditContext.set(false);\n\t\tthis.clear();\n\t\tthis._isAccepting = false;\n\t\tconst edit = await this.fetchInlineEdit(editor, auto);\n\t\tif (!edit) {\n\t\t\treturn;\n\t\t}\n\t\tconst line = edit.range.endLineNumber;\n\t\tconst column = edit.range.endColumn;\n\t\tconst ghostText = new GhostText(line, [new GhostTextPart(column, edit.text, false)]);\n\t\tconst instance = this.instantiationService.createInstance(GhostTextWidget, this.editor, {\n\t\t\tghostText: constObservable(ghostText),\n\t\t\tminReservedLineCount: constObservable(0),\n\t\t\ttargetTextModel: constObservable(this.editor.getModel() ?? undefined),\n\t\t\trange: constObservable(edit.range),\n\t\t\tbackgroundColoring: this._backgroundColoring\n\t\t});\n\t\tthis._currentEdit.set(new InlineEditWidget(instance, edit), undefined);\n\t}\n\n\tpublic async trigger() {\n\t\tawait this.getInlineEdit(this.editor, false);\n\t}\n\n\tpublic async jumpBack() {\n\t\tif (!this._jumpBackPosition) {\n\t\t\treturn;\n\t\t}\n\t\tthis.editor.setPosition(this._jumpBackPosition);\n\t\t//if position is outside viewports, scroll to it\n\t\tthis.editor.revealPositionInCenterIfOutsideViewport(this._jumpBackPosition);\n\t}\n\n\tpublic accept(): void {\n\t\tthis._isAccepting = true;\n\t\tconst data = this._currentEdit.get()?.edit;\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\t//It should only happen in case of last line suggestion\n\t\tlet text = data.text;\n\t\tif (data.text.startsWith('\\n')) {\n\t\t\ttext = data.text.substring(1);\n\t\t}\n\t\tthis.editor.pushUndoStop();\n\t\tthis.editor.executeEdits('acceptCurrent', [EditOperation.replace(Range.lift(data.range), text)]);\n\t\tif (data.accepted) {\n\t\t\tthis._commandService.executeCommand(data.accepted.id, ...data.accepted.arguments || []);\n\t\t}\n\t\tthis.freeEdit(data);\n\t\tthis._currentEdit.set(undefined, undefined);\n\t}\n\n\tpublic jumpToCurrent(): void {\n\t\tthis._jumpBackPosition = this.editor.getSelection()?.getStartPosition();\n\n\t\tconst data = this._currentEdit.get()?.edit;\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tconst position = Position.lift({ lineNumber: data.range.startLineNumber, column: data.range.startColumn });\n\t\tthis.editor.setPosition(position);\n\t\t//if position is outside viewports, scroll to it\n\t\tthis.editor.revealPositionInCenterIfOutsideViewport(position);\n\t}\n\n\tpublic clear(sendRejection: boolean = true) {\n\t\tconst edit = this._currentEdit.get()?.edit;\n\t\tif (edit && edit?.rejected && !this._isAccepting && sendRejection) {\n\t\t\tthis._commandService.executeCommand(edit.rejected.id, ...edit.rejected.arguments || []);\n\t\t}\n\t\tif (edit) {\n\t\t\tthis.freeEdit(edit);\n\t\t}\n\t\tthis._currentEdit.set(undefined, undefined);\n\t}\n\n\tprivate freeEdit(edit: IInlineEdit) {\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst providers = this.languageFeaturesService.inlineEditProvider.all(model);\n\t\tif (providers.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tproviders[0].freeInlineEdit(edit);\n\t}\n\n\tpublic shouldShowHoverAt(range: Range) {\n\t\tconst currentEdit = this._currentEdit.get();\n\t\tif (!currentEdit) {\n\t\t\treturn false;\n\t\t}\n\t\tconst edit = currentEdit.edit;\n\t\tconst model = currentEdit.widget.model;\n\t\tconst overReplaceRange = Range.containsPosition(edit.range, range.getStartPosition()) || Range.containsPosition(edit.range, range.getEndPosition());\n\t\tif (overReplaceRange) {\n\t\t\treturn true;\n\t\t}\n\t\tconst ghostText = model.ghostText.get();\n\t\tif (ghostText) {\n\t\t\treturn ghostText.parts.some(p => range.containsPosition(new Position(ghostText.lineNumber, p.column)));\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic shouldShowHoverAtViewZone(viewZoneId: string): boolean {\n\t\treturn this._currentEdit.get()?.widget.ownsViewZone(viewZoneId) ?? false;\n\t}\n\n}\n\nfunction wait(ms: number, cancellationToken?: CancellationToken): Promise<void> {\n\treturn new Promise(resolve => {\n\t\tlet d: IDisposable | undefined = undefined;\n\t\tconst handle = setTimeout(() => {\n\t\t\tif (d) { d.dispose(); }\n\t\t\tresolve();\n\t\t}, ms);\n\t\tif (cancellationToken) {\n\t\t\td = cancellationToken.onCancellationRequested(() => {\n\t\t\t\tclearTimeout(handle);\n\t\t\t\tif (d) { d.dispose(); }\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}\n\t});\n}\n"]}