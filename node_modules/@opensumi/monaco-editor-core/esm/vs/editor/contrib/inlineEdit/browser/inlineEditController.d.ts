import { Disposable, IDisposable } from '../../../../base/common/lifecycle';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { Range } from '../../../common/core/range';
import { GhostTextWidget } from './ghostTextWidget';
import { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { IInlineEdit } from '../../../common/languages';
import { ILanguageFeaturesService } from '../../../common/services/languageFeatures';
import { ICommandService } from '../../../../platform/commands/common/commands';
import { IConfigurationService } from '../../../../platform/configuration/common/configuration';
export declare class InlineEditWidget implements IDisposable {
    readonly widget: GhostTextWidget;
    readonly edit: IInlineEdit;
    constructor(widget: GhostTextWidget, edit: IInlineEdit);
    dispose(): void;
}
export declare class InlineEditController extends Disposable {
    readonly editor: ICodeEditor;
    private readonly instantiationService;
    private readonly contextKeyService;
    private readonly languageFeaturesService;
    private readonly _commandService;
    private readonly _configurationService;
    static ID: string;
    static readonly inlineEditVisibleKey = "inlineEditVisible";
    static readonly inlineEditVisibleContext: RawContextKey<boolean>;
    private _isVisibleContext;
    static readonly cursorAtInlineEditKey = "cursorAtInlineEdit";
    static readonly cursorAtInlineEditContext: RawContextKey<boolean>;
    private _isCursorAtInlineEditContext;
    static get(editor: ICodeEditor): InlineEditController | null;
    private _currentEdit;
    private _currentRequestCts;
    private _jumpBackPosition;
    private _isAccepting;
    private readonly _enabled;
    private readonly _fontFamily;
    private readonly _backgroundColoring;
    constructor(editor: ICodeEditor, instantiationService: IInstantiationService, contextKeyService: IContextKeyService, languageFeaturesService: ILanguageFeaturesService, _commandService: ICommandService, _configurationService: IConfigurationService);
    private checkCursorPosition;
    private validateInlineEdit;
    private fetchInlineEdit;
    private getInlineEdit;
    trigger(): Promise<void>;
    jumpBack(): Promise<void>;
    accept(): void;
    jumpToCurrent(): void;
    clear(sendRejection?: boolean): void;
    private freeEdit;
    shouldShowHoverAt(range: Range): boolean;
    shouldShowHoverAtViewZone(viewZoneId: string): boolean;
}
