{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/inlineEdit/browser/commands.ts","vs/editor/contrib/inlineEdit/browser/commands.ts"],"names":[],"mappings":"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","file":"commands.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { EditorAction, ServicesAccessor } from '../../../browser/editorExtensions';\nimport { EditorContextKeys } from '../../../common/editorContextKeys';\nimport { inlineEditAcceptId, inlineEditJumpBackId, inlineEditJumpToId, inlineEditRejectId } from './commandIds';\nimport { InlineEditController } from './inlineEditController';\nimport { MenuId } from '../../../../platform/actions/common/actions';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry';\n\nexport class AcceptInlineEdit extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: inlineEditAcceptId,\n\t\t\tlabel: 'Accept Inline Edit',\n\t\t\talias: 'Accept Inline Edit',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext),\n\t\t\tkbOpts: [\n\t\t\t\t{\n\t\t\t\t\tweight: KeybindingWeight.EditorContrib + 1,\n\t\t\t\t\tprimary: KeyCode.Tab,\n\t\t\t\t\tkbExpr: ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext, InlineEditController.cursorAtInlineEditContext)\n\t\t\t\t}],\n\t\t\tmenuOpts: [{\n\t\t\t\tmenuId: MenuId.InlineEditToolbar,\n\t\t\t\ttitle: 'Accept',\n\t\t\t\tgroup: 'primary',\n\t\t\t\torder: 1,\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineEditController.get(editor);\n\t\tcontroller?.accept();\n\t}\n}\n\nexport class TriggerInlineEdit extends EditorAction {\n\tconstructor() {\n\t\tconst activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, ContextKeyExpr.not(InlineEditController.inlineEditVisibleKey));\n\t\tsuper({\n\t\t\tid: 'editor.action.inlineEdit.trigger',\n\t\t\tlabel: 'Trigger Inline Edit',\n\t\t\talias: 'Trigger Inline Edit',\n\t\t\tprecondition: activeExpr,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib + 1,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Equal,\n\t\t\t\tkbExpr: activeExpr\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineEditController.get(editor);\n\t\tcontroller?.trigger();\n\t}\n}\n\nexport class JumpToInlineEdit extends EditorAction {\n\tconstructor() {\n\t\tconst activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext, ContextKeyExpr.not(InlineEditController.cursorAtInlineEditKey));\n\n\t\tsuper({\n\t\t\tid: inlineEditJumpToId,\n\t\t\tlabel: 'Jump to Inline Edit',\n\t\t\talias: 'Jump to Inline Edit',\n\t\t\tprecondition: activeExpr,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib + 1,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Equal,\n\t\t\t\tkbExpr: activeExpr\n\t\t\t},\n\t\t\tmenuOpts: [{\n\t\t\t\tmenuId: MenuId.InlineEditToolbar,\n\t\t\t\ttitle: 'Jump To Edit',\n\t\t\t\tgroup: 'primary',\n\t\t\t\torder: 3,\n\t\t\t\twhen: activeExpr\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineEditController.get(editor);\n\t\tcontroller?.jumpToCurrent();\n\t}\n}\n\nexport class JumpBackInlineEdit extends EditorAction {\n\tconstructor() {\n\t\tconst activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.cursorAtInlineEditContext);\n\n\t\tsuper({\n\t\t\tid: inlineEditJumpBackId,\n\t\t\tlabel: 'Jump Back from Inline Edit',\n\t\t\talias: 'Jump Back from Inline Edit',\n\t\t\tprecondition: activeExpr,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib + 10,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Equal,\n\t\t\t\tkbExpr: activeExpr\n\t\t\t},\n\t\t\tmenuOpts: [{\n\t\t\t\tmenuId: MenuId.InlineEditToolbar,\n\t\t\t\ttitle: 'Jump Back',\n\t\t\t\tgroup: 'primary',\n\t\t\t\torder: 3,\n\t\t\t\twhen: activeExpr\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineEditController.get(editor);\n\t\tcontroller?.jumpBack();\n\t}\n}\n\nexport class RejectInlineEdit extends EditorAction {\n\tconstructor() {\n\t\tconst activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext);\n\t\tsuper({\n\t\t\tid: inlineEditRejectId,\n\t\t\tlabel: 'Reject Inline Edit',\n\t\t\talias: 'Reject Inline Edit',\n\t\t\tprecondition: activeExpr,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\tkbExpr: activeExpr\n\t\t\t},\n\t\t\tmenuOpts: [{\n\t\t\t\tmenuId: MenuId.InlineEditToolbar,\n\t\t\t\ttitle: 'Reject',\n\t\t\t\tgroup: 'secondary',\n\t\t\t\torder: 2,\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineEditController.get(editor);\n\t\tcontroller?.clear();\n\t}\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { EditorAction, ServicesAccessor } from '../../../browser/editorExtensions';\nimport { EditorContextKeys } from '../../../common/editorContextKeys';\nimport { inlineEditAcceptId, inlineEditJumpBackId, inlineEditJumpToId, inlineEditRejectId } from './commandIds';\nimport { InlineEditController } from './inlineEditController';\nimport { MenuId } from '../../../../platform/actions/common/actions';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry';\n\nexport class AcceptInlineEdit extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: inlineEditAcceptId,\n\t\t\tlabel: 'Accept Inline Edit',\n\t\t\talias: 'Accept Inline Edit',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext),\n\t\t\tkbOpts: [\n\t\t\t\t{\n\t\t\t\t\tweight: KeybindingWeight.EditorContrib + 1,\n\t\t\t\t\tprimary: KeyCode.Tab,\n\t\t\t\t\tkbExpr: ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext, InlineEditController.cursorAtInlineEditContext)\n\t\t\t\t}],\n\t\t\tmenuOpts: [{\n\t\t\t\tmenuId: MenuId.InlineEditToolbar,\n\t\t\t\ttitle: 'Accept',\n\t\t\t\tgroup: 'primary',\n\t\t\t\torder: 1,\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineEditController.get(editor);\n\t\tcontroller?.accept();\n\t}\n}\n\nexport class TriggerInlineEdit extends EditorAction {\n\tconstructor() {\n\t\tconst activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, ContextKeyExpr.not(InlineEditController.inlineEditVisibleKey));\n\t\tsuper({\n\t\t\tid: 'editor.action.inlineEdit.trigger',\n\t\t\tlabel: 'Trigger Inline Edit',\n\t\t\talias: 'Trigger Inline Edit',\n\t\t\tprecondition: activeExpr,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib + 1,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Equal,\n\t\t\t\tkbExpr: activeExpr\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineEditController.get(editor);\n\t\tcontroller?.trigger();\n\t}\n}\n\nexport class JumpToInlineEdit extends EditorAction {\n\tconstructor() {\n\t\tconst activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext, ContextKeyExpr.not(InlineEditController.cursorAtInlineEditKey));\n\n\t\tsuper({\n\t\t\tid: inlineEditJumpToId,\n\t\t\tlabel: 'Jump to Inline Edit',\n\t\t\talias: 'Jump to Inline Edit',\n\t\t\tprecondition: activeExpr,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib + 1,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Equal,\n\t\t\t\tkbExpr: activeExpr\n\t\t\t},\n\t\t\tmenuOpts: [{\n\t\t\t\tmenuId: MenuId.InlineEditToolbar,\n\t\t\t\ttitle: 'Jump To Edit',\n\t\t\t\tgroup: 'primary',\n\t\t\t\torder: 3,\n\t\t\t\twhen: activeExpr\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineEditController.get(editor);\n\t\tcontroller?.jumpToCurrent();\n\t}\n}\n\nexport class JumpBackInlineEdit extends EditorAction {\n\tconstructor() {\n\t\tconst activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.cursorAtInlineEditContext);\n\n\t\tsuper({\n\t\t\tid: inlineEditJumpBackId,\n\t\t\tlabel: 'Jump Back from Inline Edit',\n\t\t\talias: 'Jump Back from Inline Edit',\n\t\t\tprecondition: activeExpr,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib + 10,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Equal,\n\t\t\t\tkbExpr: activeExpr\n\t\t\t},\n\t\t\tmenuOpts: [{\n\t\t\t\tmenuId: MenuId.InlineEditToolbar,\n\t\t\t\ttitle: 'Jump Back',\n\t\t\t\tgroup: 'primary',\n\t\t\t\torder: 3,\n\t\t\t\twhen: activeExpr\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineEditController.get(editor);\n\t\tcontroller?.jumpBack();\n\t}\n}\n\nexport class RejectInlineEdit extends EditorAction {\n\tconstructor() {\n\t\tconst activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext);\n\t\tsuper({\n\t\t\tid: inlineEditRejectId,\n\t\t\tlabel: 'Reject Inline Edit',\n\t\t\talias: 'Reject Inline Edit',\n\t\t\tprecondition: activeExpr,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\tkbExpr: activeExpr\n\t\t\t},\n\t\t\tmenuOpts: [{\n\t\t\t\tmenuId: MenuId.InlineEditToolbar,\n\t\t\t\ttitle: 'Reject',\n\t\t\t\tgroup: 'secondary',\n\t\t\t\torder: 2,\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineEditController.get(editor);\n\t\tcontroller?.clear();\n\t}\n}\n\n"]}