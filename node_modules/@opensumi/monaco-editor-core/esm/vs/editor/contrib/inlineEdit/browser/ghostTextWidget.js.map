{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/inlineEdit/browser/ghostTextWidget.ts","vs/editor/contrib/inlineEdit/browser/ghostTextWidget.ts"],"names":[],"mappings":"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","file":"ghostTextWidget.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle';\nimport { IObservable, derived, observableFromEvent, observableValue } from '../../../../base/common/observable';\nimport './inlineEdit.css';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { Position } from '../../../common/core/position';\nimport { IRange, Range } from '../../../common/core/range';\nimport { ILanguageService } from '../../../common/languages/language';\nimport { IModelDeltaDecoration, ITextModel, InjectedTextCursorStops } from '../../../common/model';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations';\nimport { InlineDecorationType } from '../../../common/viewModel';\nimport { AdditionalLinesWidget, LineData } from '../../inlineCompletions/browser/ghostTextWidget';\nimport { GhostText } from '../../inlineCompletions/browser/ghostText';\nimport { ColumnRange, applyObservableDecorations } from '../../inlineCompletions/browser/utils';\n\nexport const INLINE_EDIT_DESCRIPTION = 'inline-edit';\nexport interface IGhostTextWidgetModel {\n\treadonly targetTextModel: IObservable<ITextModel | undefined>;\n\treadonly ghostText: IObservable<GhostText | undefined>;\n\treadonly minReservedLineCount: IObservable<number>;\n\treadonly range: IObservable<IRange | undefined>;\n\treadonly backgroundColoring: IObservable<boolean>;\n}\n\nexport class GhostTextWidget extends Disposable {\n\tprivate readonly isDisposed = observableValue(this, false);\n\tprivate readonly currentTextModel = observableFromEvent(this.editor.onDidChangeModel, () => /** @description editor.model */ this.editor.getModel());\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\treadonly model: IGhostTextWidgetModel,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => { this.isDisposed.set(true, undefined); }));\n\t\tthis._register(applyObservableDecorations(this.editor, this.decorations));\n\t}\n\n\tprivate readonly uiState = derived(this, reader => {\n\t\tif (this.isDisposed.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst textModel = this.currentTextModel.read(reader);\n\t\tif (textModel !== this.model.targetTextModel.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst ghostText = this.model.ghostText.read(reader);\n\t\tif (!ghostText) {\n\t\t\treturn undefined;\n\t\t}\n\n\n\t\tlet range = this.model.range?.read(reader);\n\t\t//if range is empty, we want to remove it\n\t\tif (range && range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n\t\t\trange = undefined;\n\t\t}\n\t\t//check if both range and text are single line - in this case we want to do inline replacement\n\t\t//rather than replacing whole lines\n\t\tconst isSingleLine = (range ? range.startLineNumber === range.endLineNumber : true) && ghostText.parts.length === 1 && ghostText.parts[0].lines.length === 1;\n\n\t\t//check if we're just removing code\n\t\tconst isPureRemove = ghostText.parts.length === 1 && ghostText.parts[0].lines.every(l => l.length === 0);\n\n\t\tconst inlineTexts: { column: number; text: string; preview: boolean }[] = [];\n\t\tconst additionalLines: LineData[] = [];\n\n\t\tfunction addToAdditionalLines(lines: readonly string[], className: string | undefined) {\n\t\t\tif (additionalLines.length > 0) {\n\t\t\t\tconst lastLine = additionalLines[additionalLines.length - 1];\n\t\t\t\tif (className) {\n\t\t\t\t\tlastLine.decorations.push(new LineDecoration(lastLine.content.length + 1, lastLine.content.length + 1 + lines[0].length, className, InlineDecorationType.Regular));\n\t\t\t\t}\n\t\t\t\tlastLine.content += lines[0];\n\n\t\t\t\tlines = lines.slice(1);\n\t\t\t}\n\t\t\tfor (const line of lines) {\n\t\t\t\tadditionalLines.push({\n\t\t\t\t\tcontent: line,\n\t\t\t\t\tdecorations: className ? [new LineDecoration(1, line.length + 1, className, InlineDecorationType.Regular)] : []\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst textBufferLine = textModel.getLineContent(ghostText.lineNumber);\n\n\t\tlet hiddenTextStartColumn: number | undefined = undefined;\n\t\tlet lastIdx = 0;\n\t\tif (!isPureRemove) {\n\t\t\tfor (const part of ghostText.parts) {\n\t\t\t\tlet lines = part.lines;\n\t\t\t\t//If remove range is set, we want to push all new liens to virtual area\n\t\t\t\tif (range && !isSingleLine) {\n\t\t\t\t\taddToAdditionalLines(lines, INLINE_EDIT_DESCRIPTION);\n\t\t\t\t\tlines = [];\n\t\t\t\t}\n\t\t\t\tif (hiddenTextStartColumn === undefined) {\n\t\t\t\t\tinlineTexts.push({\n\t\t\t\t\t\tcolumn: part.column,\n\t\t\t\t\t\ttext: lines[0],\n\t\t\t\t\t\tpreview: part.preview,\n\t\t\t\t\t});\n\t\t\t\t\tlines = lines.slice(1);\n\t\t\t\t} else {\n\t\t\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx, part.column - 1)], undefined);\n\t\t\t\t}\n\n\t\t\t\tif (lines.length > 0) {\n\t\t\t\t\taddToAdditionalLines(lines, INLINE_EDIT_DESCRIPTION);\n\t\t\t\t\tif (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) {\n\t\t\t\t\t\thiddenTextStartColumn = part.column;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlastIdx = part.column - 1;\n\t\t\t}\n\t\t\tif (hiddenTextStartColumn !== undefined) {\n\t\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx)], undefined);\n\t\t\t}\n\t\t}\n\n\t\tconst hiddenRange = hiddenTextStartColumn !== undefined ? new ColumnRange(hiddenTextStartColumn, textBufferLine.length + 1) : undefined;\n\n\t\tconst lineNumber =\n\t\t\t(isSingleLine || !range) ? ghostText.lineNumber : range.endLineNumber - 1;\n\n\t\treturn {\n\t\t\tinlineTexts,\n\t\t\tadditionalLines,\n\t\t\thiddenRange,\n\t\t\tlineNumber,\n\t\t\tadditionalReservedLineCount: this.model.minReservedLineCount.read(reader),\n\t\t\ttargetTextModel: textModel,\n\t\t\trange,\n\t\t\tisSingleLine,\n\t\t\tisPureRemove,\n\t\t\tbackgroundColoring: this.model.backgroundColoring.read(reader)\n\t\t};\n\t});\n\n\tprivate readonly decorations = derived(this, reader => {\n\t\tconst uiState = this.uiState.read(reader);\n\t\tif (!uiState) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\n\t\tif (uiState.hiddenRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.hiddenRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: { inlineClassName: 'inline-edit-hidden', description: 'inline-edit-hidden', }\n\t\t\t});\n\t\t}\n\n\t\tif (uiState.range) {\n\t\t\tconst ranges = [];\n\t\t\tif (uiState.isSingleLine) {\n\t\t\t\tranges.push(uiState.range);\n\t\t\t}\n\t\t\telse if (uiState.isPureRemove) {\n\t\t\t\tconst lines = uiState.range.endLineNumber - uiState.range.startLineNumber;\n\t\t\t\tfor (let i = 0; i < lines; i++) {\n\t\t\t\t\tconst line = uiState.range.startLineNumber + i;\n\t\t\t\t\tconst firstNonWhitespace = uiState.targetTextModel.getLineFirstNonWhitespaceColumn(line);\n\t\t\t\t\tconst lastNonWhitespace = uiState.targetTextModel.getLineLastNonWhitespaceColumn(line);\n\t\t\t\t\tconst range = new Range(line, firstNonWhitespace, line, lastNonWhitespace);\n\t\t\t\t\tranges.push(range);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst lines = uiState.range.endLineNumber - uiState.range.startLineNumber;\n\t\t\t\tfor (let i = 0; i <= lines; i++) {\n\t\t\t\t\tconst line = uiState.range.startLineNumber + i;\n\t\t\t\t\tconst firstNonWhitespace = uiState.targetTextModel.getLineFirstNonWhitespaceColumn(line);\n\t\t\t\t\tconst lastNonWhitespace = uiState.targetTextModel.getLineLastNonWhitespaceColumn(line);\n\t\t\t\t\tconst range = new Range(line, firstNonWhitespace, line, lastNonWhitespace);\n\t\t\t\t\tranges.push(range);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst className = uiState.backgroundColoring ? 'inline-edit-remove backgroundColoring' : 'inline-edit-remove';\n\t\t\tfor (const range of ranges) {\n\t\t\t\tdecorations.push({\n\t\t\t\t\trange,\n\t\t\t\t\toptions: { inlineClassName: className, description: 'inline-edit-remove', }\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfor (const p of uiState.inlineTexts) {\n\n\t\t\tdecorations.push({\n\t\t\t\trange: Range.fromPositions(new Position(uiState.lineNumber, p.column)),\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: INLINE_EDIT_DESCRIPTION,\n\t\t\t\t\tafter: { content: p.text, inlineClassName: p.preview ? 'inline-edit-decoration-preview' : 'inline-edit-decoration', cursorStops: InjectedTextCursorStops.Left },\n\t\t\t\t\tshowIfCollapsed: true,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn decorations;\n\t});\n\n\tprivate readonly additionalLinesWidget = this._register(\n\t\tnew AdditionalLinesWidget(\n\t\t\tthis.editor,\n\t\t\tthis.languageService.languageIdCodec,\n\t\t\tderived(reader => {\n\t\t\t\t/** @description lines */\n\t\t\t\tconst uiState = this.uiState.read(reader);\n\t\t\t\treturn uiState && !uiState.isPureRemove ? {\n\t\t\t\t\tlineNumber: uiState.lineNumber,\n\t\t\t\t\tadditionalLines: uiState.additionalLines,\n\t\t\t\t\tminReservedLineCount: uiState.additionalReservedLineCount,\n\t\t\t\t\ttargetTextModel: uiState.targetTextModel,\n\t\t\t\t} : undefined;\n\t\t\t})\n\t\t)\n\t);\n\n\tpublic ownsViewZone(viewZoneId: string): boolean {\n\t\treturn this.additionalLinesWidget.viewZoneId === viewZoneId;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle';\nimport { IObservable, derived, observableFromEvent, observableValue } from '../../../../base/common/observable';\nimport './inlineEdit.css';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { Position } from '../../../common/core/position';\nimport { IRange, Range } from '../../../common/core/range';\nimport { ILanguageService } from '../../../common/languages/language';\nimport { IModelDeltaDecoration, ITextModel, InjectedTextCursorStops } from '../../../common/model';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations';\nimport { InlineDecorationType } from '../../../common/viewModel';\nimport { AdditionalLinesWidget, LineData } from '../../inlineCompletions/browser/ghostTextWidget';\nimport { GhostText } from '../../inlineCompletions/browser/ghostText';\nimport { ColumnRange, applyObservableDecorations } from '../../inlineCompletions/browser/utils';\n\nexport const INLINE_EDIT_DESCRIPTION = 'inline-edit';\nexport interface IGhostTextWidgetModel {\n\treadonly targetTextModel: IObservable<ITextModel | undefined>;\n\treadonly ghostText: IObservable<GhostText | undefined>;\n\treadonly minReservedLineCount: IObservable<number>;\n\treadonly range: IObservable<IRange | undefined>;\n\treadonly backgroundColoring: IObservable<boolean>;\n}\n\nexport class GhostTextWidget extends Disposable {\n\tprivate readonly isDisposed = observableValue(this, false);\n\tprivate readonly currentTextModel = observableFromEvent(this.editor.onDidChangeModel, () => /** @description editor.model */ this.editor.getModel());\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\treadonly model: IGhostTextWidgetModel,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => { this.isDisposed.set(true, undefined); }));\n\t\tthis._register(applyObservableDecorations(this.editor, this.decorations));\n\t}\n\n\tprivate readonly uiState = derived(this, reader => {\n\t\tif (this.isDisposed.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst textModel = this.currentTextModel.read(reader);\n\t\tif (textModel !== this.model.targetTextModel.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst ghostText = this.model.ghostText.read(reader);\n\t\tif (!ghostText) {\n\t\t\treturn undefined;\n\t\t}\n\n\n\t\tlet range = this.model.range?.read(reader);\n\t\t//if range is empty, we want to remove it\n\t\tif (range && range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n\t\t\trange = undefined;\n\t\t}\n\t\t//check if both range and text are single line - in this case we want to do inline replacement\n\t\t//rather than replacing whole lines\n\t\tconst isSingleLine = (range ? range.startLineNumber === range.endLineNumber : true) && ghostText.parts.length === 1 && ghostText.parts[0].lines.length === 1;\n\n\t\t//check if we're just removing code\n\t\tconst isPureRemove = ghostText.parts.length === 1 && ghostText.parts[0].lines.every(l => l.length === 0);\n\n\t\tconst inlineTexts: { column: number; text: string; preview: boolean }[] = [];\n\t\tconst additionalLines: LineData[] = [];\n\n\t\tfunction addToAdditionalLines(lines: readonly string[], className: string | undefined) {\n\t\t\tif (additionalLines.length > 0) {\n\t\t\t\tconst lastLine = additionalLines[additionalLines.length - 1];\n\t\t\t\tif (className) {\n\t\t\t\t\tlastLine.decorations.push(new LineDecoration(lastLine.content.length + 1, lastLine.content.length + 1 + lines[0].length, className, InlineDecorationType.Regular));\n\t\t\t\t}\n\t\t\t\tlastLine.content += lines[0];\n\n\t\t\t\tlines = lines.slice(1);\n\t\t\t}\n\t\t\tfor (const line of lines) {\n\t\t\t\tadditionalLines.push({\n\t\t\t\t\tcontent: line,\n\t\t\t\t\tdecorations: className ? [new LineDecoration(1, line.length + 1, className, InlineDecorationType.Regular)] : []\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst textBufferLine = textModel.getLineContent(ghostText.lineNumber);\n\n\t\tlet hiddenTextStartColumn: number | undefined = undefined;\n\t\tlet lastIdx = 0;\n\t\tif (!isPureRemove) {\n\t\t\tfor (const part of ghostText.parts) {\n\t\t\t\tlet lines = part.lines;\n\t\t\t\t//If remove range is set, we want to push all new liens to virtual area\n\t\t\t\tif (range && !isSingleLine) {\n\t\t\t\t\taddToAdditionalLines(lines, INLINE_EDIT_DESCRIPTION);\n\t\t\t\t\tlines = [];\n\t\t\t\t}\n\t\t\t\tif (hiddenTextStartColumn === undefined) {\n\t\t\t\t\tinlineTexts.push({\n\t\t\t\t\t\tcolumn: part.column,\n\t\t\t\t\t\ttext: lines[0],\n\t\t\t\t\t\tpreview: part.preview,\n\t\t\t\t\t});\n\t\t\t\t\tlines = lines.slice(1);\n\t\t\t\t} else {\n\t\t\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx, part.column - 1)], undefined);\n\t\t\t\t}\n\n\t\t\t\tif (lines.length > 0) {\n\t\t\t\t\taddToAdditionalLines(lines, INLINE_EDIT_DESCRIPTION);\n\t\t\t\t\tif (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) {\n\t\t\t\t\t\thiddenTextStartColumn = part.column;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlastIdx = part.column - 1;\n\t\t\t}\n\t\t\tif (hiddenTextStartColumn !== undefined) {\n\t\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx)], undefined);\n\t\t\t}\n\t\t}\n\n\t\tconst hiddenRange = hiddenTextStartColumn !== undefined ? new ColumnRange(hiddenTextStartColumn, textBufferLine.length + 1) : undefined;\n\n\t\tconst lineNumber =\n\t\t\t(isSingleLine || !range) ? ghostText.lineNumber : range.endLineNumber - 1;\n\n\t\treturn {\n\t\t\tinlineTexts,\n\t\t\tadditionalLines,\n\t\t\thiddenRange,\n\t\t\tlineNumber,\n\t\t\tadditionalReservedLineCount: this.model.minReservedLineCount.read(reader),\n\t\t\ttargetTextModel: textModel,\n\t\t\trange,\n\t\t\tisSingleLine,\n\t\t\tisPureRemove,\n\t\t\tbackgroundColoring: this.model.backgroundColoring.read(reader)\n\t\t};\n\t});\n\n\tprivate readonly decorations = derived(this, reader => {\n\t\tconst uiState = this.uiState.read(reader);\n\t\tif (!uiState) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\n\t\tif (uiState.hiddenRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.hiddenRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: { inlineClassName: 'inline-edit-hidden', description: 'inline-edit-hidden', }\n\t\t\t});\n\t\t}\n\n\t\tif (uiState.range) {\n\t\t\tconst ranges = [];\n\t\t\tif (uiState.isSingleLine) {\n\t\t\t\tranges.push(uiState.range);\n\t\t\t}\n\t\t\telse if (uiState.isPureRemove) {\n\t\t\t\tconst lines = uiState.range.endLineNumber - uiState.range.startLineNumber;\n\t\t\t\tfor (let i = 0; i < lines; i++) {\n\t\t\t\t\tconst line = uiState.range.startLineNumber + i;\n\t\t\t\t\tconst firstNonWhitespace = uiState.targetTextModel.getLineFirstNonWhitespaceColumn(line);\n\t\t\t\t\tconst lastNonWhitespace = uiState.targetTextModel.getLineLastNonWhitespaceColumn(line);\n\t\t\t\t\tconst range = new Range(line, firstNonWhitespace, line, lastNonWhitespace);\n\t\t\t\t\tranges.push(range);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst lines = uiState.range.endLineNumber - uiState.range.startLineNumber;\n\t\t\t\tfor (let i = 0; i <= lines; i++) {\n\t\t\t\t\tconst line = uiState.range.startLineNumber + i;\n\t\t\t\t\tconst firstNonWhitespace = uiState.targetTextModel.getLineFirstNonWhitespaceColumn(line);\n\t\t\t\t\tconst lastNonWhitespace = uiState.targetTextModel.getLineLastNonWhitespaceColumn(line);\n\t\t\t\t\tconst range = new Range(line, firstNonWhitespace, line, lastNonWhitespace);\n\t\t\t\t\tranges.push(range);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst className = uiState.backgroundColoring ? 'inline-edit-remove backgroundColoring' : 'inline-edit-remove';\n\t\t\tfor (const range of ranges) {\n\t\t\t\tdecorations.push({\n\t\t\t\t\trange,\n\t\t\t\t\toptions: { inlineClassName: className, description: 'inline-edit-remove', }\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfor (const p of uiState.inlineTexts) {\n\n\t\t\tdecorations.push({\n\t\t\t\trange: Range.fromPositions(new Position(uiState.lineNumber, p.column)),\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: INLINE_EDIT_DESCRIPTION,\n\t\t\t\t\tafter: { content: p.text, inlineClassName: p.preview ? 'inline-edit-decoration-preview' : 'inline-edit-decoration', cursorStops: InjectedTextCursorStops.Left },\n\t\t\t\t\tshowIfCollapsed: true,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn decorations;\n\t});\n\n\tprivate readonly additionalLinesWidget = this._register(\n\t\tnew AdditionalLinesWidget(\n\t\t\tthis.editor,\n\t\t\tthis.languageService.languageIdCodec,\n\t\t\tderived(reader => {\n\t\t\t\t/** @description lines */\n\t\t\t\tconst uiState = this.uiState.read(reader);\n\t\t\t\treturn uiState && !uiState.isPureRemove ? {\n\t\t\t\t\tlineNumber: uiState.lineNumber,\n\t\t\t\t\tadditionalLines: uiState.additionalLines,\n\t\t\t\t\tminReservedLineCount: uiState.additionalReservedLineCount,\n\t\t\t\t\ttargetTextModel: uiState.targetTextModel,\n\t\t\t\t} : undefined;\n\t\t\t})\n\t\t)\n\t);\n\n\tpublic ownsViewZone(viewZoneId: string): boolean {\n\t\treturn this.additionalLinesWidget.viewZoneId === viewZoneId;\n\t}\n}\n"]}