import { IDisposable } from '../../../../base/common/lifecycle';
import { ICodeEditor, IEditorMouseEvent } from '../../../browser/editorBrowser';
import { Range } from '../../../common/core/range';
import { IModelDecoration } from '../../../common/model';
import { HoverAnchor, IEditorHoverParticipant, IEditorHoverRenderContext, IHoverPart } from '../../hover/browser/hoverTypes';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { ITelemetryService } from '../../../../platform/telemetry/common/telemetry';
import { InlineEditController } from './inlineEditController';
export declare class InlineEditHover implements IHoverPart {
    readonly owner: IEditorHoverParticipant<InlineEditHover>;
    readonly range: Range;
    readonly controller: InlineEditController;
    constructor(owner: IEditorHoverParticipant<InlineEditHover>, range: Range, controller: InlineEditController);
    isValidForHoverAnchor(anchor: HoverAnchor): boolean;
}
export declare class InlineEditHoverParticipant implements IEditorHoverParticipant<InlineEditHover> {
    private readonly _editor;
    private readonly _instantiationService;
    private readonly _telemetryService;
    readonly hoverOrdinal: number;
    constructor(_editor: ICodeEditor, _instantiationService: IInstantiationService, _telemetryService: ITelemetryService);
    suggestHoverAnchor(mouseEvent: IEditorMouseEvent): HoverAnchor | null;
    computeSync(anchor: HoverAnchor, lineDecorations: IModelDecoration[]): InlineEditHover[];
    renderHoverParts(context: IEditorHoverRenderContext, hoverParts: InlineEditHover[]): IDisposable;
}
