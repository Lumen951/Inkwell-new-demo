{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/dropOrPasteInto/browser/postEditWidget.ts","vs/editor/contrib/dropOrPasteInto/browser/postEditWidget.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;;;;;;;;;;;AAEhG,oDAAoD;AACpD,sEAAmE;AACnE,6DAA2D;AAE3D,yDAAsD;AACtD,iEAAgG;AAChG,gCAA8B;AAE9B,+EAA8F;AAI9F,iCAAqD;AACrD,kFAAmH;AACnH,sFAA2F;AAC3F,2FAAgG;AAChG,kFAAuF;AAiBvF,IAAM,cAAc,sBAApB,MAAM,cAAe,SAAQ,sBAAU;IAWtC,YACkB,MAAc,EACd,MAAmB,EACpC,cAAsC,EACrB,WAAwB,EACxB,KAAY,EACZ,KAAc,EACd,eAA4C,EACxC,mBAAyD,EAC1D,iBAAqC,EACrC,kBAAuD;QAE3E,KAAK,EAAE,CAAC;QAXS,WAAM,GAAN,MAAM,CAAQ;QACd,WAAM,GAAN,MAAM,CAAa;QAEnB,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAO;QACZ,UAAK,GAAL,KAAK,CAAS;QACd,oBAAe,GAAf,eAAe,CAA6B;QACvB,wBAAmB,GAAnB,mBAAmB,CAAqB;QAEzC,uBAAkB,GAAlB,kBAAkB,CAAoB;QAlBnE,wBAAmB,GAAG,IAAI,CAAC;QAC3B,sBAAiB,GAAG,IAAI,CAAC;QAqBjC,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAC/D,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,CAAC,IAAA,wBAAY,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAEhE,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAEtC,IAAI,CAAC,SAAS,CAAC,IAAA,wBAAY,EAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAE5E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE;YACxD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACzC,IAAI,CAAC,OAAO,EAAE,CAAC;YAChB,CAAC;QACF,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,CAAC,SAAS,CAAC,aAAK,CAAC,eAAe,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,GAAG,EAAE;YACpF,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,kBAAkB;;QACzB,MAAM,OAAO,GAAG,MAAA,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,0CAAE,QAAQ,EAAE,CAAC;QAC1F,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACvF,CAAC;IAEO,MAAM;QACb,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC;QAE1C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAM,CAAC,IAAI,CAAC,OAAO,EAAE;YACrD,YAAY,EAAE,IAAI;SAClB,CAAC,CAAC,CAAC;QACJ,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC;QAEhC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;IACzG,CAAC;IAED,KAAK;QACJ,OAAO,gBAAc,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;IAClD,CAAC;IAED,UAAU;QACT,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAED,WAAW;QACV,OAAO;YACN,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;YACrC,UAAU,EAAE,+CAAuC;SACnD,CAAC;IACH,CAAC;IAED,YAAY;QACX,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC;YACxC,SAAS,EAAE,GAAG,EAAE;gBACf,MAAM,GAAG,GAAG,GAAG,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC5D,OAAO,EAAE,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC;YAC7D,CAAC;YACD,UAAU,EAAE,GAAG,EAAE;gBAChB,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,IAAA,kBAAQ,EAAC;oBACpD,EAAE,EAAE,EAAE;oBACN,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,OAAO,EAAE,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,eAAe;oBACzC,GAAG,EAAE,GAAG,EAAE;wBACT,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC;4BACtC,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;wBAChC,CAAC;oBACF,CAAC;iBACD,CAAC,CAAC,CAAC;YACL,CAAC;SACD,CAAC,CAAC;IACJ,CAAC;;AAhGuB,qBAAM,GAAG,8BAAH,AAAiC,CAAC;AAD3D,cAAc;IAmBjB,WAAA,iCAAmB,CAAA;IACnB,WAAA,+BAAkB,CAAA;IAClB,WAAA,+BAAkB,CAAA;GArBf,cAAc,CAkGnB;AAEM,IAAM,qBAAqB,GAA3B,MAAM,qBAAsB,SAAQ,sBAAU;IAIpD,YACkB,GAAW,EACX,OAAoB,EACpB,eAAuC,EACvC,YAAyB,EACnB,qBAA6D,EAClE,gBAAmD;QAErE,KAAK,EAAE,CAAC;QAPS,QAAG,GAAH,GAAG,CAAQ;QACX,YAAO,GAAP,OAAO,CAAa;QACpB,oBAAe,GAAf,eAAe,CAAwB;QACvC,iBAAY,GAAZ,YAAY,CAAa;QACF,0BAAqB,GAArB,qBAAqB,CAAuB;QACjD,qBAAgB,GAAhB,gBAAgB,CAAkB;QARrD,mBAAc,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,6BAAiB,EAAkB,CAAC,CAAC;QAYzF,IAAI,CAAC,SAAS,CAAC,aAAK,CAAC,GAAG,CACvB,OAAO,CAAC,gBAAgB,EACxB,OAAO,CAAC,uBAAuB,CAC/B,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,wBAAwB,CAAC,MAAwB,EAAE,KAAc,EAAE,aAAsB,EAAE,KAAwB;QAC/H,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACtC,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YAC9B,OAAO;QACR,CAAC;QAED,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO;QACR,CAAC;QAED,MAAM,qBAAqB,GAAG,IAAA,kCAA2B,EAAC,KAAK,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAEnF,2DAA2D;QAC3D,MAAM,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,sBAAsB,GAAG,KAAK,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC;gBAC1D,KAAK,EAAE,YAAY;gBACnB,OAAO,EAAE,EAAE,WAAW,EAAE,mBAAmB,EAAE,UAAU,6DAAqD,EAAE;aAC9G,CAAC,CAAC,CAAC;QAEJ,IAAI,UAA2B,CAAC;QAChC,IAAI,SAAuB,CAAC;QAC5B,IAAI,CAAC;YACJ,UAAU,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YACvG,SAAS,GAAG,KAAK,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC;gBAAS,CAAC;YACV,KAAK,CAAC,gBAAgB,CAAC,sBAAsB,EAAE,EAAE,CAAC,CAAC;QACpD,CAAC;QAED,IAAI,aAAa,IAAI,UAAU,CAAC,SAAS,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACxE,IAAI,CAAC,IAAI,CAAC,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,YAAY,EAAE,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE;gBAClE,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;gBACtC,IAAI,CAAC,KAAK,EAAE,CAAC;oBACZ,OAAO;gBACR,CAAC;gBAED,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;gBACnB,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,EAAE,eAAe,EAAE,YAAY,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;YAC1H,CAAC,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;IAEM,IAAI,CAAC,KAAY,EAAE,KAAc,EAAE,eAA2C;QACpF,IAAI,CAAC,KAAK,EAAE,CAAC;QAEb,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;YAC7B,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,cAAc,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,YAAY,EAAE,KAAK,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;QACvL,CAAC;IACF,CAAC;IAEM,KAAK;QACX,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;IAEM,eAAe;;QACrB,MAAA,IAAI,CAAC,cAAc,CAAC,KAAK,0CAAE,YAAY,EAAE,CAAC;IAC3C,CAAC;CACD,CAAA;AA7EY,sDAAqB;gCAArB,qBAAqB;IAS/B,WAAA,qCAAqB,CAAA;IACrB,WAAA,kCAAgB,CAAA;GAVN,qBAAqB,CA6EjC","file":"postEditWidget.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom';\nimport { Button } from '../../../../base/browser/ui/button/button';\nimport { toAction } from '../../../../base/common/actions';\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { Event } from '../../../../base/common/event';\nimport { Disposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle';\nimport './postEditWidget.css';\nimport { ContentWidgetPositionPreference, ICodeEditor, IContentWidget, IContentWidgetPosition } from '../../../browser/editorBrowser';\nimport { IBulkEditResult, IBulkEditService } from '../../../browser/services/bulkEditService';\nimport { Range } from '../../../common/core/range';\nimport { WorkspaceEdit } from '../../../common/languages';\nimport { TrackedRangeStickiness } from '../../../common/model';\nimport { createCombinedWorkspaceEdit } from './edit';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';\n\n\ninterface EditSet {\n\treadonly activeEditIndex: number;\n\treadonly allEdits: ReadonlyArray<{\n\t\treadonly label: string;\n\t\treadonly insertText: string | { readonly snippet: string };\n\t\treadonly additionalEdit?: WorkspaceEdit;\n\t}>;\n}\n\ninterface ShowCommand {\n\treadonly id: string;\n\treadonly label: string;\n}\n\nclass PostEditWidget extends Disposable implements IContentWidget {\n\tprivate static readonly baseId = 'editor.widget.postEditWidget';\n\n\treadonly allowEditorOverflow = true;\n\treadonly suppressMouseDown = true;\n\n\tprivate domNode!: HTMLElement;\n\tprivate button!: Button;\n\n\tprivate readonly visibleContext: IContextKey<boolean>;\n\n\tconstructor(\n\t\tprivate readonly typeId: string,\n\t\tprivate readonly editor: ICodeEditor,\n\t\tvisibleContext: RawContextKey<boolean>,\n\t\tprivate readonly showCommand: ShowCommand,\n\t\tprivate readonly range: Range,\n\t\tprivate readonly edits: EditSet,\n\t\tprivate readonly onSelectNewEdit: (editIndex: number) => void,\n\t\t@IContextMenuService private readonly _contextMenuService: IContextMenuService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t) {\n\t\tsuper();\n\n\t\tthis.create();\n\n\t\tthis.visibleContext = visibleContext.bindTo(contextKeyService);\n\t\tthis.visibleContext.set(true);\n\t\tthis._register(toDisposable(() => this.visibleContext.reset()));\n\n\t\tthis.editor.addContentWidget(this);\n\t\tthis.editor.layoutContentWidget(this);\n\n\t\tthis._register(toDisposable((() => this.editor.removeContentWidget(this))));\n\n\t\tthis._register(this.editor.onDidChangeCursorPosition(e => {\n\t\t\tif (!range.containsPosition(e.position)) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(Event.runAndSubscribe(_keybindingService.onDidUpdateKeybindings, () => {\n\t\t\tthis._updateButtonTitle();\n\t\t}));\n\t}\n\n\tprivate _updateButtonTitle() {\n\t\tconst binding = this._keybindingService.lookupKeybinding(this.showCommand.id)?.getLabel();\n\t\tthis.button.element.title = this.showCommand.label + (binding ? ` (${binding})` : '');\n\t}\n\n\tprivate create(): void {\n\t\tthis.domNode = dom.$('.post-edit-widget');\n\n\t\tthis.button = this._register(new Button(this.domNode, {\n\t\t\tsupportIcons: true,\n\t\t}));\n\t\tthis.button.label = '$(insert)';\n\n\t\tthis._register(dom.addDisposableListener(this.domNode, dom.EventType.CLICK, () => this.showSelector()));\n\t}\n\n\tgetId(): string {\n\t\treturn PostEditWidget.baseId + '.' + this.typeId;\n\t}\n\n\tgetDomNode(): HTMLElement {\n\t\treturn this.domNode;\n\t}\n\n\tgetPosition(): IContentWidgetPosition | null {\n\t\treturn {\n\t\t\tposition: this.range.getEndPosition(),\n\t\t\tpreference: [ContentWidgetPositionPreference.BELOW]\n\t\t};\n\t}\n\n\tshowSelector() {\n\t\tthis._contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => {\n\t\t\t\tconst pos = dom.getDomNodePagePosition(this.button.element);\n\t\t\t\treturn { x: pos.left + pos.width, y: pos.top + pos.height };\n\t\t\t},\n\t\t\tgetActions: () => {\n\t\t\t\treturn this.edits.allEdits.map((edit, i) => toAction({\n\t\t\t\t\tid: '',\n\t\t\t\t\tlabel: edit.label,\n\t\t\t\t\tchecked: i === this.edits.activeEditIndex,\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tif (i !== this.edits.activeEditIndex) {\n\t\t\t\t\t\t\treturn this.onSelectNewEdit(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t}));\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class PostEditWidgetManager extends Disposable {\n\n\tprivate readonly _currentWidget = this._register(new MutableDisposable<PostEditWidget>());\n\n\tconstructor(\n\t\tprivate readonly _id: string,\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _visibleContext: RawContextKey<boolean>,\n\t\tprivate readonly _showCommand: ShowCommand,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IBulkEditService private readonly _bulkEditService: IBulkEditService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(Event.any(\n\t\t\t_editor.onDidChangeModel,\n\t\t\t_editor.onDidChangeModelContent,\n\t\t)(() => this.clear()));\n\t}\n\n\tpublic async applyEditAndShowIfNeeded(ranges: readonly Range[], edits: EditSet, canShowWidget: boolean, token: CancellationToken) {\n\t\tconst model = this._editor.getModel();\n\t\tif (!model || !ranges.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst edit = edits.allEdits[edits.activeEditIndex];\n\t\tif (!edit) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, ranges, edit);\n\n\t\t// Use a decoration to track edits around the trigger range\n\t\tconst primaryRange = ranges[0];\n\t\tconst editTrackingDecoration = model.deltaDecorations([], [{\n\t\t\trange: primaryRange,\n\t\t\toptions: { description: 'paste-line-suffix', stickiness: TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges }\n\t\t}]);\n\n\t\tlet editResult: IBulkEditResult;\n\t\tlet editRange: Range | null;\n\t\ttry {\n\t\t\teditResult = await this._bulkEditService.apply(combinedWorkspaceEdit, { editor: this._editor, token });\n\t\t\teditRange = model.getDecorationRange(editTrackingDecoration[0]);\n\t\t} finally {\n\t\t\tmodel.deltaDecorations(editTrackingDecoration, []);\n\t\t}\n\n\t\tif (canShowWidget && editResult.isApplied && edits.allEdits.length > 1) {\n\t\t\tthis.show(editRange ?? primaryRange, edits, async (newEditIndex) => {\n\t\t\t\tconst model = this._editor.getModel();\n\t\t\t\tif (!model) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait model.undo();\n\t\t\t\tthis.applyEditAndShowIfNeeded(ranges, { activeEditIndex: newEditIndex, allEdits: edits.allEdits }, canShowWidget, token);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic show(range: Range, edits: EditSet, onDidSelectEdit: (newIndex: number) => void) {\n\t\tthis.clear();\n\n\t\tif (this._editor.hasModel()) {\n\t\t\tthis._currentWidget.value = this._instantiationService.createInstance(PostEditWidget, this._id, this._editor, this._visibleContext, this._showCommand, range, edits, onDidSelectEdit);\n\t\t}\n\t}\n\n\tpublic clear() {\n\t\tthis._currentWidget.clear();\n\t}\n\n\tpublic tryShowSelector() {\n\t\tthis._currentWidget.value?.showSelector();\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom';\nimport { Button } from '../../../../base/browser/ui/button/button';\nimport { toAction } from '../../../../base/common/actions';\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { Event } from '../../../../base/common/event';\nimport { Disposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle';\nimport './postEditWidget.css';\nimport { ContentWidgetPositionPreference, ICodeEditor, IContentWidget, IContentWidgetPosition } from '../../../browser/editorBrowser';\nimport { IBulkEditResult, IBulkEditService } from '../../../browser/services/bulkEditService';\nimport { Range } from '../../../common/core/range';\nimport { WorkspaceEdit } from '../../../common/languages';\nimport { TrackedRangeStickiness } from '../../../common/model';\nimport { createCombinedWorkspaceEdit } from './edit';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';\n\n\ninterface EditSet {\n\treadonly activeEditIndex: number;\n\treadonly allEdits: ReadonlyArray<{\n\t\treadonly label: string;\n\t\treadonly insertText: string | { readonly snippet: string };\n\t\treadonly additionalEdit?: WorkspaceEdit;\n\t}>;\n}\n\ninterface ShowCommand {\n\treadonly id: string;\n\treadonly label: string;\n}\n\nclass PostEditWidget extends Disposable implements IContentWidget {\n\tprivate static readonly baseId = 'editor.widget.postEditWidget';\n\n\treadonly allowEditorOverflow = true;\n\treadonly suppressMouseDown = true;\n\n\tprivate domNode!: HTMLElement;\n\tprivate button!: Button;\n\n\tprivate readonly visibleContext: IContextKey<boolean>;\n\n\tconstructor(\n\t\tprivate readonly typeId: string,\n\t\tprivate readonly editor: ICodeEditor,\n\t\tvisibleContext: RawContextKey<boolean>,\n\t\tprivate readonly showCommand: ShowCommand,\n\t\tprivate readonly range: Range,\n\t\tprivate readonly edits: EditSet,\n\t\tprivate readonly onSelectNewEdit: (editIndex: number) => void,\n\t\t@IContextMenuService private readonly _contextMenuService: IContextMenuService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t) {\n\t\tsuper();\n\n\t\tthis.create();\n\n\t\tthis.visibleContext = visibleContext.bindTo(contextKeyService);\n\t\tthis.visibleContext.set(true);\n\t\tthis._register(toDisposable(() => this.visibleContext.reset()));\n\n\t\tthis.editor.addContentWidget(this);\n\t\tthis.editor.layoutContentWidget(this);\n\n\t\tthis._register(toDisposable((() => this.editor.removeContentWidget(this))));\n\n\t\tthis._register(this.editor.onDidChangeCursorPosition(e => {\n\t\t\tif (!range.containsPosition(e.position)) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(Event.runAndSubscribe(_keybindingService.onDidUpdateKeybindings, () => {\n\t\t\tthis._updateButtonTitle();\n\t\t}));\n\t}\n\n\tprivate _updateButtonTitle() {\n\t\tconst binding = this._keybindingService.lookupKeybinding(this.showCommand.id)?.getLabel();\n\t\tthis.button.element.title = this.showCommand.label + (binding ? ` (${binding})` : '');\n\t}\n\n\tprivate create(): void {\n\t\tthis.domNode = dom.$('.post-edit-widget');\n\n\t\tthis.button = this._register(new Button(this.domNode, {\n\t\t\tsupportIcons: true,\n\t\t}));\n\t\tthis.button.label = '$(insert)';\n\n\t\tthis._register(dom.addDisposableListener(this.domNode, dom.EventType.CLICK, () => this.showSelector()));\n\t}\n\n\tgetId(): string {\n\t\treturn PostEditWidget.baseId + '.' + this.typeId;\n\t}\n\n\tgetDomNode(): HTMLElement {\n\t\treturn this.domNode;\n\t}\n\n\tgetPosition(): IContentWidgetPosition | null {\n\t\treturn {\n\t\t\tposition: this.range.getEndPosition(),\n\t\t\tpreference: [ContentWidgetPositionPreference.BELOW]\n\t\t};\n\t}\n\n\tshowSelector() {\n\t\tthis._contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => {\n\t\t\t\tconst pos = dom.getDomNodePagePosition(this.button.element);\n\t\t\t\treturn { x: pos.left + pos.width, y: pos.top + pos.height };\n\t\t\t},\n\t\t\tgetActions: () => {\n\t\t\t\treturn this.edits.allEdits.map((edit, i) => toAction({\n\t\t\t\t\tid: '',\n\t\t\t\t\tlabel: edit.label,\n\t\t\t\t\tchecked: i === this.edits.activeEditIndex,\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tif (i !== this.edits.activeEditIndex) {\n\t\t\t\t\t\t\treturn this.onSelectNewEdit(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t}));\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class PostEditWidgetManager extends Disposable {\n\n\tprivate readonly _currentWidget = this._register(new MutableDisposable<PostEditWidget>());\n\n\tconstructor(\n\t\tprivate readonly _id: string,\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _visibleContext: RawContextKey<boolean>,\n\t\tprivate readonly _showCommand: ShowCommand,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IBulkEditService private readonly _bulkEditService: IBulkEditService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(Event.any(\n\t\t\t_editor.onDidChangeModel,\n\t\t\t_editor.onDidChangeModelContent,\n\t\t)(() => this.clear()));\n\t}\n\n\tpublic async applyEditAndShowIfNeeded(ranges: readonly Range[], edits: EditSet, canShowWidget: boolean, token: CancellationToken) {\n\t\tconst model = this._editor.getModel();\n\t\tif (!model || !ranges.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst edit = edits.allEdits[edits.activeEditIndex];\n\t\tif (!edit) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, ranges, edit);\n\n\t\t// Use a decoration to track edits around the trigger range\n\t\tconst primaryRange = ranges[0];\n\t\tconst editTrackingDecoration = model.deltaDecorations([], [{\n\t\t\trange: primaryRange,\n\t\t\toptions: { description: 'paste-line-suffix', stickiness: TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges }\n\t\t}]);\n\n\t\tlet editResult: IBulkEditResult;\n\t\tlet editRange: Range | null;\n\t\ttry {\n\t\t\teditResult = await this._bulkEditService.apply(combinedWorkspaceEdit, { editor: this._editor, token });\n\t\t\teditRange = model.getDecorationRange(editTrackingDecoration[0]);\n\t\t} finally {\n\t\t\tmodel.deltaDecorations(editTrackingDecoration, []);\n\t\t}\n\n\t\tif (canShowWidget && editResult.isApplied && edits.allEdits.length > 1) {\n\t\t\tthis.show(editRange ?? primaryRange, edits, async (newEditIndex) => {\n\t\t\t\tconst model = this._editor.getModel();\n\t\t\t\tif (!model) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait model.undo();\n\t\t\t\tthis.applyEditAndShowIfNeeded(ranges, { activeEditIndex: newEditIndex, allEdits: edits.allEdits }, canShowWidget, token);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic show(range: Range, edits: EditSet, onDidSelectEdit: (newIndex: number) => void) {\n\t\tthis.clear();\n\n\t\tif (this._editor.hasModel()) {\n\t\t\tthis._currentWidget.value = this._instantiationService.createInstance(PostEditWidget, this._id, this._editor, this._visibleContext, this._showCommand, range, edits, onDidSelectEdit);\n\t\t}\n\t}\n\n\tpublic clear() {\n\t\tthis._currentWidget.clear();\n\t}\n\n\tpublic tryShowSelector() {\n\t\tthis._currentWidget.value?.showSelector();\n\t}\n}\n"]}