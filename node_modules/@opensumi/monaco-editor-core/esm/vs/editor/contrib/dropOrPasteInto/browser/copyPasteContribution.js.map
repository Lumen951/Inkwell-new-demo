{"version":3,"sources":["vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAIhG,wEAA4M;AAC5M,yEAAsE;AACtE,mEAAuE;AACvE,+DAA6G;AAC7G,yDAAkE;AAClE,uCAAuC;AAGvC,IAAA,6CAA0B,EAAC,yCAAmB,CAAC,EAAE,EAAE,yCAAmB,gDAAwC,CAAC,CAAC,6EAA6E;AAE7L,IAAA,sCAAqB,EAAC,+CAA4B,CAAC,CAAC;AAEpD,IAAA,wCAAqB,EAAC,IAAI,KAAM,SAAQ,gCAAa;IACpD;QACC,KAAK,CAAC;YACL,EAAE,EAAE,8CAAwB;YAC5B,YAAY,EAAE,2CAAqB;YACnC,MAAM,EAAE;gBACP,MAAM,0CAAgC;gBACtC,OAAO,EAAE,mDAA+B;aACxC;SACD,CAAC,CAAC;IACJ,CAAC;IAEe,gBAAgB,CAAC,SAAkC,EAAE,MAAmB,EAAE,KAAU;;QACnG,OAAO,MAAA,yCAAmB,CAAC,GAAG,CAAC,MAAM,CAAC,0CAAE,eAAe,EAAE,CAAC;IAC3D,CAAC;CACD,CAAC,CAAC;AAEH,IAAA,uCAAoB,EAAC,KAAM,SAAQ,+BAAY;IAC9C;QACC,KAAK,CAAC;YACL,EAAE,EAAE,uBAAuB;YAC3B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,kEAAS,EAAE,aAAa,CAAC;YAC7C,KAAK,EAAE,aAAa;YACpB,YAAY,EAAE,qCAAiB,CAAC,QAAQ;YACxC,QAAQ,EAAE;gBACT,WAAW,EAAE,UAAU;gBACvB,IAAI,EAAE,CAAC;wBACN,IAAI,EAAE,MAAM;wBACZ,MAAM,EAAE;4BACP,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACX,IAAI,EAAE;oCACL,IAAI,EAAE,QAAQ;oCACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,YAAY,EAAE,2FAA2F,CAAC;iCACpI;6BACD;yBACD;qBACD,CAAC;aACF;SACD,CAAC,CAAC;IACJ,CAAC;IAEe,GAAG,CAAC,SAA2B,EAAE,MAAmB,EAAE,IAAS;;QAC9E,MAAM,EAAE,GAAG,OAAO,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,CAAA,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QAC9D,OAAO,MAAA,yCAAmB,CAAC,GAAG,CAAC,MAAM,CAAC,0CAAE,OAAO,CAAC,EAAE,CAAC,CAAC;IACrD,CAAC;CACD,CAAC,CAAC;AAEH,IAAA,uCAAoB,EAAC,KAAM,SAAQ,+BAAY;IAC9C;QACC,KAAK,CAAC;YACL,EAAE,EAAE,2BAA2B;YAC/B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,eAAe,CAAC;YACnD,KAAK,EAAE,eAAe;YACtB,YAAY,EAAE,qCAAiB,CAAC,QAAQ;SACxC,CAAC,CAAC;IACJ,CAAC;IAEe,GAAG,CAAC,SAA2B,EAAE,MAAmB,EAAE,IAAS;;QAC9E,OAAO,MAAA,yCAAmB,CAAC,GAAG,CAAC,MAAM,CAAC,0CAAE,OAAO,CAAC,MAAM,CAAC,CAAC;IACzD,CAAC;CACD,CAAC,CAAC","file":"copyPasteContribution.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { EditorAction, EditorCommand, EditorContributionInstantiation, ServicesAccessor, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions';\nimport { EditorContextKeys } from '../../../common/editorContextKeys';\nimport { registerEditorFeature } from '../../../common/editorFeatures';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController';\nimport { DefaultPasteProvidersFeature } from './defaultProviders';\nimport * as nls from '../../../../nls';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry';\n\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, EditorContributionInstantiation.Eager); // eager because it listens to events on the container dom node of the editor\n\nregisterEditorFeature(DefaultPasteProvidersFeature);\n\nregisterEditorCommand(new class extends EditorCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: changePasteTypeCommandId,\n\t\t\tprecondition: pasteWidgetVisibleCtx,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Period,\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override runEditorCommand(_accessor: ServicesAccessor | null, editor: ICodeEditor, _args: any) {\n\t\treturn CopyPasteController.get(editor)?.changePasteType();\n\t}\n});\n\nregisterEditorAction(class extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.pasteAs',\n\t\t\tlabel: nls.localize('pasteAs', \"Paste As...\"),\n\t\t\talias: 'Paste As...',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: 'Paste as',\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: {\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t'id': {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('pasteAs.id', \"The id of the paste edit to try applying. If not provided, the editor will show a picker.\"),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override run(_accessor: ServicesAccessor, editor: ICodeEditor, args: any) {\n\t\tconst id = typeof args?.id === 'string' ? args.id : undefined;\n\t\treturn CopyPasteController.get(editor)?.pasteAs(id);\n\t}\n});\n\nregisterEditorAction(class extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.pasteAsText',\n\t\t\tlabel: nls.localize('pasteAsText', \"Paste as Text\"),\n\t\t\talias: 'Paste as Text',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tpublic override run(_accessor: ServicesAccessor, editor: ICodeEditor, args: any) {\n\t\treturn CopyPasteController.get(editor)?.pasteAs('text');\n\t}\n});\n"]}