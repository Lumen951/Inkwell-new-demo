{"version":3,"sources":["vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAIhG,wEAAwK;AACxK,gGAA+F;AAC/F,mEAAuE;AACvE,yDAAiE;AACjE,uCAAuC;AACvC,2GAAoK;AAEpK,4EAAyE;AACzE,yEAA4I;AAE5I,IAAA,6CAA0B,EAAC,mDAAwB,CAAC,EAAE,EAAE,mDAAwB,iEAAyD,CAAC;AAE1I,IAAA,wCAAqB,EAAC,IAAI,KAAM,SAAQ,gCAAa;IACpD;QACC,KAAK,CAAC;YACL,EAAE,EAAE,kDAAuB;YAC3B,YAAY,EAAE,+CAAoB;YAClC,MAAM,EAAE;gBACP,MAAM,0CAAgC;gBACtC,OAAO,EAAE,mDAA+B;aACxC;SACD,CAAC,CAAC;IACJ,CAAC;IAEe,gBAAgB,CAAC,SAAkC,EAAE,MAAmB,EAAE,KAAU;;QACnG,MAAA,mDAAwB,CAAC,GAAG,CAAC,MAAM,CAAC,0CAAE,cAAc,EAAE,CAAC;IACxD,CAAC;CACD,CAAC,CAAC;AAEH,IAAA,sCAAqB,EAAC,8CAA2B,CAAC,CAAC;AAEnD,mBAAQ,CAAC,EAAE,CAAyB,kCAAuB,CAAC,aAAa,CAAC,CAAC,qBAAqB,CAAC;IAChG,GAAG,uDAA2B;IAC9B,UAAU,EAAE;QACX,CAAC,gDAAqB,CAAC,EAAE;YACxB,IAAI,EAAE,QAAQ;YACd,KAAK,iDAAyC;YAC9C,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,uEAA4B,EAAE,+EAA+E,CAAC;YACxI,OAAO,EAAE,EAAE;YACX,oBAAoB,EAAE;gBACrB,IAAI,EAAE,QAAQ;aACd;SACD;KACD;CACD,CAAC,CAAC","file":"dropIntoEditorContribution.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { EditorCommand, EditorContributionInstantiation, ServicesAccessor, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions';\nimport { editorConfigurationBaseNode } from '../../../common/config/editorConfigurationSchema';\nimport { registerEditorFeature } from '../../../common/editorFeatures';\nimport { DefaultDropProvidersFeature } from './defaultProviders';\nimport * as nls from '../../../../nls';\nimport { Extensions as ConfigurationExtensions, ConfigurationScope, IConfigurationRegistry } from '../../../../platform/configuration/common/configurationRegistry';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry';\nimport { Registry } from '../../../../platform/registry/common/platform';\nimport { DropIntoEditorController, changeDropTypeCommandId, defaultProviderConfig, dropWidgetVisibleCtx } from './dropIntoEditorController';\n\nregisterEditorContribution(DropIntoEditorController.ID, DropIntoEditorController, EditorContributionInstantiation.BeforeFirstInteraction);\n\nregisterEditorCommand(new class extends EditorCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: changeDropTypeCommandId,\n\t\t\tprecondition: dropWidgetVisibleCtx,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Period,\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override runEditorCommand(_accessor: ServicesAccessor | null, editor: ICodeEditor, _args: any) {\n\t\tDropIntoEditorController.get(editor)?.changeDropType();\n\t}\n});\n\nregisterEditorFeature(DefaultDropProvidersFeature);\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({\n\t...editorConfigurationBaseNode,\n\tproperties: {\n\t\t[defaultProviderConfig]: {\n\t\t\ttype: 'object',\n\t\t\tscope: ConfigurationScope.LANGUAGE_OVERRIDABLE,\n\t\t\tdescription: nls.localize('defaultProviderDescription', \"Configures the default drop provider to use for content of a given mime type.\"),\n\t\t\tdefault: {},\n\t\t\tadditionalProperties: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t},\n\t}\n});\n"]}