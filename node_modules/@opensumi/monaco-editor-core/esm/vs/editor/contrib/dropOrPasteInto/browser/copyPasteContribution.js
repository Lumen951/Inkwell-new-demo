"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const editorExtensions_1 = require("../../../browser/editorExtensions");
const editorContextKeys_1 = require("../../../common/editorContextKeys");
const editorFeatures_1 = require("../../../common/editorFeatures");
const copyPasteController_1 = require("./copyPasteController");
const defaultProviders_1 = require("./defaultProviders");
const nls = require("../../../../nls");
(0, editorExtensions_1.registerEditorContribution)(copyPasteController_1.CopyPasteController.ID, copyPasteController_1.CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor
(0, editorFeatures_1.registerEditorFeature)(defaultProviders_1.DefaultPasteProvidersFeature);
(0, editorExtensions_1.registerEditorCommand)(new class extends editorExtensions_1.EditorCommand {
    constructor() {
        super({
            id: copyPasteController_1.changePasteTypeCommandId,
            precondition: copyPasteController_1.pasteWidgetVisibleCtx,
            kbOpts: {
                weight: 100 /* KeybindingWeight.EditorContrib */,
                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,
            }
        });
    }
    runEditorCommand(_accessor, editor, _args) {
        var _a;
        return (_a = copyPasteController_1.CopyPasteController.get(editor)) === null || _a === void 0 ? void 0 : _a.changePasteType();
    }
});
(0, editorExtensions_1.registerEditorAction)(class extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.pasteAs',
            label: nls.localize("vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution",0, "Paste As..."),
            alias: 'Paste As...',
            precondition: editorContextKeys_1.EditorContextKeys.writable,
            metadata: {
                description: 'Paste as',
                args: [{
                        name: 'args',
                        schema: {
                            type: 'object',
                            properties: {
                                'id': {
                                    type: 'string',
                                    description: nls.localize("vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution",1, "The id of the paste edit to try applying. If not provided, the editor will show a picker."),
                                }
                            },
                        }
                    }]
            }
        });
    }
    run(_accessor, editor, args) {
        var _a;
        const id = typeof (args === null || args === void 0 ? void 0 : args.id) === 'string' ? args.id : undefined;
        return (_a = copyPasteController_1.CopyPasteController.get(editor)) === null || _a === void 0 ? void 0 : _a.pasteAs(id);
    }
});
(0, editorExtensions_1.registerEditorAction)(class extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.pasteAsText',
            label: nls.localize("vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution",2, "Paste as Text"),
            alias: 'Paste as Text',
            precondition: editorContextKeys_1.EditorContextKeys.writable,
        });
    }
    run(_accessor, editor, args) {
        var _a;
        return (_a = copyPasteController_1.CopyPasteController.get(editor)) === null || _a === void 0 ? void 0 : _a.pasteAs('text');
    }
});
//# sourceMappingURL=copyPasteContribution.js.map