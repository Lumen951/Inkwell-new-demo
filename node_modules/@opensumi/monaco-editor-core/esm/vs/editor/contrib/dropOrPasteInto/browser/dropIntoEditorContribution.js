"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const editorExtensions_1 = require("../../../browser/editorExtensions");
const editorConfigurationSchema_1 = require("../../../common/config/editorConfigurationSchema");
const editorFeatures_1 = require("../../../common/editorFeatures");
const defaultProviders_1 = require("./defaultProviders");
const nls = require("../../../../nls");
const configurationRegistry_1 = require("../../../../platform/configuration/common/configurationRegistry");
const platform_1 = require("../../../../platform/registry/common/platform");
const dropIntoEditorController_1 = require("./dropIntoEditorController");
(0, editorExtensions_1.registerEditorContribution)(dropIntoEditorController_1.DropIntoEditorController.ID, dropIntoEditorController_1.DropIntoEditorController, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);
(0, editorExtensions_1.registerEditorCommand)(new class extends editorExtensions_1.EditorCommand {
    constructor() {
        super({
            id: dropIntoEditorController_1.changeDropTypeCommandId,
            precondition: dropIntoEditorController_1.dropWidgetVisibleCtx,
            kbOpts: {
                weight: 100 /* KeybindingWeight.EditorContrib */,
                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,
            }
        });
    }
    runEditorCommand(_accessor, editor, _args) {
        var _a;
        (_a = dropIntoEditorController_1.DropIntoEditorController.get(editor)) === null || _a === void 0 ? void 0 : _a.changeDropType();
    }
});
(0, editorFeatures_1.registerEditorFeature)(defaultProviders_1.DefaultDropProvidersFeature);
platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).registerConfiguration({
    ...editorConfigurationSchema_1.editorConfigurationBaseNode,
    properties: {
        [dropIntoEditorController_1.defaultProviderConfig]: {
            type: 'object',
            scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,
            description: nls.localize("vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution",0, "Configures the default drop provider to use for content of a given mime type."),
            default: {},
            additionalProperties: {
                type: 'string',
            },
        },
    }
});
//# sourceMappingURL=dropIntoEditorContribution.js.map