import { CancellationToken } from '../../../../base/common/cancellation';
import { Disposable } from '../../../../base/common/lifecycle';
import './postEditWidget.css';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { IBulkEditService } from '../../../browser/services/bulkEditService';
import { Range } from '../../../common/core/range';
import { WorkspaceEdit } from '../../../common/languages';
import { RawContextKey } from '../../../../platform/contextkey/common/contextkey';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
interface EditSet {
    readonly activeEditIndex: number;
    readonly allEdits: ReadonlyArray<{
        readonly label: string;
        readonly insertText: string | {
            readonly snippet: string;
        };
        readonly additionalEdit?: WorkspaceEdit;
    }>;
}
interface ShowCommand {
    readonly id: string;
    readonly label: string;
}
export declare class PostEditWidgetManager extends Disposable {
    private readonly _id;
    private readonly _editor;
    private readonly _visibleContext;
    private readonly _showCommand;
    private readonly _instantiationService;
    private readonly _bulkEditService;
    private readonly _currentWidget;
    constructor(_id: string, _editor: ICodeEditor, _visibleContext: RawContextKey<boolean>, _showCommand: ShowCommand, _instantiationService: IInstantiationService, _bulkEditService: IBulkEditService);
    applyEditAndShowIfNeeded(ranges: readonly Range[], edits: EditSet, canShowWidget: boolean, token: CancellationToken): Promise<void>;
    show(range: Range, edits: EditSet, onDidSelectEdit: (newIndex: number) => void): void;
    clear(): void;
    tryShowSelector(): void;
}
export {};
