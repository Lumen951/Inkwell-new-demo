"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultPasteProvidersFeature = exports.DefaultDropProvidersFeature = void 0;
const arrays_1 = require("../../../../base/common/arrays");
const dataTransfer_1 = require("../../../../base/common/dataTransfer");
const lifecycle_1 = require("../../../../base/common/lifecycle");
const mime_1 = require("../../../../base/common/mime");
const network_1 = require("../../../../base/common/network");
const resources_1 = require("../../../../base/common/resources");
const uri_1 = require("../../../../base/common/uri");
const languageFeatures_1 = require("../../../common/services/languageFeatures");
const nls_1 = require("../../../../nls");
const workspace_1 = require("../../../../platform/workspace/common/workspace");
const builtInLabel = (0, nls_1.localize)("vs/editor/contrib/dropOrPasteInto/browser/defaultProviders",0, 'Built-in');
class SimplePasteAndDropProvider {
    async provideDocumentPasteEdits(_model, _ranges, dataTransfer, context, token) {
        const edit = await this.getEdit(dataTransfer, token);
        return edit ? { insertText: edit.insertText, label: edit.label, detail: edit.detail, handledMimeType: edit.handledMimeType, yieldTo: edit.yieldTo } : undefined;
    }
    async provideDocumentOnDropEdits(_model, _position, dataTransfer, token) {
        const edit = await this.getEdit(dataTransfer, token);
        return edit ? { insertText: edit.insertText, label: edit.label, handledMimeType: edit.handledMimeType, yieldTo: edit.yieldTo } : undefined;
    }
}
class DefaultTextProvider extends SimplePasteAndDropProvider {
    constructor() {
        super(...arguments);
        this.id = 'text';
        this.dropMimeTypes = [mime_1.Mimes.text];
        this.pasteMimeTypes = [mime_1.Mimes.text];
    }
    async getEdit(dataTransfer, _token) {
        const textEntry = dataTransfer.get(mime_1.Mimes.text);
        if (!textEntry) {
            return;
        }
        // Suppress if there's also a uriList entry.
        // Typically the uri-list contains the same text as the text entry so showing both is confusing.
        if (dataTransfer.has(mime_1.Mimes.uriList)) {
            return;
        }
        const insertText = await textEntry.asString();
        return {
            handledMimeType: mime_1.Mimes.text,
            label: (0, nls_1.localize)("vs/editor/contrib/dropOrPasteInto/browser/defaultProviders",1, "Insert Plain Text"),
            detail: builtInLabel,
            insertText
        };
    }
}
class PathProvider extends SimplePasteAndDropProvider {
    constructor() {
        super(...arguments);
        this.id = 'uri';
        this.dropMimeTypes = [mime_1.Mimes.uriList];
        this.pasteMimeTypes = [mime_1.Mimes.uriList];
    }
    async getEdit(dataTransfer, token) {
        const entries = await extractUriList(dataTransfer);
        if (!entries.length || token.isCancellationRequested) {
            return;
        }
        let uriCount = 0;
        const insertText = entries
            .map(({ uri, originalText }) => {
            if (uri.scheme === network_1.Schemas.file) {
                return uri.fsPath;
            }
            else {
                uriCount++;
                return originalText;
            }
        })
            .join(' ');
        let label;
        if (uriCount > 0) {
            // Dropping at least one generic uri (such as https) so use most generic label
            label = entries.length > 1
                ? (0, nls_1.localize)("vs/editor/contrib/dropOrPasteInto/browser/defaultProviders",2, "Insert Uris")
                : (0, nls_1.localize)("vs/editor/contrib/dropOrPasteInto/browser/defaultProviders",3, "Insert Uri");
        }
        else {
            // All the paths are file paths
            label = entries.length > 1
                ? (0, nls_1.localize)("vs/editor/contrib/dropOrPasteInto/browser/defaultProviders",4, "Insert Paths")
                : (0, nls_1.localize)("vs/editor/contrib/dropOrPasteInto/browser/defaultProviders",5, "Insert Path");
        }
        return {
            handledMimeType: mime_1.Mimes.uriList,
            insertText,
            label,
            detail: builtInLabel,
        };
    }
}
let RelativePathProvider = class RelativePathProvider extends SimplePasteAndDropProvider {
    constructor(_workspaceContextService) {
        super();
        this._workspaceContextService = _workspaceContextService;
        this.id = 'relativePath';
        this.dropMimeTypes = [mime_1.Mimes.uriList];
        this.pasteMimeTypes = [mime_1.Mimes.uriList];
    }
    async getEdit(dataTransfer, token) {
        const entries = await extractUriList(dataTransfer);
        if (!entries.length || token.isCancellationRequested) {
            return;
        }
        const relativeUris = (0, arrays_1.coalesce)(entries.map(({ uri }) => {
            const root = this._workspaceContextService.getWorkspaceFolder(uri);
            return root ? (0, resources_1.relativePath)(root.uri, uri) : undefined;
        }));
        if (!relativeUris.length) {
            return;
        }
        return {
            handledMimeType: mime_1.Mimes.uriList,
            insertText: relativeUris.join(' '),
            label: entries.length > 1
                ? (0, nls_1.localize)("vs/editor/contrib/dropOrPasteInto/browser/defaultProviders",6, "Insert Relative Paths")
                : (0, nls_1.localize)("vs/editor/contrib/dropOrPasteInto/browser/defaultProviders",7, "Insert Relative Path"),
            detail: builtInLabel,
        };
    }
};
RelativePathProvider = __decorate([
    __param(0, workspace_1.IWorkspaceContextService)
], RelativePathProvider);
class PasteHtmlProvider {
    constructor() {
        this.id = 'html';
        this.pasteMimeTypes = ['text/html'];
        this._yieldTo = [{ mimeType: mime_1.Mimes.text }];
    }
    async provideDocumentPasteEdits(_model, _ranges, dataTransfer, context, token) {
        if (context.trigger !== 'explicit' && context.only !== this.id) {
            return;
        }
        const entry = dataTransfer.get('text/html');
        const htmlText = await (entry === null || entry === void 0 ? void 0 : entry.asString());
        if (!htmlText || token.isCancellationRequested) {
            return;
        }
        return {
            insertText: htmlText,
            yieldTo: this._yieldTo,
            label: (0, nls_1.localize)("vs/editor/contrib/dropOrPasteInto/browser/defaultProviders",8, 'Insert HTML'),
            detail: builtInLabel,
        };
    }
}
async function extractUriList(dataTransfer) {
    const urlListEntry = dataTransfer.get(mime_1.Mimes.uriList);
    if (!urlListEntry) {
        return [];
    }
    const strUriList = await urlListEntry.asString();
    const entries = [];
    for (const entry of dataTransfer_1.UriList.parse(strUriList)) {
        try {
            entries.push({ uri: uri_1.URI.parse(entry), originalText: entry });
        }
        catch (_a) {
            // noop
        }
    }
    return entries;
}
let DefaultDropProvidersFeature = class DefaultDropProvidersFeature extends lifecycle_1.Disposable {
    constructor(languageFeaturesService, workspaceContextService) {
        super();
        this._register(languageFeaturesService.documentOnDropEditProvider.register('*', new DefaultTextProvider()));
        this._register(languageFeaturesService.documentOnDropEditProvider.register('*', new PathProvider()));
        this._register(languageFeaturesService.documentOnDropEditProvider.register('*', new RelativePathProvider(workspaceContextService)));
    }
};
exports.DefaultDropProvidersFeature = DefaultDropProvidersFeature;
exports.DefaultDropProvidersFeature = DefaultDropProvidersFeature = __decorate([
    __param(0, languageFeatures_1.ILanguageFeaturesService),
    __param(1, workspace_1.IWorkspaceContextService)
], DefaultDropProvidersFeature);
let DefaultPasteProvidersFeature = class DefaultPasteProvidersFeature extends lifecycle_1.Disposable {
    constructor(languageFeaturesService, workspaceContextService) {
        super();
        this._register(languageFeaturesService.documentPasteEditProvider.register('*', new DefaultTextProvider()));
        this._register(languageFeaturesService.documentPasteEditProvider.register('*', new PathProvider()));
        this._register(languageFeaturesService.documentPasteEditProvider.register('*', new RelativePathProvider(workspaceContextService)));
        this._register(languageFeaturesService.documentPasteEditProvider.register('*', new PasteHtmlProvider()));
    }
};
exports.DefaultPasteProvidersFeature = DefaultPasteProvidersFeature;
exports.DefaultPasteProvidersFeature = DefaultPasteProvidersFeature = __decorate([
    __param(0, languageFeatures_1.ILanguageFeaturesService),
    __param(1, workspace_1.IWorkspaceContextService)
], DefaultPasteProvidersFeature);
//# sourceMappingURL=defaultProviders.js.map