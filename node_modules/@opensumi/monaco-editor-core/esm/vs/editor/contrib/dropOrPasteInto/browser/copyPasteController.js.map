{"version":3,"sources":["vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;;;;;;;;;;;AAEhG,sDAAwF;AACxF,2DAA0D;AAC1D,yDAA6G;AAE7G,uEAA8H;AAC9H,iEAA+D;AAC/D,uDAAqD;AACrD,6DAA6D;AAC7D,uDAA4D;AAC5D,6EAAgF;AAChF,8CAAkF;AAElF,+EAA6E;AAE7E,sDAA2D;AAK3D,gFAAqF;AACrF,iCAAyE;AACzE,uEAAgH;AAChH,gFAAoF;AACpF,yCAA2C;AAC3C,6FAA2F;AAC3F,kFAAkF;AAClF,2FAAgG;AAChG,4EAAmG;AACnG,kFAAuG;AACvG,qDAAyD;AACzD,+EAA4E;AAE/D,QAAA,wBAAwB,GAAG,wBAAwB,CAAC;AAEpD,QAAA,qBAAqB,GAAG,IAAI,0BAAa,CAAU,oBAAoB,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,gEAAoB,EAAE,qCAAqC,CAAC,CAAC,CAAC;AAEpK,MAAM,mBAAmB,GAAG,mCAAmC,CAAC;AASzD,IAAM,mBAAmB,2BAAzB,MAAM,mBAAoB,SAAQ,sBAAU;IAI3C,MAAM,CAAC,GAAG,CAAC,MAAmB;QACpC,OAAO,MAAM,CAAC,eAAe,CAAsB,qBAAmB,CAAC,EAAE,CAAC,CAAC;IAC5E,CAAC;IAeD,YACC,MAAmB,EACI,oBAA2C,EAC/B,gBAAkC,EACjC,iBAAoC,EAC7B,wBAAkD,EACxD,kBAAsC,EACxC,gBAAkC;QAErE,KAAK,EAAE,CAAC;QAN2B,qBAAgB,GAAhB,gBAAgB,CAAkB;QACjC,sBAAiB,GAAjB,iBAAiB,CAAmB;QAC7B,6BAAwB,GAAxB,wBAAwB,CAA0B;QACxD,uBAAkB,GAAlB,kBAAkB,CAAoB;QACxC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAIrE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,MAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;QAC/C,IAAI,CAAC,SAAS,CAAC,IAAA,2BAAqB,EAAC,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClF,IAAI,CAAC,SAAS,CAAC,IAAA,2BAAqB,EAAC,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjF,IAAI,CAAC,SAAS,CAAC,IAAA,2BAAqB,EAAC,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QAE1F,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,sCAAqB,CAAC,iBAAiB,EAAE,MAAM,EAAE,oBAAoB,CAAC,CAAC,CAAC;QAExH,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,cAAc,CAAC,sCAAqB,EAAE,iBAAiB,EAAE,MAAM,EAAE,6BAAqB,EAAE,EAAE,EAAE,EAAE,gCAAwB,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,sBAAsB,EAAE,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;IACjQ,CAAC;IAEM,eAAe;QACrB,IAAI,CAAC,uBAAuB,CAAC,eAAe,EAAE,CAAC;IAChD,CAAC;IAEM,OAAO,CAAC,WAAoB;QAClC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC;YACJ,IAAI,CAAC,qBAAqB,GAAG,EAAE,WAAW,EAAE,CAAC;YAC7C,IAAA,uBAAiB,GAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC;gBAAS,CAAC;YACV,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;QACxC,CAAC;IACF,CAAC;IAEM,YAAY;QAClB,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,CAAC;IACtC,CAAC;IAEO,gBAAgB;QACvB,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,+BAAsB,CAAC,OAAO;eACvD,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,gCAAuB,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,aAAa;QACzB,MAAM,IAAI,CAAC,sBAAsB,CAAC;IACnC,CAAC;IAEO,UAAU,CAAC,CAAiB;;QACnC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;YAClC,OAAO;QACR,CAAC;QAED,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;YACpB,gDAAgD;YAChD,8FAA8F;YAC9F,2FAA2F;YAC3F,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAC3C,CAAC;QAED,IAAI,CAAC,CAAC,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC;YAClD,OAAO;QACR,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACtC,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;QAChD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,CAAA,EAAE,CAAC;YACnC,OAAO;QACR,CAAC;QAED,MAAM,6BAA6B,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,+CAAsC,CAAC;QAEnG,IAAI,MAAM,GAAsB,UAAU,CAAC;QAC3C,MAAM,qBAAqB,GAAG,UAAU,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACjF,IAAI,qBAAqB,EAAE,CAAC;YAC3B,IAAI,CAAC,6BAA6B,EAAE,CAAC;gBACpC,OAAO;YACR,CAAC;YAED,MAAM,GAAG,CAAC,IAAI,aAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,GAAG,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACnI,CAAC;QAED,MAAM,MAAM,GAAG,MAAA,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,0CAAE,kBAAkB,CAAC,UAAU,EAAE,6BAA6B,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC/H,MAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;QAE9D,MAAM,mBAAmB,GAAG;YAC3B,eAAe;YACf,cAAc,EAAE,qBAAqB;YACrC,IAAI,EAAE,IAAI;SACV,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,wBAAwB,CAAC,yBAAyB;aACvE,OAAO,CAAC,KAAK,CAAC;aACd,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC;QACxC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;YACvB,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,aAAa,EAAE,EAAE,mBAAmB,EAAE,CAAC,CAAC;YAC/D,OAAO;QACR,CAAC;QAED,MAAM,YAAY,GAAG,IAAA,sBAAgB,EAAC,CAAC,CAAC,aAAa,CAAC,CAAC;QACvD,MAAM,qBAAqB,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,WAAC,OAAA,MAAA,CAAC,CAAC,aAAa,mCAAI,EAAE,CAAA,EAAA,CAAC,CAAC;QAE5E,6DAA6D;QAC7D,MAAM,MAAM,GAAG,IAAA,mBAAY,GAAE,CAAC;QAC9B,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,aAAa,EAAE;YACrC,EAAE,EAAE,MAAM;YACV,qBAAqB;YACrB,mBAAmB;SACnB,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,IAAA,+BAAuB,EAAC,KAAK,EAAC,KAAK,EAAC,EAAE;YACrD,MAAM,OAAO,GAAG,IAAA,iBAAQ,EAAC,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAC,QAAQ,EAAC,EAAE;gBACzE,IAAI,CAAC;oBACJ,OAAO,MAAM,QAAQ,CAAC,oBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;gBACjF,CAAC;gBAAC,OAAO,GAAG,EAAE,CAAC;oBACd,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBACnB,OAAO,SAAS,CAAC;gBAClB,CAAC;YACF,CAAC,CAAC,CAAC,CAAC,CAAC;YAEL,0FAA0F;YAC1F,yEAAyE;YACzE,OAAO,CAAC,OAAO,EAAE,CAAC;YAElB,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;gBAC9B,KAAK,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,MAAM,EAAE,CAAC;oBACpC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBACnC,CAAC;YACF,CAAC;YAED,OAAO,YAAY,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,MAAA,IAAI,CAAC,qBAAqB,0CAAE,mBAAmB,CAAC,MAAM,EAAE,CAAC;QACzD,IAAI,CAAC,qBAAqB,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC;IAC/E,CAAC;IAEO,KAAK,CAAC,WAAW,CAAC,CAAiB;;QAC1C,IAAI,CAAC,CAAC,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;YACtD,OAAO;QACR,CAAC;QAED,MAAA,qCAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,0CAAE,YAAY,EAAE,CAAC;QACpD,MAAA,IAAI,CAAC,sBAAsB,0CAAE,MAAM,EAAE,CAAC;QACtC,IAAI,CAAC,sBAAsB,GAAG,SAAS,CAAC;QAExC,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACtC,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;QAChD,IAAI,CAAC,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,CAAA,IAAI,CAAC,KAAK,EAAE,CAAC;YACnC,OAAO;QACR,CAAC;QAED,IACC,CAAC,IAAI,CAAC,gBAAgB,EAAE;eACrB,CAAC,IAAI,CAAC,qBAAqB,CAAC,oDAAoD;UAClF,CAAC;YACF,OAAO;QACR,CAAC;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,YAAY,GAAG,IAAA,8BAAwB,EAAC,CAAC,CAAC,aAAa,CAAC,CAAC;QAC/D,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAEzC,MAAM,qBAAqB,GAAG;YAC7B,GAAG,CAAC,CAAC,aAAa,CAAC,KAAK;YACxB,GAAG,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,qBAAqB,mCAAI,EAAE;YACxC,oGAAoG;YACpG,8FAA8F;YAC9F,6EAA6E;YAC7E,YAAK,CAAC,OAAO;SACb,CAAC;QAEF,MAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,yBAAyB;aAC1E,OAAO,CAAC,KAAK,CAAC;aACd,MAAM,CAAC,QAAQ,CAAC,EAAE;;YAClB,IAAI,MAAA,IAAI,CAAC,qBAAqB,0CAAE,WAAW,EAAE,CAAC;gBAC7C,IAAI,IAAI,CAAC,qBAAqB,CAAC,WAAW,KAAK,QAAQ,CAAC,EAAE,EAAE,CAAC;oBAC5D,OAAO,KAAK,CAAC;gBACd,CAAC;YACF,CAAC;YAED,OAAO,MAAA,QAAQ,CAAC,cAAc,0CAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAA,8BAAe,EAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;QACJ,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YAC1B,IAAI,MAAA,IAAI,CAAC,qBAAqB,0CAAE,WAAW,EAAE,CAAC;gBAC7C,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,MAAA,IAAI,CAAC,qBAAqB,0CAAE,WAAW,CAAC,CAAC;YACpF,CAAC;YACD,OAAO;QACR,CAAC;QAED,2DAA2D;QAC3D,2EAA2E;QAC3E,0GAA0G;QAC1G,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,CAAC,CAAC,wBAAwB,EAAE,CAAC;QAE7B,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAChC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,EAAE,YAAY,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC,CAAC;QACvL,CAAC;aAAM,CAAC;YACP,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,UAAU,EAAE,YAAY,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;QAC/F,CAAC;IACF,CAAC;IAEO,wBAAwB,CAAC,UAAgC,EAAE,MAAc;;QAChF,MAAA,qCAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,0CAAE,WAAW,CAAC,IAAA,cAAQ,EAAC,cAAc,EAAE,gCAAgC,EAAE,MAAM,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC,CAAC;IACxJ,CAAC;IAEO,aAAa,CAAC,YAAkD,EAAE,UAAgC,EAAE,YAA4B,EAAE,QAAkC,EAAE,OAA6B;QAC1M,MAAM,CAAC,GAAG,IAAA,+BAAuB,EAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACjD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;gBACxB,OAAO;YACR,CAAC;YACD,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAEhC,MAAM,WAAW,GAAG,IAAI,gDAAkC,CAAC,MAAM,EAAE,yEAAyD,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;YAChJ,IAAI,CAAC;gBACJ,MAAM,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,QAAQ,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;gBAC1E,IAAI,WAAW,CAAC,KAAK,CAAC,uBAAuB,EAAE,CAAC;oBAC/C,OAAO;gBACR,CAAC;gBAED,qFAAqF;gBACrF,MAAM,kBAAkB,GAAG,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,wBAAwB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;gBAC7G,IAAI,CAAC,kBAAkB,CAAC,MAAM;uBAC1B,CAAC,kBAAkB,CAAC,MAAM,KAAK,CAAC,IAAI,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC,2CAA2C;kBACtH,CAAC;oBACF,MAAM,IAAI,CAAC,wBAAwB,CAAC,YAAY,EAAE,QAAQ,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;oBAC/E,OAAO;gBACR,CAAC;gBAED,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;gBAChI,IAAI,WAAW,CAAC,KAAK,CAAC,uBAAuB,EAAE,CAAC;oBAC/C,OAAO;gBACR,CAAC;gBAED,0EAA0E;gBAC1E,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,UAAU,KAAK,MAAM,EAAE,CAAC;oBAC1E,MAAM,IAAI,CAAC,wBAAwB,CAAC,YAAY,EAAE,QAAQ,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;oBAC/E,OAAO;gBACR,CAAC;gBAED,IAAI,aAAa,CAAC,MAAM,EAAE,CAAC;oBAC1B,MAAM,aAAa,GAAG,MAAM,CAAC,SAAS,+BAAsB,CAAC,iBAAiB,KAAK,YAAY,CAAC;oBAChG,OAAO,IAAI,CAAC,uBAAuB,CAAC,wBAAwB,CAAC,UAAU,EAAE,EAAE,eAAe,EAAE,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,EAAE,aAAa,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;gBAC7J,CAAC;gBAED,MAAM,IAAI,CAAC,wBAAwB,CAAC,YAAY,EAAE,QAAQ,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;YAChF,CAAC;oBAAS,CAAC;gBACV,WAAW,CAAC,OAAO,EAAE,CAAC;gBACtB,IAAI,IAAI,CAAC,sBAAsB,KAAK,CAAC,EAAE,CAAC;oBACvC,IAAI,CAAC,sBAAsB,GAAG,SAAS,CAAC;gBACzC,CAAC;YACF,CAAC;QACF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,EAAE,IAAA,cAAQ,EAAC,yBAAyB,EAAE,yCAAyC,CAAC,EAAE,CAAC,CAAC,CAAC;QACxJ,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC;IACjC,CAAC;IAEO,eAAe,CAAC,WAA+B,EAAE,YAAkD,EAAE,UAAgC,EAAE,YAA4B,EAAE,QAAkC,EAAE,OAA6B;QAC7O,MAAM,CAAC,GAAG,IAAA,+BAAuB,EAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACjD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;gBACxB,OAAO;YACR,CAAC;YACD,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAEhC,MAAM,WAAW,GAAG,IAAI,gDAAkC,CAAC,MAAM,EAAE,yEAAyD,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;YAChJ,IAAI,CAAC;gBACJ,MAAM,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,QAAQ,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;gBAC1E,IAAI,WAAW,CAAC,KAAK,CAAC,uBAAuB,EAAE,CAAC;oBAC/C,OAAO;gBACR,CAAC;gBAED,qFAAqF;gBACrF,IAAI,kBAAkB,GAAG,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,wBAAwB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;gBAC3G,IAAI,WAAW,EAAE,CAAC;oBACjB,qCAAqC;oBACrC,kBAAkB,GAAG,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,WAAW,CAAC,CAAC;gBACjF,CAAC;gBAED,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;gBAChI,IAAI,WAAW,CAAC,KAAK,CAAC,uBAAuB,EAAE,CAAC;oBAC/C,OAAO;gBACR,CAAC;gBAED,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;oBAC3B,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;wBAClB,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;oBACzD,CAAC;oBACD,OAAO;gBACR,CAAC;gBAED,IAAI,UAAyC,CAAC;gBAC9C,IAAI,WAAW,EAAE,CAAC;oBACjB,UAAU,GAAG,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAClC,CAAC;qBAAM,CAAC;oBACP,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAClD,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,EAAgD,EAAE,CAAC,CAAC;wBAC1E,KAAK,EAAE,IAAI,CAAC,KAAK;wBACjB,WAAW,EAAE,IAAI,CAAC,UAAU;wBAC5B,MAAM,EAAE,IAAI,CAAC,MAAM;wBACnB,IAAI;qBACJ,CAAC,CAAC,EAAE;wBACL,WAAW,EAAE,IAAA,cAAQ,EAAC,0BAA0B,EAAE,qBAAqB,CAAC;qBACxE,CAAC,CAAC;oBACH,UAAU,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,IAAI,CAAC;gBAC7B,CAAC;gBAED,IAAI,CAAC,UAAU,EAAE,CAAC;oBACjB,OAAO;gBACR,CAAC;gBAED,MAAM,qBAAqB,GAAG,IAAA,kCAA2B,EAAC,KAAK,CAAC,GAAG,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;gBAC7F,MAAM,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YACpF,CAAC;oBAAS,CAAC;gBACV,WAAW,CAAC,OAAO,EAAE,CAAC;gBACtB,IAAI,IAAI,CAAC,sBAAsB,KAAK,CAAC,EAAE,CAAC;oBACvC,IAAI,CAAC,sBAAsB,GAAG,SAAS,CAAC;gBACzC,CAAC;YACF,CAAC;QACF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;YAClC,QAAQ,kCAAyB;YACjC,KAAK,EAAE,IAAA,cAAQ,EAAC,iBAAiB,EAAE,wBAAwB,CAAC;SAC5D,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IACb,CAAC;IAEO,eAAe,CAAC,YAA0B,EAAE,QAAsB;QACzE,YAAY,CAAC,OAAO,CAAC,mBAAmB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrE,CAAC;IAEO,iBAAiB,CAAC,CAAiB;;QAC1C,IAAI,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;YACtB,OAAO;QACR,CAAC;QAED,+CAA+C;QAC/C,MAAM,WAAW,GAAG,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QACjE,IAAI,WAAW,EAAE,CAAC;YACjB,IAAI,CAAC;gBACJ,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAChC,CAAC;YAAC,WAAM,CAAC;gBACR,OAAO,SAAS,CAAC;YAClB,CAAC;QACF,CAAC;QAED,4DAA4D;QAC5D,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,mCAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;QACvE,IAAI,QAAQ,EAAE,CAAC;YACd,OAAO;gBACN,mBAAmB,EAAE;oBACpB,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,eAAe,EAAE,MAAA,QAAQ,CAAC,eAAe,mCAAI,IAAI;oBACjD,cAAc,EAAE,CAAC,CAAC,QAAQ,CAAC,oBAAoB;iBAC/C;aACD,CAAC;QACH,CAAC;QAED,OAAO,SAAS,CAAC;IAClB,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,YAA4B,EAAE,QAAkC,EAAE,KAAwB;;QAC3H,IAAI,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,EAAE,KAAI,CAAA,MAAA,IAAI,CAAC,qBAAqB,0CAAE,MAAM,MAAK,QAAQ,CAAC,EAAE,EAAE,CAAC;YACxE,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC;YACjF,IAAI,KAAK,CAAC,uBAAuB,EAAE,CAAC;gBACnC,OAAO;YACR,CAAC;YAED,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,mBAAmB,EAAE,CAAC;gBAChD,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAClC,CAAC;QACF,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,YAAK,CAAC,OAAO,CAAC,EAAE,CAAC;YACtC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;YAC/D,IAAI,KAAK,CAAC,uBAAuB,EAAE,CAAC;gBACnC,OAAO;YACR,CAAC;YAED,IAAI,SAAS,CAAC,MAAM,EAAE,CAAC;gBACtB,YAAY,CAAC,MAAM,CAAC,YAAK,CAAC,OAAO,EAAE,IAAA,2CAA4B,EAAC,sBAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC7F,CAAC;QACF,CAAC;IACF,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,SAA+C,EAAE,YAA4B,EAAE,KAAiB,EAAE,UAAgC,EAAE,OAA6B,EAAE,KAAwB;QACtN,MAAM,OAAO,GAAG,MAAM,IAAA,wBAAgB,EACrC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAC,QAAQ,EAAC,EAAE;;YAC1C,IAAI,CAAC;gBACJ,MAAM,IAAI,GAAG,MAAM,CAAA,MAAA,QAAQ,CAAC,yBAAyB,yDAAG,KAAK,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,EAAE,KAAK,CAAC,CAAA,CAAC;gBACzG,IAAI,IAAI,EAAE,CAAC;oBACV,OAAO,EAAE,GAAG,IAAI,EAAE,UAAU,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC;gBAC7C,CAAC;YACF,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACd,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpB,CAAC;YACD,OAAO,SAAS,CAAC;QAClB,CAAC,CAAC,CAAC,EACH,KAAK,CAAC,CAAC;QACR,MAAM,KAAK,GAAG,IAAA,iBAAQ,EAAC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC,CAAC;QACtC,OAAO,IAAA,yBAAkB,EAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAEO,KAAK,CAAC,wBAAwB,CAAC,YAA4B,EAAE,QAAkC,EAAE,KAAwB;;QAChI,MAAM,gBAAgB,GAAG,MAAA,YAAY,CAAC,GAAG,CAAC,YAAK,CAAC,IAAI,CAAC,mCAAI,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAClF,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACvB,OAAO;QACR,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,gBAAgB,CAAC,QAAQ,EAAE,CAAC;QAC/C,IAAI,KAAK,CAAC,uBAAuB,EAAE,CAAC;YACnC,OAAO;QACR,CAAC;QAED,MAAM,OAAO,GAAiB;YAC7B,IAAI;YACJ,cAAc,EAAE,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,mBAAmB,CAAC,cAAc,mCAAI,KAAK;YACrE,eAAe,EAAE,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,mBAAmB,CAAC,eAAe,mCAAI,IAAI;YACtE,IAAI,EAAE,IAAI;SACV,CAAC;QACF,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,+BAAiB,OAAO,CAAC,CAAC;IAC1D,CAAC;;AA/bW,kDAAmB;AAER,sBAAE,GAAG,0CAAH,AAA6C,CAAC;8BAF3D,mBAAmB;IAuB7B,WAAA,qCAAqB,CAAA;IACrB,WAAA,kCAAgB,CAAA;IAChB,WAAA,oCAAiB,CAAA;IACjB,WAAA,2CAAwB,CAAA;IACxB,WAAA,+BAAkB,CAAA;IAClB,WAAA,2BAAgB,CAAA;GA5BN,mBAAmB,CAgc/B;AAED,SAAS,wBAAwB,CAAC,QAAmC,EAAE,YAA4B;;IAClG,OAAO,OAAO,CAAC,MAAA,QAAQ,CAAC,cAAc,0CAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACnF,CAAC","file":"copyPasteController.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getActiveDocument } from '../../../../base/browser/dom';\nimport { coalesce } from '../../../../base/common/arrays';\nimport { CancelablePromise, createCancelablePromise, raceCancellation } from '../../../../base/common/async';\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { UriList, VSDataTransfer, createStringDataTransferItem, matchesMimeType } from '../../../../base/common/dataTransfer';\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { Mimes } from '../../../../base/common/mime';\nimport * as platform from '../../../../base/common/platform';\nimport { generateUuid } from '../../../../base/common/uuid';\nimport { ClipboardEventUtils } from '../../../browser/controller/textAreaInput';\nimport { toExternalVSDataTransfer, toVSDataTransfer } from '../../../browser/dnd';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService';\nimport { EditorOption } from '../../../common/config/editorOptions';\nimport { IRange, Range } from '../../../common/core/range';\nimport { Selection } from '../../../common/core/selection';\nimport { Handler, IEditorContribution, PastePayload } from '../../../common/editorCommon';\nimport { DocumentPasteContext, DocumentPasteEdit, DocumentPasteEditProvider } from '../../../common/languages';\nimport { ITextModel } from '../../../common/model';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { createCombinedWorkspaceEdit, sortEditsByYieldTo } from './edit';\nimport { CodeEditorStateFlag, EditorStateCancellationTokenSource } from '../../editorState/browser/editorState';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress';\nimport { localize } from '../../../../nls';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress';\nimport { IQuickInputService, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput';\nimport { PostEditWidgetManager } from './postEditWidget';\nimport { MessageController } from '../../message/browser/messageController';\n\nexport const changePasteTypeCommandId = 'editor.changePasteType';\n\nexport const pasteWidgetVisibleCtx = new RawContextKey<boolean>('pasteWidgetVisible', false, localize('pasteWidgetVisible', \"Whether the paste widget is showing\"));\n\nconst vscodeClipboardMime = 'application/vnd.code.copyMetadata';\n\ninterface CopyMetadata {\n\treadonly id?: string;\n\treadonly providerCopyMimeTypes?: readonly string[];\n\n\treadonly defaultPastePayload: Omit<PastePayload, 'text'>;\n}\n\nexport class CopyPasteController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.copyPasteActionController';\n\n\tpublic static get(editor: ICodeEditor): CopyPasteController | null {\n\t\treturn editor.getContribution<CopyPasteController>(CopyPasteController.ID);\n\t}\n\n\tprivate readonly _editor: ICodeEditor;\n\n\tprivate _currentCopyOperation?: {\n\t\treadonly handle: string;\n\t\treadonly dataTransferPromise: CancelablePromise<VSDataTransfer>;\n\t};\n\n\tprivate _currentPasteOperation?: CancelablePromise<void>;\n\tprivate _pasteAsActionContext?: { readonly preferredId: string | undefined };\n\n\tprivate readonly _pasteProgressManager: InlineProgressManager;\n\tprivate readonly _postPasteWidgetManager: PostEditWidgetManager;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IBulkEditService private readonly _bulkEditService: IBulkEditService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@IProgressService private readonly _progressService: IProgressService,\n\t) {\n\t\tsuper();\n\n\t\tthis._editor = editor;\n\n\t\tconst container = editor.getContainerDomNode();\n\t\tthis._register(addDisposableListener(container, 'copy', e => this.handleCopy(e)));\n\t\tthis._register(addDisposableListener(container, 'cut', e => this.handleCopy(e)));\n\t\tthis._register(addDisposableListener(container, 'paste', e => this.handlePaste(e), true));\n\n\t\tthis._pasteProgressManager = this._register(new InlineProgressManager('pasteIntoEditor', editor, instantiationService));\n\n\t\tthis._postPasteWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, { id: changePasteTypeCommandId, label: localize('postPasteWidgetTitle', \"Show paste options...\") }));\n\t}\n\n\tpublic changePasteType() {\n\t\tthis._postPasteWidgetManager.tryShowSelector();\n\t}\n\n\tpublic pasteAs(preferredId?: string) {\n\t\tthis._editor.focus();\n\t\ttry {\n\t\t\tthis._pasteAsActionContext = { preferredId };\n\t\t\tgetActiveDocument().execCommand('paste');\n\t\t} finally {\n\t\t\tthis._pasteAsActionContext = undefined;\n\t\t}\n\t}\n\n\tpublic clearWidgets() {\n\t\tthis._postPasteWidgetManager.clear();\n\t}\n\n\tprivate isPasteAsEnabled(): boolean {\n\t\treturn this._editor.getOption(EditorOption.pasteAs).enabled\n\t\t\t&& !this._editor.getOption(EditorOption.readOnly);\n\t}\n\n\tpublic async finishedPaste(): Promise<void> {\n\t\tawait this._currentPasteOperation;\n\t}\n\n\tprivate handleCopy(e: ClipboardEvent) {\n\t\tif (!this._editor.hasTextFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (platform.isWeb) {\n\t\t\t// Explicitly clear the web resources clipboard.\n\t\t\t// This is needed because on web, the browser clipboard is faked out using an in-memory store.\n\t\t\t// This means the resources clipboard is not properly updated when copying from the editor.\n\t\t\tthis._clipboardService.writeResources([]);\n\t\t}\n\n\t\tif (!e.clipboardData || !this.isPasteAsEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst selections = this._editor.getSelections();\n\t\tif (!model || !selections?.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst enableEmptySelectionClipboard = this._editor.getOption(EditorOption.emptySelectionClipboard);\n\n\t\tlet ranges: readonly IRange[] = selections;\n\t\tconst wasFromEmptySelection = selections.length === 1 && selections[0].isEmpty();\n\t\tif (wasFromEmptySelection) {\n\t\t\tif (!enableEmptySelectionClipboard) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tranges = [new Range(ranges[0].startLineNumber, 1, ranges[0].startLineNumber, 1 + model.getLineLength(ranges[0].startLineNumber))];\n\t\t}\n\n\t\tconst toCopy = this._editor._getViewModel()?.getPlainTextToCopy(selections, enableEmptySelectionClipboard, platform.isWindows);\n\t\tconst multicursorText = Array.isArray(toCopy) ? toCopy : null;\n\n\t\tconst defaultPastePayload = {\n\t\t\tmulticursorText,\n\t\t\tpasteOnNewLine: wasFromEmptySelection,\n\t\t\tmode: null\n\t\t};\n\n\t\tconst providers = this._languageFeaturesService.documentPasteEditProvider\n\t\t\t.ordered(model)\n\t\t\t.filter(x => !!x.prepareDocumentPaste);\n\t\tif (!providers.length) {\n\t\t\tthis.setCopyMetadata(e.clipboardData, { defaultPastePayload });\n\t\t\treturn;\n\t\t}\n\n\t\tconst dataTransfer = toVSDataTransfer(e.clipboardData);\n\t\tconst providerCopyMimeTypes = providers.flatMap(x => x.copyMimeTypes ?? []);\n\n\t\t// Save off a handle pointing to data that VS Code maintains.\n\t\tconst handle = generateUuid();\n\t\tthis.setCopyMetadata(e.clipboardData, {\n\t\t\tid: handle,\n\t\t\tproviderCopyMimeTypes,\n\t\t\tdefaultPastePayload\n\t\t});\n\n\t\tconst promise = createCancelablePromise(async token => {\n\t\t\tconst results = coalesce(await Promise.all(providers.map(async provider => {\n\t\t\t\ttry {\n\t\t\t\t\treturn await provider.prepareDocumentPaste!(model, ranges, dataTransfer, token);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t})));\n\n\t\t\t// Values from higher priority providers should overwrite values from lower priority ones.\n\t\t\t// Reverse the array to so that the calls to `replace` below will do this\n\t\t\tresults.reverse();\n\n\t\t\tfor (const result of results) {\n\t\t\t\tfor (const [mime, value] of result) {\n\t\t\t\t\tdataTransfer.replace(mime, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn dataTransfer;\n\t\t});\n\n\t\tthis._currentCopyOperation?.dataTransferPromise.cancel();\n\t\tthis._currentCopyOperation = { handle: handle, dataTransferPromise: promise };\n\t}\n\n\tprivate async handlePaste(e: ClipboardEvent) {\n\t\tif (!e.clipboardData || !this._editor.hasTextFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\tMessageController.get(this._editor)?.closeMessage();\n\t\tthis._currentPasteOperation?.cancel();\n\t\tthis._currentPasteOperation = undefined;\n\n\t\tconst model = this._editor.getModel();\n\t\tconst selections = this._editor.getSelections();\n\t\tif (!selections?.length || !model) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\t!this.isPasteAsEnabled()\n\t\t\t&& !this._pasteAsActionContext // Still enable if paste as was explicitly requested\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst metadata = this.fetchCopyMetadata(e);\n\t\tconst dataTransfer = toExternalVSDataTransfer(e.clipboardData);\n\t\tdataTransfer.delete(vscodeClipboardMime);\n\n\t\tconst allPotentialMimeTypes = [\n\t\t\t...e.clipboardData.types,\n\t\t\t...metadata?.providerCopyMimeTypes ?? [],\n\t\t\t// TODO: always adds `uri-list` because this get set if there are resources in the system clipboard.\n\t\t\t// However we can only check the system clipboard async. For this early check, just add it in.\n\t\t\t// We filter providers again once we have the final dataTransfer we will use.\n\t\t\tMimes.uriList,\n\t\t];\n\n\t\tconst allProviders = this._languageFeaturesService.documentPasteEditProvider\n\t\t\t.ordered(model)\n\t\t\t.filter(provider => {\n\t\t\t\tif (this._pasteAsActionContext?.preferredId) {\n\t\t\t\t\tif (this._pasteAsActionContext.preferredId !== provider.id) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn provider.pasteMimeTypes?.some(type => matchesMimeType(type, allPotentialMimeTypes));\n\t\t\t});\n\t\tif (!allProviders.length) {\n\t\t\tif (this._pasteAsActionContext?.preferredId) {\n\t\t\t\tthis.showPasteAsNoEditMessage(selections, this._pasteAsActionContext?.preferredId);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Prevent the editor's default paste handler from running.\n\t\t// Note that after this point, we are fully responsible for handling paste.\n\t\t// If we can't provider a paste for any reason, we need to explicitly delegate pasting back to the editor.\n\t\te.preventDefault();\n\t\te.stopImmediatePropagation();\n\n\t\tif (this._pasteAsActionContext) {\n\t\t\tthis.showPasteAsPick(this._pasteAsActionContext.preferredId, allProviders, selections, dataTransfer, metadata, { trigger: 'explicit', only: this._pasteAsActionContext.preferredId });\n\t\t} else {\n\t\t\tthis.doPasteInline(allProviders, selections, dataTransfer, metadata, { trigger: 'implicit' });\n\t\t}\n\t}\n\n\tprivate showPasteAsNoEditMessage(selections: readonly Selection[], editId: string) {\n\t\tMessageController.get(this._editor)?.showMessage(localize('pasteAsError', \"No paste edits for '{0}' found\", editId), selections[0].getStartPosition());\n\t}\n\n\tprivate doPasteInline(allProviders: readonly DocumentPasteEditProvider[], selections: readonly Selection[], dataTransfer: VSDataTransfer, metadata: CopyMetadata | undefined, context: DocumentPasteContext): void {\n\t\tconst p = createCancelablePromise(async (token) => {\n\t\t\tconst editor = this._editor;\n\t\t\tif (!editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst model = editor.getModel();\n\n\t\t\tconst tokenSource = new EditorStateCancellationTokenSource(editor, CodeEditorStateFlag.Value | CodeEditorStateFlag.Selection, undefined, token);\n\t\t\ttry {\n\t\t\t\tawait this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Filter out any providers the don't match the full data transfer we will send them.\n\t\t\t\tconst supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));\n\t\t\t\tif (!supportedProviders.length\n\t\t\t\t\t|| (supportedProviders.length === 1 && supportedProviders[0].id === 'text') // Only our default text provider is active\n\t\t\t\t) {\n\t\t\t\t\tawait this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst providerEdits = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token);\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If the only edit returned is a text edit, use the default paste handler\n\t\t\t\tif (providerEdits.length === 1 && providerEdits[0].providerId === 'text') {\n\t\t\t\t\tawait this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (providerEdits.length) {\n\t\t\t\t\tconst canShowWidget = editor.getOption(EditorOption.pasteAs).showPasteSelector === 'afterPaste';\n\t\t\t\t\treturn this._postPasteWidgetManager.applyEditAndShowIfNeeded(selections, { activeEditIndex: 0, allEdits: providerEdits }, canShowWidget, tokenSource.token);\n\t\t\t\t}\n\n\t\t\t\tawait this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n\t\t\t} finally {\n\t\t\t\ttokenSource.dispose();\n\t\t\t\tif (this._currentPasteOperation === p) {\n\t\t\t\t\tthis._currentPasteOperation = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('pasteIntoEditorProgress', \"Running paste handlers. Click to cancel\"), p);\n\t\tthis._currentPasteOperation = p;\n\t}\n\n\tprivate showPasteAsPick(preferredId: string | undefined, allProviders: readonly DocumentPasteEditProvider[], selections: readonly Selection[], dataTransfer: VSDataTransfer, metadata: CopyMetadata | undefined, context: DocumentPasteContext): void {\n\t\tconst p = createCancelablePromise(async (token) => {\n\t\t\tconst editor = this._editor;\n\t\t\tif (!editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst model = editor.getModel();\n\n\t\t\tconst tokenSource = new EditorStateCancellationTokenSource(editor, CodeEditorStateFlag.Value | CodeEditorStateFlag.Selection, undefined, token);\n\t\t\ttry {\n\t\t\t\tawait this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Filter out any providers the don't match the full data transfer we will send them.\n\t\t\t\tlet supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));\n\t\t\t\tif (preferredId) {\n\t\t\t\t\t// We are looking for a specific edit\n\t\t\t\t\tsupportedProviders = supportedProviders.filter(edit => edit.id === preferredId);\n\t\t\t\t}\n\n\t\t\t\tconst providerEdits = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token);\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!providerEdits.length) {\n\t\t\t\t\tif (context.only) {\n\t\t\t\t\t\tthis.showPasteAsNoEditMessage(selections, context.only);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet pickedEdit: DocumentPasteEdit | undefined;\n\t\t\t\tif (preferredId) {\n\t\t\t\t\tpickedEdit = providerEdits.at(0);\n\t\t\t\t} else {\n\t\t\t\t\tconst selected = await this._quickInputService.pick(\n\t\t\t\t\t\tproviderEdits.map((edit): IQuickPickItem & { edit: DocumentPasteEdit } => ({\n\t\t\t\t\t\t\tlabel: edit.label,\n\t\t\t\t\t\t\tdescription: edit.providerId,\n\t\t\t\t\t\t\tdetail: edit.detail,\n\t\t\t\t\t\t\tedit,\n\t\t\t\t\t\t})), {\n\t\t\t\t\t\tplaceHolder: localize('pasteAsPickerPlaceholder', \"Select Paste Action\"),\n\t\t\t\t\t});\n\t\t\t\t\tpickedEdit = selected?.edit;\n\t\t\t\t}\n\n\t\t\t\tif (!pickedEdit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, selections, pickedEdit);\n\t\t\t\tawait this._bulkEditService.apply(combinedWorkspaceEdit, { editor: this._editor });\n\t\t\t} finally {\n\t\t\t\ttokenSource.dispose();\n\t\t\t\tif (this._currentPasteOperation === p) {\n\t\t\t\t\tthis._currentPasteOperation = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._progressService.withProgress({\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: localize('pasteAsProgress', \"Running paste handlers\"),\n\t\t}, () => p);\n\t}\n\n\tprivate setCopyMetadata(dataTransfer: DataTransfer, metadata: CopyMetadata) {\n\t\tdataTransfer.setData(vscodeClipboardMime, JSON.stringify(metadata));\n\t}\n\n\tprivate fetchCopyMetadata(e: ClipboardEvent): CopyMetadata | undefined {\n\t\tif (!e.clipboardData) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Prefer using the clipboard data we saved off\n\t\tconst rawMetadata = e.clipboardData.getData(vscodeClipboardMime);\n\t\tif (rawMetadata) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(rawMetadata);\n\t\t\t} catch {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise try to extract the generic text editor metadata\n\t\tconst [_, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n\t\tif (metadata) {\n\t\t\treturn {\n\t\t\t\tdefaultPastePayload: {\n\t\t\t\t\tmode: metadata.mode,\n\t\t\t\t\tmulticursorText: metadata.multicursorText ?? null,\n\t\t\t\t\tpasteOnNewLine: !!metadata.isFromEmptySelection,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async mergeInDataFromCopy(dataTransfer: VSDataTransfer, metadata: CopyMetadata | undefined, token: CancellationToken): Promise<void> {\n\t\tif (metadata?.id && this._currentCopyOperation?.handle === metadata.id) {\n\t\t\tconst toMergeDataTransfer = await this._currentCopyOperation.dataTransferPromise;\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const [key, value] of toMergeDataTransfer) {\n\t\t\t\tdataTransfer.replace(key, value);\n\t\t\t}\n\t\t}\n\n\t\tif (!dataTransfer.has(Mimes.uriList)) {\n\t\t\tconst resources = await this._clipboardService.readResources();\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (resources.length) {\n\t\t\t\tdataTransfer.append(Mimes.uriList, createStringDataTransferItem(UriList.create(resources)));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getPasteEdits(providers: readonly DocumentPasteEditProvider[], dataTransfer: VSDataTransfer, model: ITextModel, selections: readonly Selection[], context: DocumentPasteContext, token: CancellationToken): Promise<Array<DocumentPasteEdit & { providerId: string }>> {\n\t\tconst results = await raceCancellation(\n\t\t\tPromise.all(providers.map(async provider => {\n\t\t\t\ttry {\n\t\t\t\t\tconst edit = await provider.provideDocumentPasteEdits?.(model, selections, dataTransfer, context, token);\n\t\t\t\t\tif (edit) {\n\t\t\t\t\t\treturn { ...edit, providerId: provider.id };\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t})),\n\t\t\ttoken);\n\t\tconst edits = coalesce(results ?? []);\n\t\treturn sortEditsByYieldTo(edits);\n\t}\n\n\tprivate async applyDefaultPasteHandler(dataTransfer: VSDataTransfer, metadata: CopyMetadata | undefined, token: CancellationToken) {\n\t\tconst textDataTransfer = dataTransfer.get(Mimes.text) ?? dataTransfer.get('text');\n\t\tif (!textDataTransfer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst text = await textDataTransfer.asString();\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst payload: PastePayload = {\n\t\t\ttext,\n\t\t\tpasteOnNewLine: metadata?.defaultPastePayload.pasteOnNewLine ?? false,\n\t\t\tmulticursorText: metadata?.defaultPastePayload.multicursorText ?? null,\n\t\t\tmode: null,\n\t\t};\n\t\tthis._editor.trigger('keyboard', Handler.Paste, payload);\n\t}\n}\n\nfunction isSupportedPasteProvider(provider: DocumentPasteEditProvider, dataTransfer: VSDataTransfer): boolean {\n\treturn Boolean(provider.pasteMimeTypes?.some(type => dataTransfer.matches(type)));\n}\n"]}