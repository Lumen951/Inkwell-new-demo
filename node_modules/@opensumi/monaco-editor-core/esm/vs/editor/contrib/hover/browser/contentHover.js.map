{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/hover/browser/contentHover.ts","vs/editor/contrib/hover/browser/contentHover.ts"],"names":[],"mappings":"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","file":"contentHover.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom';\nimport { HoverAction, HoverWidget, getHoverAccessibleViewHint } from '../../../../base/browser/ui/hover/hoverWidget';\nimport { coalesce } from '../../../../base/common/arrays';\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { KeyCode } from '../../../../base/common/keyCodes';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle';\nimport { ContentWidgetPositionPreference, IActiveCodeEditor, ICodeEditor, IContentWidgetPosition, IEditorMouseEvent, MouseTargetType } from '../../../browser/editorBrowser';\nimport { ConfigurationChangedEvent, EditorOption } from '../../../common/config/editorOptions';\nimport { Position } from '../../../common/core/position';\nimport { Range } from '../../../common/core/range';\nimport { IModelDecoration, PositionAffinity } from '../../../common/model';\nimport { ModelDecorationOptions } from '../../../common/model/textModel';\nimport { TokenizationRegistry } from '../../../common/languages';\nimport { HoverOperation, HoverStartMode, HoverStartSource, IHoverComputer } from './hoverOperation';\nimport { HoverAnchor, HoverAnchorType, HoverParticipantRegistry, HoverRangeAnchor, IEditorHoverColorPickerWidget, IEditorHoverAction, IEditorHoverParticipant, IEditorHoverRenderContext, IEditorHoverStatusBar, IHoverPart } from './hoverTypes';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';\nimport { AsyncIterableObject } from '../../../../base/common/async';\nimport { EditorContextKeys } from '../../../common/editorContextKeys';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey';\nimport { ResizableContentWidget } from './resizableContentWidget';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility';\nimport { overflowWidgetsSettings } from '../../../../base/browser/settings';\n\nconst $ = dom.$;\n\nexport class ContentHoverController extends Disposable {\n\n\tprivate _currentResult: HoverResult | null = null;\n\n\tprivate readonly _computer: ContentHoverComputer;\n\tprivate readonly _widget: ContentHoverWidget;\n\tprivate readonly _participants: IEditorHoverParticipant[];\n\tprivate readonly _hoverOperation: HoverOperation<IHoverPart>;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t) {\n\t\tsuper();\n\n\t\tthis._widget = this._register(this._instantiationService.createInstance(ContentHoverWidget, this._editor));\n\n\t\t// Instantiate participants and sort them by `hoverOrdinal` which is relevant for rendering order.\n\t\tthis._participants = [];\n\t\tfor (const participant of HoverParticipantRegistry.getAll()) {\n\t\t\tthis._participants.push(this._instantiationService.createInstance(participant, this._editor));\n\t\t}\n\t\tthis._participants.sort((p1, p2) => p1.hoverOrdinal - p2.hoverOrdinal);\n\n\t\tthis._computer = new ContentHoverComputer(this._editor, this._participants);\n\t\tthis._hoverOperation = this._register(new HoverOperation(this._editor, this._computer));\n\n\t\tthis._register(this._hoverOperation.onResult((result) => {\n\t\t\tif (!this._computer.anchor) {\n\t\t\t\t// invalid state, ignore result\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst messages = (result.hasLoadingMessage ? this._addLoadingMessage(result.value) : result.value);\n\t\t\tthis._withResult(new HoverResult(this._computer.anchor, messages, result.isComplete));\n\t\t}));\n\t\tthis._register(dom.addStandardDisposableListener(this._widget.getDomNode(), 'keydown', (e) => {\n\t\t\tif (e.equals(KeyCode.Escape)) {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t}));\n\t\tthis._register(TokenizationRegistry.onDidChange(() => {\n\t\t\tif (this._widget.position && this._currentResult) {\n\t\t\t\tthis._setCurrentResult(this._currentResult); // render again\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * Returns true if the hover shows now or will show.\n\t */\n\tprivate _startShowingOrUpdateHover(\n\t\tanchor: HoverAnchor | null,\n\t\tmode: HoverStartMode,\n\t\tsource: HoverStartSource,\n\t\tfocus: boolean,\n\t\tmouseEvent: IEditorMouseEvent | null\n\t): boolean {\n\n\t\tif (!this._widget.position || !this._currentResult) {\n\t\t\t// The hover is not visible\n\t\t\tif (anchor) {\n\t\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// The hover is currently visible\n\t\tconst isHoverSticky = this._editor.getOption(EditorOption.hover).sticky;\n\t\tconst isGettingCloser = (\n\t\t\tisHoverSticky\n\t\t\t&& mouseEvent\n\t\t\t&& this._widget.isMouseGettingCloser(mouseEvent.event.posx, mouseEvent.event.posy)\n\t\t);\n\n\t\tif (isGettingCloser) {\n\t\t\t// The mouse is getting closer to the hover, so we will keep the hover untouched\n\t\t\t// But we will kick off a hover update at the new anchor, insisting on keeping the hover visible.\n\t\t\tif (anchor) {\n\t\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, true);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!anchor) {\n\t\t\tthis._setCurrentResult(null);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (anchor && this._currentResult.anchor.equals(anchor)) {\n\t\t\t// The widget is currently showing results for the exact same anchor, so no update is needed\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!anchor.canAdoptVisibleHover(this._currentResult.anchor, this._widget.position)) {\n\t\t\t// The new anchor is not compatible with the previous anchor\n\t\t\tthis._setCurrentResult(null);\n\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\t\treturn true;\n\t\t}\n\n\t\t// We aren't getting any closer to the hover, so we will filter existing results\n\t\t// and keep those which also apply to the new anchor.\n\t\tthis._setCurrentResult(this._currentResult.filter(anchor));\n\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\treturn true;\n\t}\n\n\tprivate _startHoverOperationIfNecessary(anchor: HoverAnchor, mode: HoverStartMode, source: HoverStartSource, focus: boolean, insistOnKeepingHoverVisible: boolean): void {\n\n\t\tif (this._computer.anchor && this._computer.anchor.equals(anchor)) {\n\t\t\t// We have to start a hover operation at the exact same anchor as before, so no work is needed\n\t\t\treturn;\n\t\t}\n\t\tthis._hoverOperation.cancel();\n\t\tthis._computer.anchor = anchor;\n\t\tthis._computer.shouldFocus = focus;\n\t\tthis._computer.source = source;\n\t\tthis._computer.insistOnKeepingHoverVisible = insistOnKeepingHoverVisible;\n\t\tthis._hoverOperation.start(mode);\n\t}\n\n\tprivate _setCurrentResult(hoverResult: HoverResult | null): void {\n\n\t\tif (this._currentResult === hoverResult) {\n\t\t\t// avoid updating the DOM to avoid resetting the user selection\n\t\t\treturn;\n\t\t}\n\t\tif (hoverResult && hoverResult.messages.length === 0) {\n\t\t\thoverResult = null;\n\t\t}\n\t\tthis._currentResult = hoverResult;\n\t\tif (this._currentResult) {\n\t\t\tthis._renderMessages(this._currentResult.anchor, this._currentResult.messages);\n\t\t} else {\n\t\t\tthis._widget.hide();\n\t\t}\n\t}\n\n\tprivate _addLoadingMessage(result: IHoverPart[]): IHoverPart[] {\n\t\tif (this._computer.anchor) {\n\t\t\tfor (const participant of this._participants) {\n\t\t\t\tif (participant.createLoadingMessage) {\n\t\t\t\t\tconst loadingMessage = participant.createLoadingMessage(this._computer.anchor);\n\t\t\t\t\tif (loadingMessage) {\n\t\t\t\t\t\treturn result.slice(0).concat([loadingMessage]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _withResult(hoverResult: HoverResult): void {\n\t\tif (this._widget.position && this._currentResult && this._currentResult.isComplete) {\n\t\t\t// The hover is visible with a previous complete result.\n\n\t\t\tif (!hoverResult.isComplete) {\n\t\t\t\t// Instead of rendering the new partial result, we wait for the result to be complete.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this._computer.insistOnKeepingHoverVisible && hoverResult.messages.length === 0) {\n\t\t\t\t// The hover would now hide normally, so we'll keep the previous messages\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis._setCurrentResult(hoverResult);\n\t}\n\n\tprivate _renderMessages(anchor: HoverAnchor, messages: IHoverPart[]): void {\n\t\tconst { showAtPosition, showAtSecondaryPosition, highlightRange } = ContentHoverController.computeHoverRanges(this._editor, anchor.range, messages);\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst statusBar = disposables.add(new EditorHoverStatusBar(this._keybindingService));\n\t\tconst fragment = document.createDocumentFragment();\n\n\t\tlet colorPicker: IEditorHoverColorPickerWidget | null = null;\n\t\tconst context: IEditorHoverRenderContext = {\n\t\t\tfragment,\n\t\t\tstatusBar,\n\t\t\tsetColorPicker: (widget) => colorPicker = widget,\n\t\t\tonContentsChanged: () => this._widget.onContentsChanged(),\n\t\t\tsetMinimumDimensions: (dimensions: dom.Dimension) => this._widget.setMinimumDimensions(dimensions),\n\t\t\thide: () => this.hide()\n\t\t};\n\n\t\tfor (const participant of this._participants) {\n\t\t\tconst hoverParts = messages.filter(msg => msg.owner === participant);\n\t\t\tif (hoverParts.length > 0) {\n\t\t\t\tdisposables.add(participant.renderHoverParts(context, hoverParts));\n\t\t\t}\n\t\t}\n\n\t\tconst isBeforeContent = messages.some(m => m.isBeforeContent);\n\n\t\tif (statusBar.hasContent) {\n\t\t\tfragment.appendChild(statusBar.hoverElement);\n\t\t}\n\n\t\tif (fragment.hasChildNodes()) {\n\t\t\tif (highlightRange) {\n\t\t\t\tconst highlightDecoration = this._editor.createDecorationsCollection();\n\t\t\t\thighlightDecoration.set([{\n\t\t\t\t\trange: highlightRange,\n\t\t\t\t\toptions: ContentHoverController._DECORATION_OPTIONS\n\t\t\t\t}]);\n\t\t\t\tdisposables.add(toDisposable(() => {\n\t\t\t\t\thighlightDecoration.clear();\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tthis._widget.showAt(fragment, new ContentHoverVisibleData(\n\t\t\t\tanchor.initialMousePosX,\n\t\t\t\tanchor.initialMousePosY,\n\t\t\t\tcolorPicker,\n\t\t\t\tshowAtPosition,\n\t\t\t\tshowAtSecondaryPosition,\n\t\t\t\tthis._editor.getOption(EditorOption.hover).above,\n\t\t\t\tthis._computer.shouldFocus,\n\t\t\t\tthis._computer.source,\n\t\t\t\tisBeforeContent,\n\t\t\t\tdisposables\n\t\t\t));\n\t\t} else {\n\t\t\tdisposables.dispose();\n\t\t}\n\t}\n\n\tprivate static readonly _DECORATION_OPTIONS = ModelDecorationOptions.register({\n\t\tdescription: 'content-hover-highlight',\n\t\tclassName: 'hoverHighlight'\n\t});\n\n\tpublic static computeHoverRanges(editor: ICodeEditor, anchorRange: Range, messages: IHoverPart[]) {\n\n\t\tlet startColumnBoundary = 1;\n\t\tif (editor.hasModel()) {\n\t\t\t// Ensure the range is on the current view line\n\t\t\tconst viewModel = editor._getViewModel();\n\t\t\tconst coordinatesConverter = viewModel.coordinatesConverter;\n\t\t\tconst anchorViewRange = coordinatesConverter.convertModelRangeToViewRange(anchorRange);\n\t\t\tconst anchorViewRangeStart = new Position(anchorViewRange.startLineNumber, viewModel.getLineMinColumn(anchorViewRange.startLineNumber));\n\t\t\tstartColumnBoundary = coordinatesConverter.convertViewPositionToModelPosition(anchorViewRangeStart).column;\n\t\t}\n\n\t\t// The anchor range is always on a single line\n\t\tconst anchorLineNumber = anchorRange.startLineNumber;\n\t\tlet renderStartColumn = anchorRange.startColumn;\n\t\tlet highlightRange = messages[0].range;\n\t\tlet forceShowAtRange = null;\n\n\t\tfor (const msg of messages) {\n\t\t\thighlightRange = Range.plusRange(highlightRange, msg.range);\n\t\t\tif (msg.range.startLineNumber === anchorLineNumber && msg.range.endLineNumber === anchorLineNumber) {\n\t\t\t\t// this message has a range that is completely sitting on the line of the anchor\n\t\t\t\trenderStartColumn = Math.max(Math.min(renderStartColumn, msg.range.startColumn), startColumnBoundary);\n\t\t\t}\n\t\t\tif (msg.forceShowAtRange) {\n\t\t\t\tforceShowAtRange = msg.range;\n\t\t\t}\n\t\t}\n\n\t\tconst showAtPosition = forceShowAtRange ? forceShowAtRange.getStartPosition() : new Position(anchorLineNumber, anchorRange.startColumn);\n\t\tconst showAtSecondaryPosition = forceShowAtRange ? forceShowAtRange.getStartPosition() : new Position(anchorLineNumber, renderStartColumn);\n\n\t\treturn {\n\t\t\tshowAtPosition,\n\t\t\tshowAtSecondaryPosition,\n\t\t\thighlightRange\n\t\t};\n\t}\n\n\t/**\n\t * Returns true if the hover shows now or will show.\n\t */\n\tpublic showsOrWillShow(mouseEvent: IEditorMouseEvent): boolean {\n\n\t\tif (this._widget.isResizing) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst anchorCandidates: HoverAnchor[] = [];\n\t\tfor (const participant of this._participants) {\n\t\t\tif (participant.suggestHoverAnchor) {\n\t\t\t\tconst anchor = participant.suggestHoverAnchor(mouseEvent);\n\t\t\t\tif (anchor) {\n\t\t\t\t\tanchorCandidates.push(anchor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst target = mouseEvent.target;\n\n\t\tif (target.type === MouseTargetType.CONTENT_TEXT) {\n\t\t\tanchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n\t\t}\n\n\t\tif (target.type === MouseTargetType.CONTENT_EMPTY) {\n\t\t\tconst epsilon = this._editor.getOption(EditorOption.fontInfo).typicalHalfwidthCharacterWidth / 2;\n\t\t\tif (\n\t\t\t\t!target.detail.isAfterLines\n\t\t\t\t&& typeof target.detail.horizontalDistanceToText === 'number'\n\t\t\t\t&& target.detail.horizontalDistanceToText < epsilon\n\t\t\t) {\n\t\t\t\t// Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough\n\t\t\t\tanchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n\t\t\t}\n\t\t}\n\n\t\tif (anchorCandidates.length === 0) {\n\t\t\treturn this._startShowingOrUpdateHover(null, HoverStartMode.Delayed, HoverStartSource.Mouse, false, mouseEvent);\n\t\t}\n\n\t\tanchorCandidates.sort((a, b) => b.priority - a.priority);\n\t\treturn this._startShowingOrUpdateHover(anchorCandidates[0], HoverStartMode.Delayed, HoverStartSource.Mouse, false, mouseEvent);\n\t}\n\n\tpublic startShowingAtRange(range: Range, mode: HoverStartMode, source: HoverStartSource, focus: boolean): void {\n\t\tthis._startShowingOrUpdateHover(new HoverRangeAnchor(0, range, undefined, undefined), mode, source, focus, null);\n\t}\n\n\tpublic getWidgetContent(): string | undefined {\n\t\tconst node = this._widget.getDomNode();\n\t\tif (!node.textContent) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn node.textContent;\n\t}\n\n\tpublic containsNode(node: Node | null | undefined): boolean {\n\t\treturn (node ? this._widget.getDomNode().contains(node) : false);\n\t}\n\n\tpublic focus(): void {\n\t\tthis._widget.focus();\n\t}\n\n\tpublic scrollUp(): void {\n\t\tthis._widget.scrollUp();\n\t}\n\n\tpublic scrollDown(): void {\n\t\tthis._widget.scrollDown();\n\t}\n\n\tpublic scrollLeft(): void {\n\t\tthis._widget.scrollLeft();\n\t}\n\n\tpublic scrollRight(): void {\n\t\tthis._widget.scrollRight();\n\t}\n\n\tpublic pageUp(): void {\n\t\tthis._widget.pageUp();\n\t}\n\n\tpublic pageDown(): void {\n\t\tthis._widget.pageDown();\n\t}\n\n\tpublic goToTop(): void {\n\t\tthis._widget.goToTop();\n\t}\n\n\tpublic goToBottom(): void {\n\t\tthis._widget.goToBottom();\n\t}\n\n\tpublic hide(): void {\n\t\tthis._computer.anchor = null;\n\t\tthis._hoverOperation.cancel();\n\t\tthis._setCurrentResult(null);\n\t}\n\n\tpublic get isColorPickerVisible(): boolean {\n\t\treturn this._widget.isColorPickerVisible;\n\t}\n\n\tpublic get isVisibleFromKeyboard(): boolean {\n\t\treturn this._widget.isVisibleFromKeyboard;\n\t}\n\n\tpublic get isVisible(): boolean {\n\t\treturn this._widget.isVisible;\n\t}\n\n\tpublic get isFocused(): boolean {\n\t\treturn this._widget.isFocused;\n\t}\n\n\tpublic get isResizing(): boolean {\n\t\treturn this._widget.isResizing;\n\t}\n\n\tpublic get widget() {\n\t\treturn this._widget;\n\t}\n}\n\nclass HoverResult {\n\n\tconstructor(\n\t\tpublic readonly anchor: HoverAnchor,\n\t\tpublic readonly messages: IHoverPart[],\n\t\tpublic readonly isComplete: boolean\n\t) { }\n\n\tpublic filter(anchor: HoverAnchor): HoverResult {\n\t\tconst filteredMessages = this.messages.filter((m) => m.isValidForHoverAnchor(anchor));\n\t\tif (filteredMessages.length === this.messages.length) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new FilteredHoverResult(this, this.anchor, filteredMessages, this.isComplete);\n\t}\n}\n\nclass FilteredHoverResult extends HoverResult {\n\n\tconstructor(\n\t\tprivate readonly original: HoverResult,\n\t\tanchor: HoverAnchor,\n\t\tmessages: IHoverPart[],\n\t\tisComplete: boolean\n\t) {\n\t\tsuper(anchor, messages, isComplete);\n\t}\n\n\tpublic override filter(anchor: HoverAnchor): HoverResult {\n\t\treturn this.original.filter(anchor);\n\t}\n}\n\nclass ContentHoverVisibleData {\n\n\tpublic closestMouseDistance: number | undefined = undefined;\n\n\tconstructor(\n\t\tpublic initialMousePosX: number | undefined,\n\t\tpublic initialMousePosY: number | undefined,\n\t\tpublic readonly colorPicker: IEditorHoverColorPickerWidget | null,\n\t\tpublic readonly showAtPosition: Position,\n\t\tpublic readonly showAtSecondaryPosition: Position,\n\t\tpublic readonly preferAbove: boolean,\n\t\tpublic readonly stoleFocus: boolean,\n\t\tpublic readonly source: HoverStartSource,\n\t\tpublic readonly isBeforeContent: boolean,\n\t\tpublic readonly disposables: DisposableStore\n\t) { }\n}\n\nconst HORIZONTAL_SCROLLING_BY = 30;\nconst SCROLLBAR_WIDTH = 10;\nconst CONTAINER_HEIGHT_PADDING = 6;\n\nexport class ContentHoverWidget extends ResizableContentWidget {\n\n\tpublic static ID = 'editor.contrib.resizableContentHoverWidget';\n\tprivate static _lastDimensions: dom.Dimension = new dom.Dimension(0, 0);\n\n\tprivate _visibleData: ContentHoverVisibleData | undefined;\n\tprivate _positionPreference: ContentWidgetPositionPreference | undefined;\n\tprivate _minimumSize: dom.Dimension;\n\tprivate _contentWidth: number | undefined;\n\n\tprivate readonly _hover: HoverWidget = this._register(new HoverWidget());\n\tprivate readonly _hoverVisibleKey: IContextKey<boolean>;\n\tprivate readonly _hoverFocusedKey: IContextKey<boolean>;\n\n\tpublic get isColorPickerVisible(): boolean {\n\t\treturn Boolean(this._visibleData?.colorPicker);\n\t}\n\n\tpublic get isVisibleFromKeyboard(): boolean {\n\t\treturn (this._visibleData?.source === HoverStartSource.Keyboard);\n\t}\n\n\tpublic get isVisible(): boolean {\n\t\treturn this._hoverVisibleKey.get() ?? false;\n\t}\n\n\tpublic get isFocused(): boolean {\n\t\treturn this._hoverFocusedKey.get() ?? false;\n\t}\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService\n\t) {\n\t\tconst minimumHeight = editor.getOption(EditorOption.lineHeight) + 8;\n\t\tconst minimumWidth = 150;\n\t\tconst minimumSize = new dom.Dimension(minimumWidth, minimumHeight);\n\t\tsuper(editor, minimumSize);\n\n\t\tthis._minimumSize = minimumSize;\n\t\tthis._hoverVisibleKey = EditorContextKeys.hoverVisible.bindTo(contextKeyService);\n\t\tthis._hoverFocusedKey = EditorContextKeys.hoverFocused.bindTo(contextKeyService);\n\n\t\tdom.append(this._resizableNode.domNode, this._hover.containerDomNode);\n\t\tthis._resizableNode.domNode.style.zIndex = '50';\n\n\t\tthis._register(this._editor.onDidLayoutChange(() => {\n\t\t\tif (this.isVisible) {\n\t\t\t\tthis._updateMaxDimensions();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._editor.onDidChangeConfiguration((e: ConfigurationChangedEvent) => {\n\t\t\tif (e.hasChanged(EditorOption.fontInfo)) {\n\t\t\t\tthis._updateFont();\n\t\t\t}\n\t\t}));\n\t\tconst focusTracker = this._register(dom.trackFocus(this._resizableNode.domNode));\n\t\tthis._register(focusTracker.onDidFocus(() => {\n\t\t\tthis._hoverFocusedKey.set(true);\n\t\t}));\n\t\tthis._register(focusTracker.onDidBlur(() => {\n\t\t\tthis._hoverFocusedKey.set(false);\n\t\t}));\n\t\tthis._setHoverData(undefined);\n\t\tthis._editor.addContentWidget(this);\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._visibleData?.disposables.dispose();\n\t\tthis._editor.removeContentWidget(this);\n\t}\n\n\tpublic getId(): string {\n\t\treturn ContentHoverWidget.ID;\n\t}\n\n\tprivate static _applyDimensions(container: HTMLElement, width: number | string, height: number | string): void {\n\t\tconst transformedWidth = typeof width === 'number' ? `${width}px` : width;\n\t\tconst transformedHeight = typeof height === 'number' ? `${height}px` : height;\n\t\tcontainer.style.width = transformedWidth;\n\t\tcontainer.style.height = transformedHeight;\n\t}\n\n\tprivate _setContentsDomNodeDimensions(width: number | string, height: number | string): void {\n\t\tconst contentsDomNode = this._hover.contentsDomNode;\n\t\treturn ContentHoverWidget._applyDimensions(contentsDomNode, width, height);\n\t}\n\n\tprivate _setContainerDomNodeDimensions(width: number | string, height: number | string): void {\n\t\tconst containerDomNode = this._hover.containerDomNode;\n\t\treturn ContentHoverWidget._applyDimensions(containerDomNode, width, height);\n\t}\n\n\tprivate _setHoverWidgetDimensions(width: number | string, height: number | string): void {\n\t\tthis._setContentsDomNodeDimensions(width, height);\n\t\tthis._setContainerDomNodeDimensions(width, height);\n\t\tthis._layoutContentWidget();\n\t}\n\n\tprivate static _applyMaxDimensions(container: HTMLElement, width: number | string, height: number | string) {\n\t\tconst transformedWidth = typeof width === 'number' ? `${width}px` : width;\n\t\tconst transformedHeight = typeof height === 'number' ? `${height}px` : height;\n\t\tcontainer.style.maxWidth = transformedWidth;\n\t\tcontainer.style.maxHeight = transformedHeight;\n\t}\n\n\tprivate _setHoverWidgetMaxDimensions(width: number | string, height: number | string): void {\n\t\tContentHoverWidget._applyMaxDimensions(this._hover.contentsDomNode, width, height);\n\t\tContentHoverWidget._applyMaxDimensions(this._hover.containerDomNode, width, height);\n\t\tthis._hover.containerDomNode.style.setProperty('--vscode-hover-maxWidth', typeof width === 'number' ? `${width}px` : width);\n\t\tthis._layoutContentWidget();\n\t}\n\n\tprivate _hasHorizontalScrollbar(): boolean {\n\t\tconst scrollDimensions = this._hover.scrollbar.getScrollDimensions();\n\t\tconst hasHorizontalScrollbar = scrollDimensions.scrollWidth > scrollDimensions.width;\n\t\treturn hasHorizontalScrollbar;\n\t}\n\n\tprivate _adjustContentsBottomPadding(): void {\n\t\tconst contentsDomNode = this._hover.contentsDomNode;\n\t\tconst extraBottomPadding = `${this._hover.scrollbar.options.horizontalScrollbarSize}px`;\n\t\tif (contentsDomNode.style.paddingBottom !== extraBottomPadding) {\n\t\t\tcontentsDomNode.style.paddingBottom = extraBottomPadding;\n\t\t}\n\t}\n\n\tprivate _setAdjustedHoverWidgetDimensions(size: dom.Dimension): void {\n\t\tthis._setHoverWidgetMaxDimensions('none', 'none');\n\t\tconst width = size.width;\n\t\tconst height = size.height;\n\t\tthis._setHoverWidgetDimensions(width, height);\n\t\t// measure if widget has horizontal scrollbar after setting the dimensions\n\t\tif (this._hasHorizontalScrollbar()) {\n\t\t\tthis._adjustContentsBottomPadding();\n\t\t\tthis._setContentsDomNodeDimensions(width, height - SCROLLBAR_WIDTH);\n\t\t}\n\t}\n\n\tprivate _updateResizableNodeMaxDimensions(): void {\n\t\tconst maxRenderingWidth = this._findMaximumRenderingWidth() ?? Infinity;\n\t\tconst maxRenderingHeight = this._findMaximumRenderingHeight() ?? Infinity;\n\t\tthis._resizableNode.maxSize = new dom.Dimension(maxRenderingWidth, maxRenderingHeight);\n\t\tthis._setHoverWidgetMaxDimensions(maxRenderingWidth, maxRenderingHeight);\n\t}\n\n\tprotected override _resize(size: dom.Dimension): void {\n\t\tContentHoverWidget._lastDimensions = new dom.Dimension(size.width, size.height);\n\t\tthis._setAdjustedHoverWidgetDimensions(size);\n\t\tthis._resizableNode.layout(size.height, size.width);\n\t\tthis._updateResizableNodeMaxDimensions();\n\t\tthis._hover.scrollbar.scanDomNode();\n\t\tthis._editor.layoutContentWidget(this);\n\t\tthis._visibleData?.colorPicker?.layout();\n\t}\n\n\tprivate _findAvailableSpaceVertically(): number | undefined {\n\t\tconst position = this._visibleData?.showAtPosition;\n\t\tif (!position) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._positionPreference === ContentWidgetPositionPreference.ABOVE ?\n\t\t\tthis._availableVerticalSpaceAbove(position)\n\t\t\t: this._availableVerticalSpaceBelow(position);\n\t}\n\n\tprivate _findMaximumRenderingHeight(): number | undefined {\n\t\tconst availableSpace = this._findAvailableSpaceVertically();\n\t\tif (!availableSpace) {\n\t\t\treturn;\n\t\t}\n\t\t// Padding needed in order to stop the resizing down to a smaller height\n\t\tlet maximumHeight = CONTAINER_HEIGHT_PADDING;\n\t\tArray.from(this._hover.contentsDomNode.children).forEach((hoverPart) => {\n\t\t\tmaximumHeight += hoverPart.clientHeight;\n\t\t});\n\n\t\tif (this._hasHorizontalScrollbar()) {\n\t\t\tmaximumHeight += SCROLLBAR_WIDTH;\n\t\t}\n\t\treturn Math.min(availableSpace, maximumHeight);\n\t}\n\n\tprivate _isHoverTextOverflowing(): boolean {\n\t\t// To find out if the text is overflowing, we will disable wrapping, check the widths, and then re-enable wrapping\n\t\tthis._hover.containerDomNode.style.setProperty('--vscode-hover-whiteSpace', 'nowrap');\n\t\tthis._hover.containerDomNode.style.setProperty('--vscode-hover-sourceWhiteSpace', 'nowrap');\n\n\t\tconst overflowing = Array.from(this._hover.contentsDomNode.children).some((hoverElement) => {\n\t\t\treturn hoverElement.scrollWidth > hoverElement.clientWidth;\n\t\t});\n\n\t\tthis._hover.containerDomNode.style.removeProperty('--vscode-hover-whiteSpace');\n\t\tthis._hover.containerDomNode.style.removeProperty('--vscode-hover-sourceWhiteSpace');\n\n\t\treturn overflowing;\n\t}\n\n\tprivate _findMaximumRenderingWidth(): number | undefined {\n\t\tif (!this._editor || !this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst overflowing = this._isHoverTextOverflowing();\n\t\tconst initialWidth = (\n\t\t\ttypeof this._contentWidth === 'undefined'\n\t\t\t\t? 0\n\t\t\t\t: this._contentWidth - 2 // - 2 for the borders\n\t\t);\n\n\t\tif (overflowing || this._hover.containerDomNode.clientWidth < initialWidth) {\n\t\t\tconst bodyBoxWidth = dom.getClientArea(this._hover.containerDomNode.ownerDocument.body).width;\n\t\t\tconst horizontalPadding = 14;\n\t\t\treturn bodyBoxWidth - horizontalPadding;\n\t\t} else {\n\t\t\treturn this._hover.containerDomNode.clientWidth + 2;\n\t\t}\n\t}\n\n\tpublic isMouseGettingCloser(posx: number, posy: number): boolean {\n\n\t\tif (!this._visibleData) {\n\t\t\treturn false;\n\t\t}\n\t\tif (\n\t\t\ttypeof this._visibleData.initialMousePosX === 'undefined'\n\t\t\t|| typeof this._visibleData.initialMousePosY === 'undefined'\n\t\t) {\n\t\t\tthis._visibleData.initialMousePosX = posx;\n\t\t\tthis._visibleData.initialMousePosY = posy;\n\t\t\treturn false;\n\t\t}\n\n\t\tconst widgetRect = dom.getDomNodePagePosition(this.getDomNode());\n\t\tif (typeof this._visibleData.closestMouseDistance === 'undefined') {\n\t\t\tthis._visibleData.closestMouseDistance = computeDistanceFromPointToRectangle(\n\t\t\t\tthis._visibleData.initialMousePosX,\n\t\t\t\tthis._visibleData.initialMousePosY,\n\t\t\t\twidgetRect.left,\n\t\t\t\twidgetRect.top,\n\t\t\t\twidgetRect.width,\n\t\t\t\twidgetRect.height\n\t\t\t);\n\t\t}\n\n\t\tconst distance = computeDistanceFromPointToRectangle(\n\t\t\tposx,\n\t\t\tposy,\n\t\t\twidgetRect.left,\n\t\t\twidgetRect.top,\n\t\t\twidgetRect.width,\n\t\t\twidgetRect.height\n\t\t);\n\t\tif (distance > this._visibleData.closestMouseDistance + 4 /* tolerance of 4 pixels */) {\n\t\t\t// The mouse is getting farther away\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._visibleData.closestMouseDistance = Math.min(this._visibleData.closestMouseDistance, distance);\n\t\treturn true;\n\t}\n\n\tprivate _setHoverData(hoverData: ContentHoverVisibleData | undefined): void {\n\t\tthis._visibleData?.disposables.dispose();\n\t\tthis._visibleData = hoverData;\n\t\tthis._hoverVisibleKey.set(!!hoverData);\n\t\tthis._hover.containerDomNode.classList.toggle('hidden', !hoverData);\n\t}\n\n\tprivate _updateFont(): void {\n\t\tconst { fontSize, lineHeight } = this._editor.getOption(EditorOption.fontInfo);\n\t\tconst contentsDomNode = this._hover.contentsDomNode;\n\t\tcontentsDomNode.style.fontSize = `${fontSize}px`;\n\t\tcontentsDomNode.style.lineHeight = `${lineHeight / fontSize}`;\n\t\tconst codeClasses: HTMLElement[] = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));\n\t\tcodeClasses.forEach(node => this._editor.applyFontInfo(node));\n\t}\n\n\tprivate _updateContent(node: DocumentFragment): void {\n\t\tconst contentsDomNode = this._hover.contentsDomNode;\n\t\tcontentsDomNode.style.paddingBottom = '';\n\t\tcontentsDomNode.textContent = '';\n\t\tcontentsDomNode.appendChild(node);\n\t}\n\n\tprivate _layoutContentWidget(): void {\n\t\tthis._editor.layoutContentWidget(this);\n\t\tthis._hover.onContentsChanged();\n\t}\n\n\tprivate _updateMaxDimensions() {\n\t\tconst height = Math.max(this._editor.getLayoutInfo().height / 4, overflowWidgetsSettings.hoverWidgetMaxHeight, ContentHoverWidget._lastDimensions.height);\n\t\tconst width = Math.max(this._editor.getLayoutInfo().width * 0.66, overflowWidgetsSettings.hoverWidgetMaxWidth, ContentHoverWidget._lastDimensions.width);\n\t\tthis._setHoverWidgetMaxDimensions(width, height);\n\t}\n\n\tprivate _render(node: DocumentFragment, hoverData: ContentHoverVisibleData) {\n\t\tthis._setHoverData(hoverData);\n\t\tthis._updateFont();\n\t\tthis._updateContent(node);\n\t\tthis._updateMaxDimensions();\n\t\tthis.onContentsChanged();\n\t\t// Simply force a synchronous render on the editor\n\t\t// such that the widget does not really render with left = '0px'\n\t\tthis._editor.render();\n\t}\n\n\toverride getPosition(): IContentWidgetPosition | null {\n\t\tif (!this._visibleData) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\tposition: this._visibleData.showAtPosition,\n\t\t\tsecondaryPosition: this._visibleData.showAtSecondaryPosition,\n\t\t\tpositionAffinity: this._visibleData.isBeforeContent ? PositionAffinity.LeftOfInjectedText : undefined,\n\t\t\tpreference: [this._positionPreference ?? ContentWidgetPositionPreference.ABOVE]\n\t\t};\n\t}\n\n\tpublic showAt(node: DocumentFragment, hoverData: ContentHoverVisibleData): void {\n\t\tif (!this._editor || !this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tthis._render(node, hoverData);\n\t\tconst widgetHeight = dom.getTotalHeight(this._hover.containerDomNode);\n\t\tconst widgetPosition = hoverData.showAtPosition;\n\t\tthis._positionPreference = this._findPositionPreference(widgetHeight, widgetPosition) ?? ContentWidgetPositionPreference.ABOVE;\n\n\t\t// See https://github.com/microsoft/vscode/issues/140339\n\t\t// TODO: Doing a second layout of the hover after force rendering the editor\n\t\tthis.onContentsChanged();\n\t\tif (hoverData.stoleFocus) {\n\t\t\tthis._hover.containerDomNode.focus();\n\t\t}\n\t\thoverData.colorPicker?.layout();\n\t\t// The aria label overrides the label, so if we add to it, add the contents of the hover\n\t\tconst hoverFocused = this._hover.containerDomNode.ownerDocument.activeElement === this._hover.containerDomNode;\n\t\tconst accessibleViewHint = hoverFocused && getHoverAccessibleViewHint(\n\t\t\tthis._configurationService.getValue('accessibility.verbosity.hover') === true && this._accessibilityService.isScreenReaderOptimized(),\n\t\t\tthis._keybindingService.lookupKeybinding('editor.action.accessibleView')?.getAriaLabel() ?? ''\n\t\t);\n\n\t\tif (accessibleViewHint) {\n\t\t\tthis._hover.contentsDomNode.ariaLabel = this._hover.contentsDomNode.textContent + ', ' + accessibleViewHint;\n\t\t}\n\t}\n\n\tpublic hide(): void {\n\t\tif (!this._visibleData) {\n\t\t\treturn;\n\t\t}\n\t\tconst stoleFocus = this._visibleData.stoleFocus || this._hoverFocusedKey.get();\n\t\tthis._setHoverData(undefined);\n\t\tthis._resizableNode.maxSize = new dom.Dimension(Infinity, Infinity);\n\t\tthis._resizableNode.clearSashHoverState();\n\t\tthis._hoverFocusedKey.set(false);\n\t\tthis._editor.layoutContentWidget(this);\n\t\tif (stoleFocus) {\n\t\t\tthis._editor.focus();\n\t\t}\n\t}\n\n\tprivate _removeConstraintsRenderNormally(): void {\n\t\t// Added because otherwise the initial size of the hover content is smaller than should be\n\t\tconst layoutInfo = this._editor.getLayoutInfo();\n\t\tthis._resizableNode.layout(layoutInfo.height, layoutInfo.width);\n\t\tthis._setHoverWidgetDimensions('auto', 'auto');\n\t}\n\n\tprivate _adjustHoverHeightForScrollbar(height: number) {\n\t\tconst containerDomNode = this._hover.containerDomNode;\n\t\tconst contentsDomNode = this._hover.contentsDomNode;\n\t\tconst maxRenderingHeight = this._findMaximumRenderingHeight() ?? Infinity;\n\t\tthis._setContainerDomNodeDimensions(dom.getTotalWidth(containerDomNode), Math.min(maxRenderingHeight, height));\n\t\tthis._setContentsDomNodeDimensions(dom.getTotalWidth(contentsDomNode), Math.min(maxRenderingHeight, height - SCROLLBAR_WIDTH));\n\t}\n\n\tpublic setMinimumDimensions(dimensions: dom.Dimension): void {\n\t\t// We combine the new minimum dimensions with the previous ones\n\t\tthis._minimumSize = new dom.Dimension(\n\t\t\tMath.max(this._minimumSize.width, dimensions.width),\n\t\t\tMath.max(this._minimumSize.height, dimensions.height)\n\t\t);\n\t\tthis._updateMinimumWidth();\n\t}\n\n\tprivate _updateMinimumWidth(): void {\n\t\tconst width = (\n\t\t\ttypeof this._contentWidth === 'undefined'\n\t\t\t\t? this._minimumSize.width\n\t\t\t\t: Math.min(this._contentWidth, this._minimumSize.width)\n\t\t);\n\t\t// We want to avoid that the hover is artificially large, so we use the content width as minimum width\n\t\tthis._resizableNode.minSize = new dom.Dimension(width, this._minimumSize.height);\n\t}\n\n\tpublic onContentsChanged(): void {\n\t\tthis._removeConstraintsRenderNormally();\n\t\tconst containerDomNode = this._hover.containerDomNode;\n\n\t\tlet height = dom.getTotalHeight(containerDomNode);\n\t\tlet width = dom.getTotalWidth(containerDomNode);\n\t\tthis._resizableNode.layout(height, width);\n\n\t\tthis._setHoverWidgetDimensions(width, height);\n\n\t\theight = dom.getTotalHeight(containerDomNode);\n\t\twidth = dom.getTotalWidth(containerDomNode);\n\t\tthis._contentWidth = width;\n\t\tthis._updateMinimumWidth();\n\t\tthis._resizableNode.layout(height, width);\n\n\t\tif (this._hasHorizontalScrollbar()) {\n\t\t\tthis._adjustContentsBottomPadding();\n\t\t\tthis._adjustHoverHeightForScrollbar(height);\n\t\t}\n\t\tif (this._visibleData?.showAtPosition) {\n\t\t\tconst widgetHeight = dom.getTotalHeight(this._hover.containerDomNode);\n\t\t\tthis._positionPreference = this._findPositionPreference(widgetHeight, this._visibleData.showAtPosition);\n\t\t}\n\t\tthis._layoutContentWidget();\n\t}\n\n\tpublic focus(): void {\n\t\tthis._hover.containerDomNode.focus();\n\t}\n\n\tpublic scrollUp(): void {\n\t\tconst scrollTop = this._hover.scrollbar.getScrollPosition().scrollTop;\n\t\tconst fontInfo = this._editor.getOption(EditorOption.fontInfo);\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollTop: scrollTop - fontInfo.lineHeight });\n\t}\n\n\tpublic scrollDown(): void {\n\t\tconst scrollTop = this._hover.scrollbar.getScrollPosition().scrollTop;\n\t\tconst fontInfo = this._editor.getOption(EditorOption.fontInfo);\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollTop: scrollTop + fontInfo.lineHeight });\n\t}\n\n\tpublic scrollLeft(): void {\n\t\tconst scrollLeft = this._hover.scrollbar.getScrollPosition().scrollLeft;\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollLeft: scrollLeft - HORIZONTAL_SCROLLING_BY });\n\t}\n\n\tpublic scrollRight(): void {\n\t\tconst scrollLeft = this._hover.scrollbar.getScrollPosition().scrollLeft;\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollLeft: scrollLeft + HORIZONTAL_SCROLLING_BY });\n\t}\n\n\tpublic pageUp(): void {\n\t\tconst scrollTop = this._hover.scrollbar.getScrollPosition().scrollTop;\n\t\tconst scrollHeight = this._hover.scrollbar.getScrollDimensions().height;\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollTop: scrollTop - scrollHeight });\n\t}\n\n\tpublic pageDown(): void {\n\t\tconst scrollTop = this._hover.scrollbar.getScrollPosition().scrollTop;\n\t\tconst scrollHeight = this._hover.scrollbar.getScrollDimensions().height;\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollTop: scrollTop + scrollHeight });\n\t}\n\n\tpublic goToTop(): void {\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollTop: 0 });\n\t}\n\n\tpublic goToBottom(): void {\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollTop: this._hover.scrollbar.getScrollDimensions().scrollHeight });\n\t}\n}\n\nexport class EditorHoverStatusBar extends Disposable implements IEditorHoverStatusBar {\n\n\tpublic readonly hoverElement: HTMLElement;\n\tprivate readonly actionsElement: HTMLElement;\n\tprivate _hasContent: boolean = false;\n\n\tpublic get hasContent() {\n\t\treturn this._hasContent;\n\t}\n\n\tconstructor(\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t) {\n\t\tsuper();\n\t\tthis.hoverElement = $('div.hover-row.status-bar');\n\t\tthis.actionsElement = dom.append(this.hoverElement, $('div.actions'));\n\t}\n\n\tpublic addAction(\n\t\tactionOptions: {\n\t\t\tlabel: string;\n\t\t\ticonClass?: string; run: (target: HTMLElement) => void;\n\t\t\tcommandId: string;\n\t\t}): IEditorHoverAction {\n\n\t\tconst keybinding = this._keybindingService.lookupKeybinding(actionOptions.commandId);\n\t\tconst keybindingLabel = keybinding ? keybinding.getLabel() : null;\n\t\tthis._hasContent = true;\n\t\treturn this._register(HoverAction.render(this.actionsElement, actionOptions, keybindingLabel));\n\t}\n\n\tpublic append(element: HTMLElement): HTMLElement {\n\t\tconst result = dom.append(this.actionsElement, element);\n\t\tthis._hasContent = true;\n\t\treturn result;\n\t}\n}\n\nclass ContentHoverComputer implements IHoverComputer<IHoverPart> {\n\n\tprivate _anchor: HoverAnchor | null = null;\n\tpublic get anchor(): HoverAnchor | null { return this._anchor; }\n\tpublic set anchor(value: HoverAnchor | null) { this._anchor = value; }\n\n\tprivate _shouldFocus: boolean = false;\n\tpublic get shouldFocus(): boolean { return this._shouldFocus; }\n\tpublic set shouldFocus(value: boolean) { this._shouldFocus = value; }\n\n\tprivate _source: HoverStartSource = HoverStartSource.Mouse;\n\tpublic get source(): HoverStartSource { return this._source; }\n\tpublic set source(value: HoverStartSource) { this._source = value; }\n\n\tprivate _insistOnKeepingHoverVisible: boolean = false;\n\tpublic get insistOnKeepingHoverVisible(): boolean { return this._insistOnKeepingHoverVisible; }\n\tpublic set insistOnKeepingHoverVisible(value: boolean) { this._insistOnKeepingHoverVisible = value; }\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _participants: readonly IEditorHoverParticipant[]\n\t) {\n\t}\n\n\tprivate static _getLineDecorations(editor: IActiveCodeEditor, anchor: HoverAnchor): IModelDecoration[] {\n\t\tif (anchor.type !== HoverAnchorType.Range && !anchor.supportsMarkerHover) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tconst lineNumber = anchor.range.startLineNumber;\n\n\t\tif (lineNumber > model.getLineCount()) {\n\t\t\t// invalid line\n\t\t\treturn [];\n\t\t}\n\n\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\n\t\treturn editor.getLineDecorations(lineNumber).filter((d) => {\n\t\t\tif (d.options.isWholeLine) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst startColumn = (d.range.startLineNumber === lineNumber) ? d.range.startColumn : 1;\n\t\t\tconst endColumn = (d.range.endLineNumber === lineNumber) ? d.range.endColumn : maxColumn;\n\n\t\t\tif (d.options.showIfCollapsed) {\n\t\t\t\t// Relax check around `showIfCollapsed` decorations to also include +/- 1 character\n\t\t\t\tif (startColumn > anchor.range.startColumn + 1 || anchor.range.endColumn - 1 > endColumn) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (startColumn > anchor.range.startColumn || anchor.range.endColumn > endColumn) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tpublic computeAsync(token: CancellationToken): AsyncIterableObject<IHoverPart> {\n\t\tconst anchor = this._anchor;\n\n\t\tif (!this._editor.hasModel() || !anchor) {\n\t\t\treturn AsyncIterableObject.EMPTY;\n\t\t}\n\n\t\tconst lineDecorations = ContentHoverComputer._getLineDecorations(this._editor, anchor);\n\n\t\treturn AsyncIterableObject.merge(\n\t\t\tthis._participants.map((participant) => {\n\t\t\t\tif (!participant.computeAsync) {\n\t\t\t\t\treturn AsyncIterableObject.EMPTY;\n\t\t\t\t}\n\t\t\t\treturn participant.computeAsync(anchor, lineDecorations, token);\n\t\t\t})\n\t\t);\n\t}\n\n\tpublic computeSync(): IHoverPart[] {\n\t\tif (!this._editor.hasModel() || !this._anchor) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst lineDecorations = ContentHoverComputer._getLineDecorations(this._editor, this._anchor);\n\n\t\tlet result: IHoverPart[] = [];\n\t\tfor (const participant of this._participants) {\n\t\t\tresult = result.concat(participant.computeSync(this._anchor, lineDecorations));\n\t\t}\n\n\t\treturn coalesce(result);\n\t}\n}\n\nfunction computeDistanceFromPointToRectangle(pointX: number, pointY: number, left: number, top: number, width: number, height: number): number {\n\tconst x = (left + width / 2); // x center of rectangle\n\tconst y = (top + height / 2); // y center of rectangle\n\tconst dx = Math.max(Math.abs(pointX - x) - width / 2, 0);\n\tconst dy = Math.max(Math.abs(pointY - y) - height / 2, 0);\n\treturn Math.sqrt(dx * dx + dy * dy);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom';\nimport { HoverAction, HoverWidget, getHoverAccessibleViewHint } from '../../../../base/browser/ui/hover/hoverWidget';\nimport { coalesce } from '../../../../base/common/arrays';\nimport { CancellationToken } from '../../../../base/common/cancellation';\nimport { KeyCode } from '../../../../base/common/keyCodes';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle';\nimport { ContentWidgetPositionPreference, IActiveCodeEditor, ICodeEditor, IContentWidgetPosition, IEditorMouseEvent, MouseTargetType } from '../../../browser/editorBrowser';\nimport { ConfigurationChangedEvent, EditorOption } from '../../../common/config/editorOptions';\nimport { Position } from '../../../common/core/position';\nimport { Range } from '../../../common/core/range';\nimport { IModelDecoration, PositionAffinity } from '../../../common/model';\nimport { ModelDecorationOptions } from '../../../common/model/textModel';\nimport { TokenizationRegistry } from '../../../common/languages';\nimport { HoverOperation, HoverStartMode, HoverStartSource, IHoverComputer } from './hoverOperation';\nimport { HoverAnchor, HoverAnchorType, HoverParticipantRegistry, HoverRangeAnchor, IEditorHoverColorPickerWidget, IEditorHoverAction, IEditorHoverParticipant, IEditorHoverRenderContext, IEditorHoverStatusBar, IHoverPart } from './hoverTypes';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';\nimport { AsyncIterableObject } from '../../../../base/common/async';\nimport { EditorContextKeys } from '../../../common/editorContextKeys';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey';\nimport { ResizableContentWidget } from './resizableContentWidget';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility';\nimport { overflowWidgetsSettings } from '../../../../base/browser/settings';\n\nconst $ = dom.$;\n\nexport class ContentHoverController extends Disposable {\n\n\tprivate _currentResult: HoverResult | null = null;\n\n\tprivate readonly _computer: ContentHoverComputer;\n\tprivate readonly _widget: ContentHoverWidget;\n\tprivate readonly _participants: IEditorHoverParticipant[];\n\tprivate readonly _hoverOperation: HoverOperation<IHoverPart>;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t) {\n\t\tsuper();\n\n\t\tthis._widget = this._register(this._instantiationService.createInstance(ContentHoverWidget, this._editor));\n\n\t\t// Instantiate participants and sort them by `hoverOrdinal` which is relevant for rendering order.\n\t\tthis._participants = [];\n\t\tfor (const participant of HoverParticipantRegistry.getAll()) {\n\t\t\tthis._participants.push(this._instantiationService.createInstance(participant, this._editor));\n\t\t}\n\t\tthis._participants.sort((p1, p2) => p1.hoverOrdinal - p2.hoverOrdinal);\n\n\t\tthis._computer = new ContentHoverComputer(this._editor, this._participants);\n\t\tthis._hoverOperation = this._register(new HoverOperation(this._editor, this._computer));\n\n\t\tthis._register(this._hoverOperation.onResult((result) => {\n\t\t\tif (!this._computer.anchor) {\n\t\t\t\t// invalid state, ignore result\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst messages = (result.hasLoadingMessage ? this._addLoadingMessage(result.value) : result.value);\n\t\t\tthis._withResult(new HoverResult(this._computer.anchor, messages, result.isComplete));\n\t\t}));\n\t\tthis._register(dom.addStandardDisposableListener(this._widget.getDomNode(), 'keydown', (e) => {\n\t\t\tif (e.equals(KeyCode.Escape)) {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t}));\n\t\tthis._register(TokenizationRegistry.onDidChange(() => {\n\t\t\tif (this._widget.position && this._currentResult) {\n\t\t\t\tthis._setCurrentResult(this._currentResult); // render again\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * Returns true if the hover shows now or will show.\n\t */\n\tprivate _startShowingOrUpdateHover(\n\t\tanchor: HoverAnchor | null,\n\t\tmode: HoverStartMode,\n\t\tsource: HoverStartSource,\n\t\tfocus: boolean,\n\t\tmouseEvent: IEditorMouseEvent | null\n\t): boolean {\n\n\t\tif (!this._widget.position || !this._currentResult) {\n\t\t\t// The hover is not visible\n\t\t\tif (anchor) {\n\t\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// The hover is currently visible\n\t\tconst isHoverSticky = this._editor.getOption(EditorOption.hover).sticky;\n\t\tconst isGettingCloser = (\n\t\t\tisHoverSticky\n\t\t\t&& mouseEvent\n\t\t\t&& this._widget.isMouseGettingCloser(mouseEvent.event.posx, mouseEvent.event.posy)\n\t\t);\n\n\t\tif (isGettingCloser) {\n\t\t\t// The mouse is getting closer to the hover, so we will keep the hover untouched\n\t\t\t// But we will kick off a hover update at the new anchor, insisting on keeping the hover visible.\n\t\t\tif (anchor) {\n\t\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, true);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!anchor) {\n\t\t\tthis._setCurrentResult(null);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (anchor && this._currentResult.anchor.equals(anchor)) {\n\t\t\t// The widget is currently showing results for the exact same anchor, so no update is needed\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!anchor.canAdoptVisibleHover(this._currentResult.anchor, this._widget.position)) {\n\t\t\t// The new anchor is not compatible with the previous anchor\n\t\t\tthis._setCurrentResult(null);\n\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\t\treturn true;\n\t\t}\n\n\t\t// We aren't getting any closer to the hover, so we will filter existing results\n\t\t// and keep those which also apply to the new anchor.\n\t\tthis._setCurrentResult(this._currentResult.filter(anchor));\n\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\treturn true;\n\t}\n\n\tprivate _startHoverOperationIfNecessary(anchor: HoverAnchor, mode: HoverStartMode, source: HoverStartSource, focus: boolean, insistOnKeepingHoverVisible: boolean): void {\n\n\t\tif (this._computer.anchor && this._computer.anchor.equals(anchor)) {\n\t\t\t// We have to start a hover operation at the exact same anchor as before, so no work is needed\n\t\t\treturn;\n\t\t}\n\t\tthis._hoverOperation.cancel();\n\t\tthis._computer.anchor = anchor;\n\t\tthis._computer.shouldFocus = focus;\n\t\tthis._computer.source = source;\n\t\tthis._computer.insistOnKeepingHoverVisible = insistOnKeepingHoverVisible;\n\t\tthis._hoverOperation.start(mode);\n\t}\n\n\tprivate _setCurrentResult(hoverResult: HoverResult | null): void {\n\n\t\tif (this._currentResult === hoverResult) {\n\t\t\t// avoid updating the DOM to avoid resetting the user selection\n\t\t\treturn;\n\t\t}\n\t\tif (hoverResult && hoverResult.messages.length === 0) {\n\t\t\thoverResult = null;\n\t\t}\n\t\tthis._currentResult = hoverResult;\n\t\tif (this._currentResult) {\n\t\t\tthis._renderMessages(this._currentResult.anchor, this._currentResult.messages);\n\t\t} else {\n\t\t\tthis._widget.hide();\n\t\t}\n\t}\n\n\tprivate _addLoadingMessage(result: IHoverPart[]): IHoverPart[] {\n\t\tif (this._computer.anchor) {\n\t\t\tfor (const participant of this._participants) {\n\t\t\t\tif (participant.createLoadingMessage) {\n\t\t\t\t\tconst loadingMessage = participant.createLoadingMessage(this._computer.anchor);\n\t\t\t\t\tif (loadingMessage) {\n\t\t\t\t\t\treturn result.slice(0).concat([loadingMessage]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _withResult(hoverResult: HoverResult): void {\n\t\tif (this._widget.position && this._currentResult && this._currentResult.isComplete) {\n\t\t\t// The hover is visible with a previous complete result.\n\n\t\t\tif (!hoverResult.isComplete) {\n\t\t\t\t// Instead of rendering the new partial result, we wait for the result to be complete.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this._computer.insistOnKeepingHoverVisible && hoverResult.messages.length === 0) {\n\t\t\t\t// The hover would now hide normally, so we'll keep the previous messages\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis._setCurrentResult(hoverResult);\n\t}\n\n\tprivate _renderMessages(anchor: HoverAnchor, messages: IHoverPart[]): void {\n\t\tconst { showAtPosition, showAtSecondaryPosition, highlightRange } = ContentHoverController.computeHoverRanges(this._editor, anchor.range, messages);\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst statusBar = disposables.add(new EditorHoverStatusBar(this._keybindingService));\n\t\tconst fragment = document.createDocumentFragment();\n\n\t\tlet colorPicker: IEditorHoverColorPickerWidget | null = null;\n\t\tconst context: IEditorHoverRenderContext = {\n\t\t\tfragment,\n\t\t\tstatusBar,\n\t\t\tsetColorPicker: (widget) => colorPicker = widget,\n\t\t\tonContentsChanged: () => this._widget.onContentsChanged(),\n\t\t\tsetMinimumDimensions: (dimensions: dom.Dimension) => this._widget.setMinimumDimensions(dimensions),\n\t\t\thide: () => this.hide()\n\t\t};\n\n\t\tfor (const participant of this._participants) {\n\t\t\tconst hoverParts = messages.filter(msg => msg.owner === participant);\n\t\t\tif (hoverParts.length > 0) {\n\t\t\t\tdisposables.add(participant.renderHoverParts(context, hoverParts));\n\t\t\t}\n\t\t}\n\n\t\tconst isBeforeContent = messages.some(m => m.isBeforeContent);\n\n\t\tif (statusBar.hasContent) {\n\t\t\tfragment.appendChild(statusBar.hoverElement);\n\t\t}\n\n\t\tif (fragment.hasChildNodes()) {\n\t\t\tif (highlightRange) {\n\t\t\t\tconst highlightDecoration = this._editor.createDecorationsCollection();\n\t\t\t\thighlightDecoration.set([{\n\t\t\t\t\trange: highlightRange,\n\t\t\t\t\toptions: ContentHoverController._DECORATION_OPTIONS\n\t\t\t\t}]);\n\t\t\t\tdisposables.add(toDisposable(() => {\n\t\t\t\t\thighlightDecoration.clear();\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tthis._widget.showAt(fragment, new ContentHoverVisibleData(\n\t\t\t\tanchor.initialMousePosX,\n\t\t\t\tanchor.initialMousePosY,\n\t\t\t\tcolorPicker,\n\t\t\t\tshowAtPosition,\n\t\t\t\tshowAtSecondaryPosition,\n\t\t\t\tthis._editor.getOption(EditorOption.hover).above,\n\t\t\t\tthis._computer.shouldFocus,\n\t\t\t\tthis._computer.source,\n\t\t\t\tisBeforeContent,\n\t\t\t\tdisposables\n\t\t\t));\n\t\t} else {\n\t\t\tdisposables.dispose();\n\t\t}\n\t}\n\n\tprivate static readonly _DECORATION_OPTIONS = ModelDecorationOptions.register({\n\t\tdescription: 'content-hover-highlight',\n\t\tclassName: 'hoverHighlight'\n\t});\n\n\tpublic static computeHoverRanges(editor: ICodeEditor, anchorRange: Range, messages: IHoverPart[]) {\n\n\t\tlet startColumnBoundary = 1;\n\t\tif (editor.hasModel()) {\n\t\t\t// Ensure the range is on the current view line\n\t\t\tconst viewModel = editor._getViewModel();\n\t\t\tconst coordinatesConverter = viewModel.coordinatesConverter;\n\t\t\tconst anchorViewRange = coordinatesConverter.convertModelRangeToViewRange(anchorRange);\n\t\t\tconst anchorViewRangeStart = new Position(anchorViewRange.startLineNumber, viewModel.getLineMinColumn(anchorViewRange.startLineNumber));\n\t\t\tstartColumnBoundary = coordinatesConverter.convertViewPositionToModelPosition(anchorViewRangeStart).column;\n\t\t}\n\n\t\t// The anchor range is always on a single line\n\t\tconst anchorLineNumber = anchorRange.startLineNumber;\n\t\tlet renderStartColumn = anchorRange.startColumn;\n\t\tlet highlightRange = messages[0].range;\n\t\tlet forceShowAtRange = null;\n\n\t\tfor (const msg of messages) {\n\t\t\thighlightRange = Range.plusRange(highlightRange, msg.range);\n\t\t\tif (msg.range.startLineNumber === anchorLineNumber && msg.range.endLineNumber === anchorLineNumber) {\n\t\t\t\t// this message has a range that is completely sitting on the line of the anchor\n\t\t\t\trenderStartColumn = Math.max(Math.min(renderStartColumn, msg.range.startColumn), startColumnBoundary);\n\t\t\t}\n\t\t\tif (msg.forceShowAtRange) {\n\t\t\t\tforceShowAtRange = msg.range;\n\t\t\t}\n\t\t}\n\n\t\tconst showAtPosition = forceShowAtRange ? forceShowAtRange.getStartPosition() : new Position(anchorLineNumber, anchorRange.startColumn);\n\t\tconst showAtSecondaryPosition = forceShowAtRange ? forceShowAtRange.getStartPosition() : new Position(anchorLineNumber, renderStartColumn);\n\n\t\treturn {\n\t\t\tshowAtPosition,\n\t\t\tshowAtSecondaryPosition,\n\t\t\thighlightRange\n\t\t};\n\t}\n\n\t/**\n\t * Returns true if the hover shows now or will show.\n\t */\n\tpublic showsOrWillShow(mouseEvent: IEditorMouseEvent): boolean {\n\n\t\tif (this._widget.isResizing) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst anchorCandidates: HoverAnchor[] = [];\n\t\tfor (const participant of this._participants) {\n\t\t\tif (participant.suggestHoverAnchor) {\n\t\t\t\tconst anchor = participant.suggestHoverAnchor(mouseEvent);\n\t\t\t\tif (anchor) {\n\t\t\t\t\tanchorCandidates.push(anchor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst target = mouseEvent.target;\n\n\t\tif (target.type === MouseTargetType.CONTENT_TEXT) {\n\t\t\tanchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n\t\t}\n\n\t\tif (target.type === MouseTargetType.CONTENT_EMPTY) {\n\t\t\tconst epsilon = this._editor.getOption(EditorOption.fontInfo).typicalHalfwidthCharacterWidth / 2;\n\t\t\tif (\n\t\t\t\t!target.detail.isAfterLines\n\t\t\t\t&& typeof target.detail.horizontalDistanceToText === 'number'\n\t\t\t\t&& target.detail.horizontalDistanceToText < epsilon\n\t\t\t) {\n\t\t\t\t// Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough\n\t\t\t\tanchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n\t\t\t}\n\t\t}\n\n\t\tif (anchorCandidates.length === 0) {\n\t\t\treturn this._startShowingOrUpdateHover(null, HoverStartMode.Delayed, HoverStartSource.Mouse, false, mouseEvent);\n\t\t}\n\n\t\tanchorCandidates.sort((a, b) => b.priority - a.priority);\n\t\treturn this._startShowingOrUpdateHover(anchorCandidates[0], HoverStartMode.Delayed, HoverStartSource.Mouse, false, mouseEvent);\n\t}\n\n\tpublic startShowingAtRange(range: Range, mode: HoverStartMode, source: HoverStartSource, focus: boolean): void {\n\t\tthis._startShowingOrUpdateHover(new HoverRangeAnchor(0, range, undefined, undefined), mode, source, focus, null);\n\t}\n\n\tpublic getWidgetContent(): string | undefined {\n\t\tconst node = this._widget.getDomNode();\n\t\tif (!node.textContent) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn node.textContent;\n\t}\n\n\tpublic containsNode(node: Node | null | undefined): boolean {\n\t\treturn (node ? this._widget.getDomNode().contains(node) : false);\n\t}\n\n\tpublic focus(): void {\n\t\tthis._widget.focus();\n\t}\n\n\tpublic scrollUp(): void {\n\t\tthis._widget.scrollUp();\n\t}\n\n\tpublic scrollDown(): void {\n\t\tthis._widget.scrollDown();\n\t}\n\n\tpublic scrollLeft(): void {\n\t\tthis._widget.scrollLeft();\n\t}\n\n\tpublic scrollRight(): void {\n\t\tthis._widget.scrollRight();\n\t}\n\n\tpublic pageUp(): void {\n\t\tthis._widget.pageUp();\n\t}\n\n\tpublic pageDown(): void {\n\t\tthis._widget.pageDown();\n\t}\n\n\tpublic goToTop(): void {\n\t\tthis._widget.goToTop();\n\t}\n\n\tpublic goToBottom(): void {\n\t\tthis._widget.goToBottom();\n\t}\n\n\tpublic hide(): void {\n\t\tthis._computer.anchor = null;\n\t\tthis._hoverOperation.cancel();\n\t\tthis._setCurrentResult(null);\n\t}\n\n\tpublic get isColorPickerVisible(): boolean {\n\t\treturn this._widget.isColorPickerVisible;\n\t}\n\n\tpublic get isVisibleFromKeyboard(): boolean {\n\t\treturn this._widget.isVisibleFromKeyboard;\n\t}\n\n\tpublic get isVisible(): boolean {\n\t\treturn this._widget.isVisible;\n\t}\n\n\tpublic get isFocused(): boolean {\n\t\treturn this._widget.isFocused;\n\t}\n\n\tpublic get isResizing(): boolean {\n\t\treturn this._widget.isResizing;\n\t}\n\n\tpublic get widget() {\n\t\treturn this._widget;\n\t}\n}\n\nclass HoverResult {\n\n\tconstructor(\n\t\tpublic readonly anchor: HoverAnchor,\n\t\tpublic readonly messages: IHoverPart[],\n\t\tpublic readonly isComplete: boolean\n\t) { }\n\n\tpublic filter(anchor: HoverAnchor): HoverResult {\n\t\tconst filteredMessages = this.messages.filter((m) => m.isValidForHoverAnchor(anchor));\n\t\tif (filteredMessages.length === this.messages.length) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new FilteredHoverResult(this, this.anchor, filteredMessages, this.isComplete);\n\t}\n}\n\nclass FilteredHoverResult extends HoverResult {\n\n\tconstructor(\n\t\tprivate readonly original: HoverResult,\n\t\tanchor: HoverAnchor,\n\t\tmessages: IHoverPart[],\n\t\tisComplete: boolean\n\t) {\n\t\tsuper(anchor, messages, isComplete);\n\t}\n\n\tpublic override filter(anchor: HoverAnchor): HoverResult {\n\t\treturn this.original.filter(anchor);\n\t}\n}\n\nclass ContentHoverVisibleData {\n\n\tpublic closestMouseDistance: number | undefined = undefined;\n\n\tconstructor(\n\t\tpublic initialMousePosX: number | undefined,\n\t\tpublic initialMousePosY: number | undefined,\n\t\tpublic readonly colorPicker: IEditorHoverColorPickerWidget | null,\n\t\tpublic readonly showAtPosition: Position,\n\t\tpublic readonly showAtSecondaryPosition: Position,\n\t\tpublic readonly preferAbove: boolean,\n\t\tpublic readonly stoleFocus: boolean,\n\t\tpublic readonly source: HoverStartSource,\n\t\tpublic readonly isBeforeContent: boolean,\n\t\tpublic readonly disposables: DisposableStore\n\t) { }\n}\n\nconst HORIZONTAL_SCROLLING_BY = 30;\nconst SCROLLBAR_WIDTH = 10;\nconst CONTAINER_HEIGHT_PADDING = 6;\n\nexport class ContentHoverWidget extends ResizableContentWidget {\n\n\tpublic static ID = 'editor.contrib.resizableContentHoverWidget';\n\tprivate static _lastDimensions: dom.Dimension = new dom.Dimension(0, 0);\n\n\tprivate _visibleData: ContentHoverVisibleData | undefined;\n\tprivate _positionPreference: ContentWidgetPositionPreference | undefined;\n\tprivate _minimumSize: dom.Dimension;\n\tprivate _contentWidth: number | undefined;\n\n\tprivate readonly _hover: HoverWidget = this._register(new HoverWidget());\n\tprivate readonly _hoverVisibleKey: IContextKey<boolean>;\n\tprivate readonly _hoverFocusedKey: IContextKey<boolean>;\n\n\tpublic get isColorPickerVisible(): boolean {\n\t\treturn Boolean(this._visibleData?.colorPicker);\n\t}\n\n\tpublic get isVisibleFromKeyboard(): boolean {\n\t\treturn (this._visibleData?.source === HoverStartSource.Keyboard);\n\t}\n\n\tpublic get isVisible(): boolean {\n\t\treturn this._hoverVisibleKey.get() ?? false;\n\t}\n\n\tpublic get isFocused(): boolean {\n\t\treturn this._hoverFocusedKey.get() ?? false;\n\t}\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService\n\t) {\n\t\tconst minimumHeight = editor.getOption(EditorOption.lineHeight) + 8;\n\t\tconst minimumWidth = 150;\n\t\tconst minimumSize = new dom.Dimension(minimumWidth, minimumHeight);\n\t\tsuper(editor, minimumSize);\n\n\t\tthis._minimumSize = minimumSize;\n\t\tthis._hoverVisibleKey = EditorContextKeys.hoverVisible.bindTo(contextKeyService);\n\t\tthis._hoverFocusedKey = EditorContextKeys.hoverFocused.bindTo(contextKeyService);\n\n\t\tdom.append(this._resizableNode.domNode, this._hover.containerDomNode);\n\t\tthis._resizableNode.domNode.style.zIndex = '50';\n\n\t\tthis._register(this._editor.onDidLayoutChange(() => {\n\t\t\tif (this.isVisible) {\n\t\t\t\tthis._updateMaxDimensions();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._editor.onDidChangeConfiguration((e: ConfigurationChangedEvent) => {\n\t\t\tif (e.hasChanged(EditorOption.fontInfo)) {\n\t\t\t\tthis._updateFont();\n\t\t\t}\n\t\t}));\n\t\tconst focusTracker = this._register(dom.trackFocus(this._resizableNode.domNode));\n\t\tthis._register(focusTracker.onDidFocus(() => {\n\t\t\tthis._hoverFocusedKey.set(true);\n\t\t}));\n\t\tthis._register(focusTracker.onDidBlur(() => {\n\t\t\tthis._hoverFocusedKey.set(false);\n\t\t}));\n\t\tthis._setHoverData(undefined);\n\t\tthis._editor.addContentWidget(this);\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._visibleData?.disposables.dispose();\n\t\tthis._editor.removeContentWidget(this);\n\t}\n\n\tpublic getId(): string {\n\t\treturn ContentHoverWidget.ID;\n\t}\n\n\tprivate static _applyDimensions(container: HTMLElement, width: number | string, height: number | string): void {\n\t\tconst transformedWidth = typeof width === 'number' ? `${width}px` : width;\n\t\tconst transformedHeight = typeof height === 'number' ? `${height}px` : height;\n\t\tcontainer.style.width = transformedWidth;\n\t\tcontainer.style.height = transformedHeight;\n\t}\n\n\tprivate _setContentsDomNodeDimensions(width: number | string, height: number | string): void {\n\t\tconst contentsDomNode = this._hover.contentsDomNode;\n\t\treturn ContentHoverWidget._applyDimensions(contentsDomNode, width, height);\n\t}\n\n\tprivate _setContainerDomNodeDimensions(width: number | string, height: number | string): void {\n\t\tconst containerDomNode = this._hover.containerDomNode;\n\t\treturn ContentHoverWidget._applyDimensions(containerDomNode, width, height);\n\t}\n\n\tprivate _setHoverWidgetDimensions(width: number | string, height: number | string): void {\n\t\tthis._setContentsDomNodeDimensions(width, height);\n\t\tthis._setContainerDomNodeDimensions(width, height);\n\t\tthis._layoutContentWidget();\n\t}\n\n\tprivate static _applyMaxDimensions(container: HTMLElement, width: number | string, height: number | string) {\n\t\tconst transformedWidth = typeof width === 'number' ? `${width}px` : width;\n\t\tconst transformedHeight = typeof height === 'number' ? `${height}px` : height;\n\t\tcontainer.style.maxWidth = transformedWidth;\n\t\tcontainer.style.maxHeight = transformedHeight;\n\t}\n\n\tprivate _setHoverWidgetMaxDimensions(width: number | string, height: number | string): void {\n\t\tContentHoverWidget._applyMaxDimensions(this._hover.contentsDomNode, width, height);\n\t\tContentHoverWidget._applyMaxDimensions(this._hover.containerDomNode, width, height);\n\t\tthis._hover.containerDomNode.style.setProperty('--vscode-hover-maxWidth', typeof width === 'number' ? `${width}px` : width);\n\t\tthis._layoutContentWidget();\n\t}\n\n\tprivate _hasHorizontalScrollbar(): boolean {\n\t\tconst scrollDimensions = this._hover.scrollbar.getScrollDimensions();\n\t\tconst hasHorizontalScrollbar = scrollDimensions.scrollWidth > scrollDimensions.width;\n\t\treturn hasHorizontalScrollbar;\n\t}\n\n\tprivate _adjustContentsBottomPadding(): void {\n\t\tconst contentsDomNode = this._hover.contentsDomNode;\n\t\tconst extraBottomPadding = `${this._hover.scrollbar.options.horizontalScrollbarSize}px`;\n\t\tif (contentsDomNode.style.paddingBottom !== extraBottomPadding) {\n\t\t\tcontentsDomNode.style.paddingBottom = extraBottomPadding;\n\t\t}\n\t}\n\n\tprivate _setAdjustedHoverWidgetDimensions(size: dom.Dimension): void {\n\t\tthis._setHoverWidgetMaxDimensions('none', 'none');\n\t\tconst width = size.width;\n\t\tconst height = size.height;\n\t\tthis._setHoverWidgetDimensions(width, height);\n\t\t// measure if widget has horizontal scrollbar after setting the dimensions\n\t\tif (this._hasHorizontalScrollbar()) {\n\t\t\tthis._adjustContentsBottomPadding();\n\t\t\tthis._setContentsDomNodeDimensions(width, height - SCROLLBAR_WIDTH);\n\t\t}\n\t}\n\n\tprivate _updateResizableNodeMaxDimensions(): void {\n\t\tconst maxRenderingWidth = this._findMaximumRenderingWidth() ?? Infinity;\n\t\tconst maxRenderingHeight = this._findMaximumRenderingHeight() ?? Infinity;\n\t\tthis._resizableNode.maxSize = new dom.Dimension(maxRenderingWidth, maxRenderingHeight);\n\t\tthis._setHoverWidgetMaxDimensions(maxRenderingWidth, maxRenderingHeight);\n\t}\n\n\tprotected override _resize(size: dom.Dimension): void {\n\t\tContentHoverWidget._lastDimensions = new dom.Dimension(size.width, size.height);\n\t\tthis._setAdjustedHoverWidgetDimensions(size);\n\t\tthis._resizableNode.layout(size.height, size.width);\n\t\tthis._updateResizableNodeMaxDimensions();\n\t\tthis._hover.scrollbar.scanDomNode();\n\t\tthis._editor.layoutContentWidget(this);\n\t\tthis._visibleData?.colorPicker?.layout();\n\t}\n\n\tprivate _findAvailableSpaceVertically(): number | undefined {\n\t\tconst position = this._visibleData?.showAtPosition;\n\t\tif (!position) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._positionPreference === ContentWidgetPositionPreference.ABOVE ?\n\t\t\tthis._availableVerticalSpaceAbove(position)\n\t\t\t: this._availableVerticalSpaceBelow(position);\n\t}\n\n\tprivate _findMaximumRenderingHeight(): number | undefined {\n\t\tconst availableSpace = this._findAvailableSpaceVertically();\n\t\tif (!availableSpace) {\n\t\t\treturn;\n\t\t}\n\t\t// Padding needed in order to stop the resizing down to a smaller height\n\t\tlet maximumHeight = CONTAINER_HEIGHT_PADDING;\n\t\tArray.from(this._hover.contentsDomNode.children).forEach((hoverPart) => {\n\t\t\tmaximumHeight += hoverPart.clientHeight;\n\t\t});\n\n\t\tif (this._hasHorizontalScrollbar()) {\n\t\t\tmaximumHeight += SCROLLBAR_WIDTH;\n\t\t}\n\t\treturn Math.min(availableSpace, maximumHeight);\n\t}\n\n\tprivate _isHoverTextOverflowing(): boolean {\n\t\t// To find out if the text is overflowing, we will disable wrapping, check the widths, and then re-enable wrapping\n\t\tthis._hover.containerDomNode.style.setProperty('--vscode-hover-whiteSpace', 'nowrap');\n\t\tthis._hover.containerDomNode.style.setProperty('--vscode-hover-sourceWhiteSpace', 'nowrap');\n\n\t\tconst overflowing = Array.from(this._hover.contentsDomNode.children).some((hoverElement) => {\n\t\t\treturn hoverElement.scrollWidth > hoverElement.clientWidth;\n\t\t});\n\n\t\tthis._hover.containerDomNode.style.removeProperty('--vscode-hover-whiteSpace');\n\t\tthis._hover.containerDomNode.style.removeProperty('--vscode-hover-sourceWhiteSpace');\n\n\t\treturn overflowing;\n\t}\n\n\tprivate _findMaximumRenderingWidth(): number | undefined {\n\t\tif (!this._editor || !this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst overflowing = this._isHoverTextOverflowing();\n\t\tconst initialWidth = (\n\t\t\ttypeof this._contentWidth === 'undefined'\n\t\t\t\t? 0\n\t\t\t\t: this._contentWidth - 2 // - 2 for the borders\n\t\t);\n\n\t\tif (overflowing || this._hover.containerDomNode.clientWidth < initialWidth) {\n\t\t\tconst bodyBoxWidth = dom.getClientArea(this._hover.containerDomNode.ownerDocument.body).width;\n\t\t\tconst horizontalPadding = 14;\n\t\t\treturn bodyBoxWidth - horizontalPadding;\n\t\t} else {\n\t\t\treturn this._hover.containerDomNode.clientWidth + 2;\n\t\t}\n\t}\n\n\tpublic isMouseGettingCloser(posx: number, posy: number): boolean {\n\n\t\tif (!this._visibleData) {\n\t\t\treturn false;\n\t\t}\n\t\tif (\n\t\t\ttypeof this._visibleData.initialMousePosX === 'undefined'\n\t\t\t|| typeof this._visibleData.initialMousePosY === 'undefined'\n\t\t) {\n\t\t\tthis._visibleData.initialMousePosX = posx;\n\t\t\tthis._visibleData.initialMousePosY = posy;\n\t\t\treturn false;\n\t\t}\n\n\t\tconst widgetRect = dom.getDomNodePagePosition(this.getDomNode());\n\t\tif (typeof this._visibleData.closestMouseDistance === 'undefined') {\n\t\t\tthis._visibleData.closestMouseDistance = computeDistanceFromPointToRectangle(\n\t\t\t\tthis._visibleData.initialMousePosX,\n\t\t\t\tthis._visibleData.initialMousePosY,\n\t\t\t\twidgetRect.left,\n\t\t\t\twidgetRect.top,\n\t\t\t\twidgetRect.width,\n\t\t\t\twidgetRect.height\n\t\t\t);\n\t\t}\n\n\t\tconst distance = computeDistanceFromPointToRectangle(\n\t\t\tposx,\n\t\t\tposy,\n\t\t\twidgetRect.left,\n\t\t\twidgetRect.top,\n\t\t\twidgetRect.width,\n\t\t\twidgetRect.height\n\t\t);\n\t\tif (distance > this._visibleData.closestMouseDistance + 4 /* tolerance of 4 pixels */) {\n\t\t\t// The mouse is getting farther away\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._visibleData.closestMouseDistance = Math.min(this._visibleData.closestMouseDistance, distance);\n\t\treturn true;\n\t}\n\n\tprivate _setHoverData(hoverData: ContentHoverVisibleData | undefined): void {\n\t\tthis._visibleData?.disposables.dispose();\n\t\tthis._visibleData = hoverData;\n\t\tthis._hoverVisibleKey.set(!!hoverData);\n\t\tthis._hover.containerDomNode.classList.toggle('hidden', !hoverData);\n\t}\n\n\tprivate _updateFont(): void {\n\t\tconst { fontSize, lineHeight } = this._editor.getOption(EditorOption.fontInfo);\n\t\tconst contentsDomNode = this._hover.contentsDomNode;\n\t\tcontentsDomNode.style.fontSize = `${fontSize}px`;\n\t\tcontentsDomNode.style.lineHeight = `${lineHeight / fontSize}`;\n\t\tconst codeClasses: HTMLElement[] = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));\n\t\tcodeClasses.forEach(node => this._editor.applyFontInfo(node));\n\t}\n\n\tprivate _updateContent(node: DocumentFragment): void {\n\t\tconst contentsDomNode = this._hover.contentsDomNode;\n\t\tcontentsDomNode.style.paddingBottom = '';\n\t\tcontentsDomNode.textContent = '';\n\t\tcontentsDomNode.appendChild(node);\n\t}\n\n\tprivate _layoutContentWidget(): void {\n\t\tthis._editor.layoutContentWidget(this);\n\t\tthis._hover.onContentsChanged();\n\t}\n\n\tprivate _updateMaxDimensions() {\n\t\tconst height = Math.max(this._editor.getLayoutInfo().height / 4, overflowWidgetsSettings.hoverWidgetMaxHeight, ContentHoverWidget._lastDimensions.height);\n\t\tconst width = Math.max(this._editor.getLayoutInfo().width * 0.66, overflowWidgetsSettings.hoverWidgetMaxWidth, ContentHoverWidget._lastDimensions.width);\n\t\tthis._setHoverWidgetMaxDimensions(width, height);\n\t}\n\n\tprivate _render(node: DocumentFragment, hoverData: ContentHoverVisibleData) {\n\t\tthis._setHoverData(hoverData);\n\t\tthis._updateFont();\n\t\tthis._updateContent(node);\n\t\tthis._updateMaxDimensions();\n\t\tthis.onContentsChanged();\n\t\t// Simply force a synchronous render on the editor\n\t\t// such that the widget does not really render with left = '0px'\n\t\tthis._editor.render();\n\t}\n\n\toverride getPosition(): IContentWidgetPosition | null {\n\t\tif (!this._visibleData) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\tposition: this._visibleData.showAtPosition,\n\t\t\tsecondaryPosition: this._visibleData.showAtSecondaryPosition,\n\t\t\tpositionAffinity: this._visibleData.isBeforeContent ? PositionAffinity.LeftOfInjectedText : undefined,\n\t\t\tpreference: [this._positionPreference ?? ContentWidgetPositionPreference.ABOVE]\n\t\t};\n\t}\n\n\tpublic showAt(node: DocumentFragment, hoverData: ContentHoverVisibleData): void {\n\t\tif (!this._editor || !this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tthis._render(node, hoverData);\n\t\tconst widgetHeight = dom.getTotalHeight(this._hover.containerDomNode);\n\t\tconst widgetPosition = hoverData.showAtPosition;\n\t\tthis._positionPreference = this._findPositionPreference(widgetHeight, widgetPosition) ?? ContentWidgetPositionPreference.ABOVE;\n\n\t\t// See https://github.com/microsoft/vscode/issues/140339\n\t\t// TODO: Doing a second layout of the hover after force rendering the editor\n\t\tthis.onContentsChanged();\n\t\tif (hoverData.stoleFocus) {\n\t\t\tthis._hover.containerDomNode.focus();\n\t\t}\n\t\thoverData.colorPicker?.layout();\n\t\t// The aria label overrides the label, so if we add to it, add the contents of the hover\n\t\tconst hoverFocused = this._hover.containerDomNode.ownerDocument.activeElement === this._hover.containerDomNode;\n\t\tconst accessibleViewHint = hoverFocused && getHoverAccessibleViewHint(\n\t\t\tthis._configurationService.getValue('accessibility.verbosity.hover') === true && this._accessibilityService.isScreenReaderOptimized(),\n\t\t\tthis._keybindingService.lookupKeybinding('editor.action.accessibleView')?.getAriaLabel() ?? ''\n\t\t);\n\n\t\tif (accessibleViewHint) {\n\t\t\tthis._hover.contentsDomNode.ariaLabel = this._hover.contentsDomNode.textContent + ', ' + accessibleViewHint;\n\t\t}\n\t}\n\n\tpublic hide(): void {\n\t\tif (!this._visibleData) {\n\t\t\treturn;\n\t\t}\n\t\tconst stoleFocus = this._visibleData.stoleFocus || this._hoverFocusedKey.get();\n\t\tthis._setHoverData(undefined);\n\t\tthis._resizableNode.maxSize = new dom.Dimension(Infinity, Infinity);\n\t\tthis._resizableNode.clearSashHoverState();\n\t\tthis._hoverFocusedKey.set(false);\n\t\tthis._editor.layoutContentWidget(this);\n\t\tif (stoleFocus) {\n\t\t\tthis._editor.focus();\n\t\t}\n\t}\n\n\tprivate _removeConstraintsRenderNormally(): void {\n\t\t// Added because otherwise the initial size of the hover content is smaller than should be\n\t\tconst layoutInfo = this._editor.getLayoutInfo();\n\t\tthis._resizableNode.layout(layoutInfo.height, layoutInfo.width);\n\t\tthis._setHoverWidgetDimensions('auto', 'auto');\n\t}\n\n\tprivate _adjustHoverHeightForScrollbar(height: number) {\n\t\tconst containerDomNode = this._hover.containerDomNode;\n\t\tconst contentsDomNode = this._hover.contentsDomNode;\n\t\tconst maxRenderingHeight = this._findMaximumRenderingHeight() ?? Infinity;\n\t\tthis._setContainerDomNodeDimensions(dom.getTotalWidth(containerDomNode), Math.min(maxRenderingHeight, height));\n\t\tthis._setContentsDomNodeDimensions(dom.getTotalWidth(contentsDomNode), Math.min(maxRenderingHeight, height - SCROLLBAR_WIDTH));\n\t}\n\n\tpublic setMinimumDimensions(dimensions: dom.Dimension): void {\n\t\t// We combine the new minimum dimensions with the previous ones\n\t\tthis._minimumSize = new dom.Dimension(\n\t\t\tMath.max(this._minimumSize.width, dimensions.width),\n\t\t\tMath.max(this._minimumSize.height, dimensions.height)\n\t\t);\n\t\tthis._updateMinimumWidth();\n\t}\n\n\tprivate _updateMinimumWidth(): void {\n\t\tconst width = (\n\t\t\ttypeof this._contentWidth === 'undefined'\n\t\t\t\t? this._minimumSize.width\n\t\t\t\t: Math.min(this._contentWidth, this._minimumSize.width)\n\t\t);\n\t\t// We want to avoid that the hover is artificially large, so we use the content width as minimum width\n\t\tthis._resizableNode.minSize = new dom.Dimension(width, this._minimumSize.height);\n\t}\n\n\tpublic onContentsChanged(): void {\n\t\tthis._removeConstraintsRenderNormally();\n\t\tconst containerDomNode = this._hover.containerDomNode;\n\n\t\tlet height = dom.getTotalHeight(containerDomNode);\n\t\tlet width = dom.getTotalWidth(containerDomNode);\n\t\tthis._resizableNode.layout(height, width);\n\n\t\tthis._setHoverWidgetDimensions(width, height);\n\n\t\theight = dom.getTotalHeight(containerDomNode);\n\t\twidth = dom.getTotalWidth(containerDomNode);\n\t\tthis._contentWidth = width;\n\t\tthis._updateMinimumWidth();\n\t\tthis._resizableNode.layout(height, width);\n\n\t\tif (this._hasHorizontalScrollbar()) {\n\t\t\tthis._adjustContentsBottomPadding();\n\t\t\tthis._adjustHoverHeightForScrollbar(height);\n\t\t}\n\t\tif (this._visibleData?.showAtPosition) {\n\t\t\tconst widgetHeight = dom.getTotalHeight(this._hover.containerDomNode);\n\t\t\tthis._positionPreference = this._findPositionPreference(widgetHeight, this._visibleData.showAtPosition);\n\t\t}\n\t\tthis._layoutContentWidget();\n\t}\n\n\tpublic focus(): void {\n\t\tthis._hover.containerDomNode.focus();\n\t}\n\n\tpublic scrollUp(): void {\n\t\tconst scrollTop = this._hover.scrollbar.getScrollPosition().scrollTop;\n\t\tconst fontInfo = this._editor.getOption(EditorOption.fontInfo);\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollTop: scrollTop - fontInfo.lineHeight });\n\t}\n\n\tpublic scrollDown(): void {\n\t\tconst scrollTop = this._hover.scrollbar.getScrollPosition().scrollTop;\n\t\tconst fontInfo = this._editor.getOption(EditorOption.fontInfo);\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollTop: scrollTop + fontInfo.lineHeight });\n\t}\n\n\tpublic scrollLeft(): void {\n\t\tconst scrollLeft = this._hover.scrollbar.getScrollPosition().scrollLeft;\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollLeft: scrollLeft - HORIZONTAL_SCROLLING_BY });\n\t}\n\n\tpublic scrollRight(): void {\n\t\tconst scrollLeft = this._hover.scrollbar.getScrollPosition().scrollLeft;\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollLeft: scrollLeft + HORIZONTAL_SCROLLING_BY });\n\t}\n\n\tpublic pageUp(): void {\n\t\tconst scrollTop = this._hover.scrollbar.getScrollPosition().scrollTop;\n\t\tconst scrollHeight = this._hover.scrollbar.getScrollDimensions().height;\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollTop: scrollTop - scrollHeight });\n\t}\n\n\tpublic pageDown(): void {\n\t\tconst scrollTop = this._hover.scrollbar.getScrollPosition().scrollTop;\n\t\tconst scrollHeight = this._hover.scrollbar.getScrollDimensions().height;\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollTop: scrollTop + scrollHeight });\n\t}\n\n\tpublic goToTop(): void {\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollTop: 0 });\n\t}\n\n\tpublic goToBottom(): void {\n\t\tthis._hover.scrollbar.setScrollPosition({ scrollTop: this._hover.scrollbar.getScrollDimensions().scrollHeight });\n\t}\n}\n\nexport class EditorHoverStatusBar extends Disposable implements IEditorHoverStatusBar {\n\n\tpublic readonly hoverElement: HTMLElement;\n\tprivate readonly actionsElement: HTMLElement;\n\tprivate _hasContent: boolean = false;\n\n\tpublic get hasContent() {\n\t\treturn this._hasContent;\n\t}\n\n\tconstructor(\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t) {\n\t\tsuper();\n\t\tthis.hoverElement = $('div.hover-row.status-bar');\n\t\tthis.actionsElement = dom.append(this.hoverElement, $('div.actions'));\n\t}\n\n\tpublic addAction(\n\t\tactionOptions: {\n\t\t\tlabel: string;\n\t\t\ticonClass?: string; run: (target: HTMLElement) => void;\n\t\t\tcommandId: string;\n\t\t}): IEditorHoverAction {\n\n\t\tconst keybinding = this._keybindingService.lookupKeybinding(actionOptions.commandId);\n\t\tconst keybindingLabel = keybinding ? keybinding.getLabel() : null;\n\t\tthis._hasContent = true;\n\t\treturn this._register(HoverAction.render(this.actionsElement, actionOptions, keybindingLabel));\n\t}\n\n\tpublic append(element: HTMLElement): HTMLElement {\n\t\tconst result = dom.append(this.actionsElement, element);\n\t\tthis._hasContent = true;\n\t\treturn result;\n\t}\n}\n\nclass ContentHoverComputer implements IHoverComputer<IHoverPart> {\n\n\tprivate _anchor: HoverAnchor | null = null;\n\tpublic get anchor(): HoverAnchor | null { return this._anchor; }\n\tpublic set anchor(value: HoverAnchor | null) { this._anchor = value; }\n\n\tprivate _shouldFocus: boolean = false;\n\tpublic get shouldFocus(): boolean { return this._shouldFocus; }\n\tpublic set shouldFocus(value: boolean) { this._shouldFocus = value; }\n\n\tprivate _source: HoverStartSource = HoverStartSource.Mouse;\n\tpublic get source(): HoverStartSource { return this._source; }\n\tpublic set source(value: HoverStartSource) { this._source = value; }\n\n\tprivate _insistOnKeepingHoverVisible: boolean = false;\n\tpublic get insistOnKeepingHoverVisible(): boolean { return this._insistOnKeepingHoverVisible; }\n\tpublic set insistOnKeepingHoverVisible(value: boolean) { this._insistOnKeepingHoverVisible = value; }\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _participants: readonly IEditorHoverParticipant[]\n\t) {\n\t}\n\n\tprivate static _getLineDecorations(editor: IActiveCodeEditor, anchor: HoverAnchor): IModelDecoration[] {\n\t\tif (anchor.type !== HoverAnchorType.Range && !anchor.supportsMarkerHover) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tconst lineNumber = anchor.range.startLineNumber;\n\n\t\tif (lineNumber > model.getLineCount()) {\n\t\t\t// invalid line\n\t\t\treturn [];\n\t\t}\n\n\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\n\t\treturn editor.getLineDecorations(lineNumber).filter((d) => {\n\t\t\tif (d.options.isWholeLine) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst startColumn = (d.range.startLineNumber === lineNumber) ? d.range.startColumn : 1;\n\t\t\tconst endColumn = (d.range.endLineNumber === lineNumber) ? d.range.endColumn : maxColumn;\n\n\t\t\tif (d.options.showIfCollapsed) {\n\t\t\t\t// Relax check around `showIfCollapsed` decorations to also include +/- 1 character\n\t\t\t\tif (startColumn > anchor.range.startColumn + 1 || anchor.range.endColumn - 1 > endColumn) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (startColumn > anchor.range.startColumn || anchor.range.endColumn > endColumn) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tpublic computeAsync(token: CancellationToken): AsyncIterableObject<IHoverPart> {\n\t\tconst anchor = this._anchor;\n\n\t\tif (!this._editor.hasModel() || !anchor) {\n\t\t\treturn AsyncIterableObject.EMPTY;\n\t\t}\n\n\t\tconst lineDecorations = ContentHoverComputer._getLineDecorations(this._editor, anchor);\n\n\t\treturn AsyncIterableObject.merge(\n\t\t\tthis._participants.map((participant) => {\n\t\t\t\tif (!participant.computeAsync) {\n\t\t\t\t\treturn AsyncIterableObject.EMPTY;\n\t\t\t\t}\n\t\t\t\treturn participant.computeAsync(anchor, lineDecorations, token);\n\t\t\t})\n\t\t);\n\t}\n\n\tpublic computeSync(): IHoverPart[] {\n\t\tif (!this._editor.hasModel() || !this._anchor) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst lineDecorations = ContentHoverComputer._getLineDecorations(this._editor, this._anchor);\n\n\t\tlet result: IHoverPart[] = [];\n\t\tfor (const participant of this._participants) {\n\t\t\tresult = result.concat(participant.computeSync(this._anchor, lineDecorations));\n\t\t}\n\n\t\treturn coalesce(result);\n\t}\n}\n\nfunction computeDistanceFromPointToRectangle(pointX: number, pointY: number, left: number, top: number, width: number, height: number): number {\n\tconst x = (left + width / 2); // x center of rectangle\n\tconst y = (top + height / 2); // y center of rectangle\n\tconst dx = Math.max(Math.abs(pointX - x) - width / 2, 0);\n\tconst dy = Math.max(Math.abs(pointY - y) - height / 2, 0);\n\treturn Math.sqrt(dx * dx + dy * dy);\n}\n"]}