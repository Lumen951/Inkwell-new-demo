"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoFixAction = exports.FixAllAction = exports.OrganizeImportsAction = exports.SourceAction = exports.RefactorAction = exports.CodeActionCommand = exports.QuickFixAction = void 0;
const strings_1 = require("../../../../base/common/strings");
const editorExtensions_1 = require("../../../browser/editorExtensions");
const editorContextKeys_1 = require("../../../common/editorContextKeys");
const codeAction_1 = require("./codeAction");
const nls = require("../../../../nls");
const contextkey_1 = require("../../../../platform/contextkey/common/contextkey");
const types_1 = require("../common/types");
const codeActionController_1 = require("./codeActionController");
const codeActionModel_1 = require("./codeActionModel");
function contextKeyForSupportedActions(kind) {
    return contextkey_1.ContextKeyExpr.regex(codeActionModel_1.SUPPORTED_CODE_ACTIONS.keys()[0], new RegExp('(\\s|^)' + (0, strings_1.escapeRegExpCharacters)(kind.value) + '\\b'));
}
const argsSchema = {
    type: 'object',
    defaultSnippets: [{ body: { kind: '' } }],
    properties: {
        'kind': {
            type: 'string',
            description: nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",0, "Kind of the code action to run."),
        },
        'apply': {
            type: 'string',
            description: nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",1, "Controls when the returned actions are applied."),
            default: "ifSingle" /* CodeActionAutoApply.IfSingle */,
            enum: ["first" /* CodeActionAutoApply.First */, "ifSingle" /* CodeActionAutoApply.IfSingle */, "never" /* CodeActionAutoApply.Never */],
            enumDescriptions: [
                nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",2, "Always apply the first returned code action."),
                nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",3, "Apply the first returned code action if it is the only one."),
                nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",4, "Do not apply the returned code actions."),
            ]
        },
        'preferred': {
            type: 'boolean',
            default: false,
            description: nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",5, "Controls if only preferred code actions should be returned."),
        }
    }
};
function triggerCodeActionsForEditorSelection(editor, notAvailableMessage, filter, autoApply, triggerAction = types_1.CodeActionTriggerSource.Default) {
    if (editor.hasModel()) {
        const controller = codeActionController_1.CodeActionController.get(editor);
        controller === null || controller === void 0 ? void 0 : controller.manualTriggerAtCurrentPosition(notAvailableMessage, triggerAction, filter, autoApply);
    }
}
class QuickFixAction extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: codeAction_1.quickFixCommandId,
            label: nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",6, "Quick Fix..."),
            alias: 'Quick Fix...',
            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasCodeActionsProvider),
            kbOpts: {
                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,
                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            }
        });
    }
    run(_accessor, editor) {
        return triggerCodeActionsForEditorSelection(editor, nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",7, "No code actions available"), undefined, undefined, types_1.CodeActionTriggerSource.QuickFix);
    }
}
exports.QuickFixAction = QuickFixAction;
class CodeActionCommand extends editorExtensions_1.EditorCommand {
    constructor() {
        super({
            id: codeAction_1.codeActionCommandId,
            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasCodeActionsProvider),
            metadata: {
                description: 'Trigger a code action',
                args: [{ name: 'args', schema: argsSchema, }]
            }
        });
    }
    runEditorCommand(_accessor, editor, userArgs) {
        const args = types_1.CodeActionCommandArgs.fromUser(userArgs, {
            kind: types_1.CodeActionKind.Empty,
            apply: "ifSingle" /* CodeActionAutoApply.IfSingle */,
        });
        return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string'
            ? args.preferred
                ? nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",8, "No preferred code actions for '{0}' available", userArgs.kind)
                : nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",9, "No code actions for '{0}' available", userArgs.kind)
            : args.preferred
                ? nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",10, "No preferred code actions available")
                : nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",11, "No code actions available"), {
            include: args.kind,
            includeSourceActions: true,
            onlyIncludePreferredActions: args.preferred,
        }, args.apply);
    }
}
exports.CodeActionCommand = CodeActionCommand;
class RefactorAction extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: codeAction_1.refactorCommandId,
            label: nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",12, "Refactor..."),
            alias: 'Refactor...',
            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasCodeActionsProvider),
            kbOpts: {
                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,
                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 48 /* KeyCode.KeyR */,
                mac: {
                    primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 48 /* KeyCode.KeyR */
                },
                weight: 100 /* KeybindingWeight.EditorContrib */
            },
            contextMenuOpts: {
                group: '1_modification',
                order: 2,
                when: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, contextKeyForSupportedActions(types_1.CodeActionKind.Refactor)),
            },
            metadata: {
                description: 'Refactor...',
                args: [{ name: 'args', schema: argsSchema }]
            }
        });
    }
    run(_accessor, editor, userArgs) {
        const args = types_1.CodeActionCommandArgs.fromUser(userArgs, {
            kind: types_1.CodeActionKind.Refactor,
            apply: "never" /* CodeActionAutoApply.Never */
        });
        return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string'
            ? args.preferred
                ? nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",13, "No preferred refactorings for '{0}' available", userArgs.kind)
                : nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",14, "No refactorings for '{0}' available", userArgs.kind)
            : args.preferred
                ? nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",15, "No preferred refactorings available")
                : nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",16, "No refactorings available"), {
            include: types_1.CodeActionKind.Refactor.contains(args.kind) ? args.kind : types_1.CodeActionKind.None,
            onlyIncludePreferredActions: args.preferred
        }, args.apply, types_1.CodeActionTriggerSource.Refactor);
    }
}
exports.RefactorAction = RefactorAction;
class SourceAction extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: codeAction_1.sourceActionCommandId,
            label: nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",17, "Source Action..."),
            alias: 'Source Action...',
            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasCodeActionsProvider),
            contextMenuOpts: {
                group: '1_modification',
                order: 2.1,
                when: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, contextKeyForSupportedActions(types_1.CodeActionKind.Source)),
            },
            metadata: {
                description: 'Source Action...',
                args: [{ name: 'args', schema: argsSchema }]
            }
        });
    }
    run(_accessor, editor, userArgs) {
        const args = types_1.CodeActionCommandArgs.fromUser(userArgs, {
            kind: types_1.CodeActionKind.Source,
            apply: "never" /* CodeActionAutoApply.Never */
        });
        return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string'
            ? args.preferred
                ? nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",18, "No preferred source actions for '{0}' available", userArgs.kind)
                : nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",19, "No source actions for '{0}' available", userArgs.kind)
            : args.preferred
                ? nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",20, "No preferred source actions available")
                : nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",21, "No source actions available"), {
            include: types_1.CodeActionKind.Source.contains(args.kind) ? args.kind : types_1.CodeActionKind.None,
            includeSourceActions: true,
            onlyIncludePreferredActions: args.preferred,
        }, args.apply, types_1.CodeActionTriggerSource.SourceAction);
    }
}
exports.SourceAction = SourceAction;
class OrganizeImportsAction extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: codeAction_1.organizeImportsCommandId,
            label: nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",22, "Organize Imports"),
            alias: 'Organize Imports',
            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, contextKeyForSupportedActions(types_1.CodeActionKind.SourceOrganizeImports)),
            kbOpts: {
                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,
                primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 45 /* KeyCode.KeyO */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            },
        });
    }
    run(_accessor, editor) {
        return triggerCodeActionsForEditorSelection(editor, nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",23, "No organize imports action available"), { include: types_1.CodeActionKind.SourceOrganizeImports, includeSourceActions: true }, "ifSingle" /* CodeActionAutoApply.IfSingle */, types_1.CodeActionTriggerSource.OrganizeImports);
    }
}
exports.OrganizeImportsAction = OrganizeImportsAction;
class FixAllAction extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: codeAction_1.fixAllCommandId,
            label: nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",24, "Fix All"),
            alias: 'Fix All',
            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, contextKeyForSupportedActions(types_1.CodeActionKind.SourceFixAll))
        });
    }
    run(_accessor, editor) {
        return triggerCodeActionsForEditorSelection(editor, nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",25, "No fix all action available"), { include: types_1.CodeActionKind.SourceFixAll, includeSourceActions: true }, "ifSingle" /* CodeActionAutoApply.IfSingle */, types_1.CodeActionTriggerSource.FixAll);
    }
}
exports.FixAllAction = FixAllAction;
class AutoFixAction extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: codeAction_1.autoFixCommandId,
            label: nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",26, "Auto Fix..."),
            alias: 'Auto Fix...',
            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, contextKeyForSupportedActions(types_1.CodeActionKind.QuickFix)),
            kbOpts: {
                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,
                primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 89 /* KeyCode.Period */,
                mac: {
                    primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 89 /* KeyCode.Period */
                },
                weight: 100 /* KeybindingWeight.EditorContrib */
            }
        });
    }
    run(_accessor, editor) {
        return triggerCodeActionsForEditorSelection(editor, nls.localize("vs/editor/contrib/codeAction/browser/codeActionCommands",27, "No auto fixes available"), {
            include: types_1.CodeActionKind.QuickFix,
            onlyIncludePreferredActions: true
        }, "ifSingle" /* CodeActionAutoApply.IfSingle */, types_1.CodeActionTriggerSource.AutoFix);
    }
}
exports.AutoFixAction = AutoFixAction;
//# sourceMappingURL=codeActionCommands.js.map