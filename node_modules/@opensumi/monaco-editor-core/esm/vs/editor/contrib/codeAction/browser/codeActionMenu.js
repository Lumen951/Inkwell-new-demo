"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.toMenuItems = void 0;
require("../../../../base/browser/ui/codicons/codiconStyles"); // The codicon symbol styles are defined here and must be loaded
const codicons_1 = require("../../../../base/common/codicons");
const types_1 = require("../common/types");
require("../../symbolIcons/browser/symbolIcons"); // The codicon symbol colors are defined here and must be loaded to get colors
const nls_1 = require("../../../../nls");
const uncategorizedCodeActionGroup = Object.freeze({ kind: types_1.CodeActionKind.Empty, title: (0, nls_1.localize)("vs/editor/contrib/codeAction/browser/codeActionMenu",0, 'More Actions...') });
const codeActionGroups = Object.freeze([
    { kind: types_1.CodeActionKind.QuickFix, title: (0, nls_1.localize)("vs/editor/contrib/codeAction/browser/codeActionMenu",1, 'Quick Fix') },
    { kind: types_1.CodeActionKind.RefactorExtract, title: (0, nls_1.localize)("vs/editor/contrib/codeAction/browser/codeActionMenu",2, 'Extract'), icon: codicons_1.Codicon.wrench },
    { kind: types_1.CodeActionKind.RefactorInline, title: (0, nls_1.localize)("vs/editor/contrib/codeAction/browser/codeActionMenu",3, 'Inline'), icon: codicons_1.Codicon.wrench },
    { kind: types_1.CodeActionKind.RefactorRewrite, title: (0, nls_1.localize)("vs/editor/contrib/codeAction/browser/codeActionMenu",4, 'Rewrite'), icon: codicons_1.Codicon.wrench },
    { kind: types_1.CodeActionKind.RefactorMove, title: (0, nls_1.localize)("vs/editor/contrib/codeAction/browser/codeActionMenu",5, 'Move'), icon: codicons_1.Codicon.wrench },
    { kind: types_1.CodeActionKind.SurroundWith, title: (0, nls_1.localize)("vs/editor/contrib/codeAction/browser/codeActionMenu",6, 'Surround With'), icon: codicons_1.Codicon.surroundWith },
    { kind: types_1.CodeActionKind.Source, title: (0, nls_1.localize)("vs/editor/contrib/codeAction/browser/codeActionMenu",7, 'Source Action'), icon: codicons_1.Codicon.symbolFile },
    uncategorizedCodeActionGroup,
]);
function toMenuItems(inputCodeActions, showHeaders, keybindingResolver) {
    if (!showHeaders) {
        return inputCodeActions.map((action) => {
            var _a;
            return {
                kind: "action" /* ActionListItemKind.Action */,
                item: action,
                group: uncategorizedCodeActionGroup,
                disabled: !!action.action.disabled,
                label: action.action.disabled || action.action.title,
                canPreview: !!((_a = action.action.edit) === null || _a === void 0 ? void 0 : _a.edits.length),
            };
        });
    }
    // Group code actions
    const menuEntries = codeActionGroups.map(group => ({ group, actions: [] }));
    for (const action of inputCodeActions) {
        const kind = action.action.kind ? new types_1.CodeActionKind(action.action.kind) : types_1.CodeActionKind.None;
        for (const menuEntry of menuEntries) {
            if (menuEntry.group.kind.contains(kind)) {
                menuEntry.actions.push(action);
                break;
            }
        }
    }
    const allMenuItems = [];
    for (const menuEntry of menuEntries) {
        if (menuEntry.actions.length) {
            allMenuItems.push({ kind: "header" /* ActionListItemKind.Header */, group: menuEntry.group });
            for (const action of menuEntry.actions) {
                const group = menuEntry.group;
                allMenuItems.push({
                    kind: "action" /* ActionListItemKind.Action */,
                    item: action,
                    group: action.action.isAI ? { title: group.title, kind: group.kind, icon: codicons_1.Codicon.sparkle } : group,
                    label: action.action.title,
                    disabled: !!action.action.disabled,
                    keybinding: keybindingResolver(action.action),
                });
            }
        }
    }
    return allMenuItems;
}
exports.toMenuItems = toMenuItems;
//# sourceMappingURL=codeActionMenu.js.map