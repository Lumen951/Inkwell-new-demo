{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/codeAction/browser/codeActionKeybindingResolver.ts","vs/editor/contrib/codeAction/browser/codeActionKeybindingResolver.ts"],"names":[],"mappings":"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","file":"codeActionKeybindingResolver.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ResolvedKeybinding } from '../../../../base/common/keybindings';\nimport { Lazy } from '../../../../base/common/lazy';\nimport { CodeAction } from '../../../common/languages';\nimport { codeActionCommandId, fixAllCommandId, organizeImportsCommandId, refactorCommandId, sourceActionCommandId } from './codeAction';\nimport { CodeActionAutoApply, CodeActionCommandArgs, CodeActionKind } from '../common/types';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';\n\ninterface ResolveCodeActionKeybinding {\n\treadonly kind: CodeActionKind;\n\treadonly preferred: boolean;\n\treadonly resolvedKeybinding: ResolvedKeybinding;\n}\n\nexport class CodeActionKeybindingResolver {\n\tprivate static readonly codeActionCommands: readonly string[] = [\n\t\trefactorCommandId,\n\t\tcodeActionCommandId,\n\t\tsourceActionCommandId,\n\t\torganizeImportsCommandId,\n\t\tfixAllCommandId\n\t];\n\n\tconstructor(\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) { }\n\n\tpublic getResolver(): (action: CodeAction) => ResolvedKeybinding | undefined {\n\t\t// Lazy since we may not actually ever read the value\n\t\tconst allCodeActionBindings = new Lazy<readonly ResolveCodeActionKeybinding[]>(() => this.keybindingService.getKeybindings()\n\t\t\t.filter(item => CodeActionKeybindingResolver.codeActionCommands.indexOf(item.command!) >= 0)\n\t\t\t.filter(item => item.resolvedKeybinding)\n\t\t\t.map((item): ResolveCodeActionKeybinding => {\n\t\t\t\t// Special case these commands since they come built-in with VS Code and don't use 'commandArgs'\n\t\t\t\tlet commandArgs = item.commandArgs;\n\t\t\t\tif (item.command === organizeImportsCommandId) {\n\t\t\t\t\tcommandArgs = { kind: CodeActionKind.SourceOrganizeImports.value };\n\t\t\t\t} else if (item.command === fixAllCommandId) {\n\t\t\t\t\tcommandArgs = { kind: CodeActionKind.SourceFixAll.value };\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tresolvedKeybinding: item.resolvedKeybinding!,\n\t\t\t\t\t...CodeActionCommandArgs.fromUser(commandArgs, {\n\t\t\t\t\t\tkind: CodeActionKind.None,\n\t\t\t\t\t\tapply: CodeActionAutoApply.Never\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t}));\n\n\t\treturn (action) => {\n\t\t\tif (action.kind) {\n\t\t\t\tconst binding = this.bestKeybindingForCodeAction(action, allCodeActionBindings.value);\n\t\t\t\treturn binding?.resolvedKeybinding;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t}\n\n\tprivate bestKeybindingForCodeAction(\n\t\taction: CodeAction,\n\t\tcandidates: readonly ResolveCodeActionKeybinding[]\n\t): ResolveCodeActionKeybinding | undefined {\n\t\tif (!action.kind) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst kind = new CodeActionKind(action.kind);\n\n\t\treturn candidates\n\t\t\t.filter(candidate => candidate.kind.contains(kind))\n\t\t\t.filter(candidate => {\n\t\t\t\tif (candidate.preferred) {\n\t\t\t\t\t// If the candidate keybinding only applies to preferred actions, the this action must also be preferred\n\t\t\t\t\treturn action.isPreferred;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.reduceRight((currentBest, candidate) => {\n\t\t\t\tif (!currentBest) {\n\t\t\t\t\treturn candidate;\n\t\t\t\t}\n\t\t\t\t// Select the more specific binding\n\t\t\t\treturn currentBest.kind.contains(candidate.kind) ? candidate : currentBest;\n\t\t\t}, undefined as ResolveCodeActionKeybinding | undefined);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ResolvedKeybinding } from '../../../../base/common/keybindings';\nimport { Lazy } from '../../../../base/common/lazy';\nimport { CodeAction } from '../../../common/languages';\nimport { codeActionCommandId, fixAllCommandId, organizeImportsCommandId, refactorCommandId, sourceActionCommandId } from './codeAction';\nimport { CodeActionAutoApply, CodeActionCommandArgs, CodeActionKind } from '../common/types';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';\n\ninterface ResolveCodeActionKeybinding {\n\treadonly kind: CodeActionKind;\n\treadonly preferred: boolean;\n\treadonly resolvedKeybinding: ResolvedKeybinding;\n}\n\nexport class CodeActionKeybindingResolver {\n\tprivate static readonly codeActionCommands: readonly string[] = [\n\t\trefactorCommandId,\n\t\tcodeActionCommandId,\n\t\tsourceActionCommandId,\n\t\torganizeImportsCommandId,\n\t\tfixAllCommandId\n\t];\n\n\tconstructor(\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) { }\n\n\tpublic getResolver(): (action: CodeAction) => ResolvedKeybinding | undefined {\n\t\t// Lazy since we may not actually ever read the value\n\t\tconst allCodeActionBindings = new Lazy<readonly ResolveCodeActionKeybinding[]>(() => this.keybindingService.getKeybindings()\n\t\t\t.filter(item => CodeActionKeybindingResolver.codeActionCommands.indexOf(item.command!) >= 0)\n\t\t\t.filter(item => item.resolvedKeybinding)\n\t\t\t.map((item): ResolveCodeActionKeybinding => {\n\t\t\t\t// Special case these commands since they come built-in with VS Code and don't use 'commandArgs'\n\t\t\t\tlet commandArgs = item.commandArgs;\n\t\t\t\tif (item.command === organizeImportsCommandId) {\n\t\t\t\t\tcommandArgs = { kind: CodeActionKind.SourceOrganizeImports.value };\n\t\t\t\t} else if (item.command === fixAllCommandId) {\n\t\t\t\t\tcommandArgs = { kind: CodeActionKind.SourceFixAll.value };\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tresolvedKeybinding: item.resolvedKeybinding!,\n\t\t\t\t\t...CodeActionCommandArgs.fromUser(commandArgs, {\n\t\t\t\t\t\tkind: CodeActionKind.None,\n\t\t\t\t\t\tapply: CodeActionAutoApply.Never\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t}));\n\n\t\treturn (action) => {\n\t\t\tif (action.kind) {\n\t\t\t\tconst binding = this.bestKeybindingForCodeAction(action, allCodeActionBindings.value);\n\t\t\t\treturn binding?.resolvedKeybinding;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t}\n\n\tprivate bestKeybindingForCodeAction(\n\t\taction: CodeAction,\n\t\tcandidates: readonly ResolveCodeActionKeybinding[]\n\t): ResolveCodeActionKeybinding | undefined {\n\t\tif (!action.kind) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst kind = new CodeActionKind(action.kind);\n\n\t\treturn candidates\n\t\t\t.filter(candidate => candidate.kind.contains(kind))\n\t\t\t.filter(candidate => {\n\t\t\t\tif (candidate.preferred) {\n\t\t\t\t\t// If the candidate keybinding only applies to preferred actions, the this action must also be preferred\n\t\t\t\t\treturn action.isPreferred;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.reduceRight((currentBest, candidate) => {\n\t\t\t\tif (!currentBest) {\n\t\t\t\t\treturn candidate;\n\t\t\t\t}\n\t\t\t\t// Select the more specific binding\n\t\t\t\treturn currentBest.kind.contains(candidate.kind) ? candidate : currentBest;\n\t\t\t}, undefined as ResolveCodeActionKeybinding | undefined);\n\t}\n}\n"]}