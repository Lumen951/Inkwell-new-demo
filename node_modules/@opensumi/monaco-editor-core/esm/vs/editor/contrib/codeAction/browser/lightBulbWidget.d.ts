import { Emitter, Event } from '../../../../base/common/event';
import { Disposable } from '../../../../base/common/lifecycle';
import './lightBulbWidget.css';
import { ContentWidgetPositionPreference, ICodeEditor, IContentWidget, IContentWidgetPosition } from '../../../browser/editorBrowser';
import { IPosition } from '../../../common/core/position';
import type { CodeActionSet, CodeActionTrigger } from '../common/types';
import { ICommandService } from '../../../../platform/commands/common/commands';
import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';
export declare namespace LightBulbState {
    enum Type {
        Hidden = 0,
        Showing = 1
    }
    const Hidden: {
        readonly type: Type.Hidden;
    };
    class Showing {
        readonly actions: CodeActionSet;
        readonly trigger: CodeActionTrigger;
        readonly editorPosition: IPosition;
        readonly widgetPosition: IContentWidgetPosition;
        readonly type = Type.Showing;
        constructor(actions: CodeActionSet, trigger: CodeActionTrigger, editorPosition: IPosition, widgetPosition: IContentWidgetPosition);
    }
    type State = typeof Hidden | Showing;
}
export declare class LightBulbWidget extends Disposable implements IContentWidget {
    protected readonly _editor: ICodeEditor;
    protected readonly _keybindingService: IKeybindingService;
    static readonly ID = "editor.contrib.lightbulbWidget";
    protected static readonly _posPref: ContentWidgetPositionPreference[];
    protected readonly _domNode: HTMLElement;
    protected readonly _onClick: Emitter<{
        readonly x: number;
        readonly y: number;
        readonly actions: CodeActionSet;
        readonly trigger: CodeActionTrigger;
    }>;
    readonly onClick: Event<{
        readonly x: number;
        readonly y: number;
        readonly actions: CodeActionSet;
        readonly trigger: CodeActionTrigger;
    }>;
    protected _state: LightBulbState.State;
    protected _iconClasses: string[];
    protected _preferredKbLabel?: string;
    protected _quickFixKbLabel?: string;
    constructor(_editor: ICodeEditor, _keybindingService: IKeybindingService, commandService: ICommandService);
    dispose(): void;
    getId(): string;
    getDomNode(): HTMLElement;
    getPosition(): IContentWidgetPosition | null;
    update(actions: CodeActionSet, trigger: CodeActionTrigger, atPosition: IPosition): void;
    hide(): void;
    protected get state(): LightBulbState.State;
    protected set state(value: LightBulbState.State);
    protected _updateLightBulbTitleAndIcon(): void;
    protected _updateLightbulbTitle(autoFix: boolean, autoRun: boolean): void;
    protected set title(value: string);
}
