{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/inlineCompletions/browser/suggestWidgetInlineCompletionProvider.ts","vs/editor/contrib/inlineCompletions/browser/suggestWidgetInlineCompletionProvider.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,yDAAsD;AACtD,iEAA+D;AAE/D,4DAAyD;AACzD,sDAAmD;AACnD,yDAAqH;AACrH,uEAAoE;AACpE,yEAAsE;AAEtE,+EAA4E;AAC5E,mEAA6G;AAC7G,qDAAkD;AAElD,2DAA6E;AAC7E,mEAAoE;AAEpE,MAAa,oBAAqB,SAAQ,sBAAU;IAQnD,IAAW,YAAY;QACtB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAED,YACkB,MAAmB,EACnB,4BAA8D,EAC9D,iBAA6C,EAC7C,YAA6C;QAE9D,KAAK,EAAE,CAAC;QALS,WAAM,GAAN,MAAM,CAAa;QACnB,iCAA4B,GAA5B,4BAA4B,CAAkC;QAC9D,sBAAiB,GAAjB,iBAAiB,CAA4B;QAC7C,iBAAY,GAAZ,YAAY,CAAiC;QAfvD,2BAAsB,GAAY,KAAK,CAAC;QACxC,sBAAiB,GAAG,KAAK,CAAC;QAC1B,cAAS,GAAG,KAAK,CAAC;QAClB,4BAAuB,GAAgC,SAAS,CAAC;QAExD,kBAAa,GAAG,IAAA,4BAAe,EAAC,IAAI,EAAE,SAAwC,CAAC,CAAC;QAchG,iFAAiF;QACjF,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;YACnC,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAC3C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC7B,CAAC;QACF,CAAC,CAAC,CAAC,CAAC;QACJ,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACjC,IAAI,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAC1C,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC7B,CAAC;QACF,CAAC,CAAC,CAAC,CAAC;QAEJ,MAAM,iBAAiB,GAAG,qCAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7D,IAAI,iBAAiB,EAAE,CAAC;YACvB,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;gBACjD,QAAQ,EAAE,GAAG;gBACb,MAAM,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,YAAY,EAAE,EAAE;;oBACpC,IAAA,wBAAW,EAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;oBAE9C,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;oBACzC,IAAI,CAAC,SAAS,EAAE,CAAC;wBAChB,oBAAoB;wBACpB,OAAO,CAAC,CAAC,CAAC;oBACX,CAAC;oBAED,MAAM,eAAe,GAAG,MAAA,IAAI,CAAC,4BAA4B,EAAE,0CAAE,kBAAkB,CAAC,SAAS,CAAC,CAAC;oBAC3F,IAAI,CAAC,eAAe,EAAE,CAAC;wBACtB,OAAO,CAAC,CAAC,CAAC;oBACX,CAAC;oBACD,MAAM,QAAQ,GAAG,mBAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAEpC,MAAM,UAAU,GAAG,YAAY;yBAC7B,GAAG,CAAC,CAAC,WAAW,EAAE,KAAK,EAAE,EAAE;wBAC3B,MAAM,eAAe,GAAG,eAAe,CAAC,cAAc,CAAC,iBAAiB,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;wBACpI,MAAM,mBAAmB,GAAG,eAAe,CAAC,gBAAgB,EAAE,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;wBAC7F,MAAM,KAAK,GAAG,eAAe,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;wBAC5D,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,EAAE,CAAC;oBACrF,CAAC,CAAC;yBACD,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;oBAE9D,MAAM,MAAM,GAAG,IAAA,2BAAc,EAC5B,UAAU,EACV,IAAA,kBAAS,EAAC,CAAC,CAAC,EAAE,CAAC,CAAE,CAAC,YAAY,EAAE,yBAAgB,CAAC,CACjD,CAAC;oBACF,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC;gBACpC,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,IAAI,sBAAsB,GAAG,KAAK,CAAC;YACnC,MAAM,mBAAmB,GAAG,GAAG,EAAE;gBAChC,IAAI,sBAAsB,EAAE,CAAC;oBAC5B,OAAO;gBACR,CAAC;gBACD,sBAAsB,GAAG,IAAI,CAAC;gBAE9B,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;oBAC5D,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;oBACnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACnB,CAAC,CAAC,CAAC,CAAC;gBACJ,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;oBAC5D,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;oBACpC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACpB,CAAC,CAAC,CAAC,CAAC;gBACJ,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,EAAE;oBAC7D,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;oBACnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACnB,CAAC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;YAEF,IAAI,CAAC,SAAS,CAAC,aAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE;gBACnE,mBAAmB,EAAE,CAAC;YACvB,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;gBAC5D,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;gBAC3C,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;gBACrC,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,EAAE,CAAC;oBAAC,OAAO,SAAS,CAAC;gBAAC,CAAC;gBAE9C,MAAM,eAAe,GAAG,eAAe,CAAC,cAAc,CACrD,iBAAiB,EACjB,KAAK,EACL,QAAQ,EACR,CAAC,CAAC,IAAI,EACN,IAAI,CAAC,iBAAiB,CACtB,CAAC;gBAEF,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7B,CAAC;IAEO,MAAM,CAAC,SAAkB;QAChC,MAAM,mBAAmB,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAEtD,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,uBAAuB,EAAE,mBAAmB,CAAC,EAAE,CAAC;YAC/G,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,uBAAuB,GAAG,mBAAmB,CAAC;YAEnD,IAAA,wBAAW,EAAC,EAAE,CAAC,EAAE;gBAChB,oDAAoD;gBACpD,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;gBAC3B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YACvF,CAAC,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;IAEO,kBAAkB;QACzB,MAAM,iBAAiB,GAAG,qCAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7D,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACxD,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,MAAM,WAAW,GAAG,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;QACpE,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC3C,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QAErC,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,EAAE,CAAC;YACzC,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,OAAO,eAAe,CAAC,cAAc,CACpC,iBAAiB,EACjB,KAAK,EACL,QAAQ,EACR,WAAW,CAAC,IAAI,EAChB,IAAI,CAAC,iBAAiB,CACtB,CAAC;IACH,CAAC;IAEM,uBAAuB;QAC7B,MAAM,iBAAiB,GAAG,qCAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7D,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,uBAAuB,EAAE,CAAC;IAC9C,CAAC;IAEM,mBAAmB;QACzB,MAAM,iBAAiB,GAAG,qCAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7D,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,mBAAmB,EAAE,CAAC;IAC1C,CAAC;CACD;AAjKD,oDAiKC;AAED,MAAa,eAAe;IACpB,MAAM,CAAC,cAAc,CAAC,iBAAoC,EAAE,KAAiB,EAAE,QAAkB,EAAE,IAAoB,EAAE,UAAmB;QAClJ,IAAI,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QACrC,IAAI,aAAa,GAAG,KAAK,CAAC;QAC1B,IAAI,IAAI,CAAC,UAAU,CAAC,eAAgB,uDAA+C,EAAE,CAAC;YACrF,MAAM,OAAO,GAAG,IAAI,6BAAa,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAEtD,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;gBACnC,kCAAkC;gBAClC,+BAAc,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;YACjE,CAAC;YAED,UAAU,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;YAChC,aAAa,GAAG,IAAI,CAAC;QACtB,CAAC;QAED,MAAM,IAAI,GAAG,iBAAiB,CAAC,gBAAgB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAElE,OAAO,IAAI,eAAe,CACzB,aAAK,CAAC,aAAa,CAClB,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,EACxC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CACnD,EACD,UAAU,EACV,IAAI,CAAC,UAAU,CAAC,IAAI,EACpB,aAAa,CACb,CAAC;IACH,CAAC;IAED,YACiB,KAAY,EACZ,UAAkB,EAClB,kBAAsC,EACtC,aAAsB;QAHtB,UAAK,GAAL,KAAK,CAAO;QACZ,eAAU,GAAV,UAAU,CAAQ;QAClB,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,kBAAa,GAAb,aAAa,CAAS;IACnC,CAAC;IAEE,MAAM,CAAC,KAAsB;QACnC,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC;eACtC,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU;eACpC,IAAI,CAAC,kBAAkB,KAAK,KAAK,CAAC,kBAAkB;eACpD,IAAI,CAAC,aAAa,KAAK,KAAK,CAAC,aAAa,CAAC;IAChD,CAAC;IAEM,wBAAwB;QAC9B,OAAO,IAAI,kCAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC7G,CAAC;IAEM,gBAAgB;QACtB,OAAO,IAAI,+BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACxD,CAAC;CACD;AAlDD,0CAkDC;AAED,SAAS,qBAAqB,CAAC,CAA8B,EAAE,CAA8B;IAC5F,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QACb,OAAO,IAAI,CAAC;IACb,CAAC;IACD,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;QACd,OAAO,KAAK,CAAC;IACd,CAAC;IACD,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC","file":"suggestWidgetInlineCompletionProvider.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event';\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { Position } from '../../../common/core/position';\nimport { Range } from '../../../common/core/range';\nimport { CompletionItemInsertTextRule, CompletionItemKind, SelectedSuggestionInfo } from '../../../common/languages';\nimport { SnippetParser } from '../../snippet/browser/snippetParser';\nimport { SnippetSession } from '../../snippet/browser/snippetSession';\nimport { CompletionItem } from '../../suggest/browser/suggest';\nimport { SuggestController } from '../../suggest/browser/suggestController';\nimport { IObservable, ITransaction, observableValue, transaction } from '../../../../base/common/observable';\nimport { SingleTextEdit } from './singleTextEdit';\nimport { ITextModel } from '../../../common/model';\nimport { compareBy, numberComparator } from '../../../../base/common/arrays';\nimport { findFirstMaxBy } from '../../../../base/common/arraysFind';\n\nexport class SuggestWidgetAdaptor extends Disposable {\n\tprivate isSuggestWidgetVisible: boolean = false;\n\tprivate isShiftKeyPressed = false;\n\tprivate _isActive = false;\n\tprivate _currentSuggestItemInfo: SuggestItemInfo | undefined = undefined;\n\n\tprivate readonly _selectedItem = observableValue(this, undefined as SuggestItemInfo | undefined);\n\n\tpublic get selectedItem(): IObservable<SuggestItemInfo | undefined> {\n\t\treturn this._selectedItem;\n\t}\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\tprivate readonly suggestControllerPreselector: () => SingleTextEdit | undefined,\n\t\tprivate readonly checkModelVersion: (tx: ITransaction) => void,\n\t\tprivate readonly onWillAccept: (item: SuggestItemInfo) => void,\n\t) {\n\t\tsuper();\n\n\t\t// See the command acceptAlternativeSelectedSuggestion that is bound to shift+tab\n\t\tthis._register(editor.onKeyDown(e => {\n\t\t\tif (e.shiftKey && !this.isShiftKeyPressed) {\n\t\t\t\tthis.isShiftKeyPressed = true;\n\t\t\t\tthis.update(this._isActive);\n\t\t\t}\n\t\t}));\n\t\tthis._register(editor.onKeyUp(e => {\n\t\t\tif (e.shiftKey && this.isShiftKeyPressed) {\n\t\t\t\tthis.isShiftKeyPressed = false;\n\t\t\t\tthis.update(this._isActive);\n\t\t\t}\n\t\t}));\n\n\t\tconst suggestController = SuggestController.get(this.editor);\n\t\tif (suggestController) {\n\t\t\tthis._register(suggestController.registerSelector({\n\t\t\t\tpriority: 100,\n\t\t\t\tselect: (model, pos, suggestItems) => {\n\t\t\t\t\ttransaction(tx => this.checkModelVersion(tx));\n\n\t\t\t\t\tconst textModel = this.editor.getModel();\n\t\t\t\t\tif (!textModel) {\n\t\t\t\t\t\t// Should not happen\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst itemToPreselect = this.suggestControllerPreselector()?.removeCommonPrefix(textModel);\n\t\t\t\t\tif (!itemToPreselect) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tconst position = Position.lift(pos);\n\n\t\t\t\t\tconst candidates = suggestItems\n\t\t\t\t\t\t.map((suggestItem, index) => {\n\t\t\t\t\t\t\tconst suggestItemInfo = SuggestItemInfo.fromSuggestion(suggestController, textModel, position, suggestItem, this.isShiftKeyPressed);\n\t\t\t\t\t\t\tconst suggestItemTextEdit = suggestItemInfo.toSingleTextEdit().removeCommonPrefix(textModel);\n\t\t\t\t\t\t\tconst valid = itemToPreselect.augments(suggestItemTextEdit);\n\t\t\t\t\t\t\treturn { index, valid, prefixLength: suggestItemTextEdit.text.length, suggestItem };\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter(item => item && item.valid && item.prefixLength > 0);\n\n\t\t\t\t\tconst result = findFirstMaxBy(\n\t\t\t\t\t\tcandidates,\n\t\t\t\t\t\tcompareBy(s => s!.prefixLength, numberComparator)\n\t\t\t\t\t);\n\t\t\t\t\treturn result ? result.index : - 1;\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tlet isBoundToSuggestWidget = false;\n\t\t\tconst bindToSuggestWidget = () => {\n\t\t\t\tif (isBoundToSuggestWidget) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tisBoundToSuggestWidget = true;\n\n\t\t\t\tthis._register(suggestController.widget.value.onDidShow(() => {\n\t\t\t\t\tthis.isSuggestWidgetVisible = true;\n\t\t\t\t\tthis.update(true);\n\t\t\t\t}));\n\t\t\t\tthis._register(suggestController.widget.value.onDidHide(() => {\n\t\t\t\t\tthis.isSuggestWidgetVisible = false;\n\t\t\t\t\tthis.update(false);\n\t\t\t\t}));\n\t\t\t\tthis._register(suggestController.widget.value.onDidFocus(() => {\n\t\t\t\t\tthis.isSuggestWidgetVisible = true;\n\t\t\t\t\tthis.update(true);\n\t\t\t\t}));\n\t\t\t};\n\n\t\t\tthis._register(Event.once(suggestController.model.onDidTrigger)(e => {\n\t\t\t\tbindToSuggestWidget();\n\t\t\t}));\n\n\t\t\tthis._register(suggestController.onWillInsertSuggestItem(e => {\n\t\t\t\tconst position = this.editor.getPosition();\n\t\t\t\tconst model = this.editor.getModel();\n\t\t\t\tif (!position || !model) { return undefined; }\n\n\t\t\t\tconst suggestItemInfo = SuggestItemInfo.fromSuggestion(\n\t\t\t\t\tsuggestController,\n\t\t\t\t\tmodel,\n\t\t\t\t\tposition,\n\t\t\t\t\te.item,\n\t\t\t\t\tthis.isShiftKeyPressed\n\t\t\t\t);\n\n\t\t\t\tthis.onWillAccept(suggestItemInfo);\n\t\t\t}));\n\t\t}\n\t\tthis.update(this._isActive);\n\t}\n\n\tprivate update(newActive: boolean): void {\n\t\tconst newInlineCompletion = this.getSuggestItemInfo();\n\n\t\tif (this._isActive !== newActive || !suggestItemInfoEquals(this._currentSuggestItemInfo, newInlineCompletion)) {\n\t\t\tthis._isActive = newActive;\n\t\t\tthis._currentSuggestItemInfo = newInlineCompletion;\n\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description Update state from suggest widget */\n\t\t\t\tthis.checkModelVersion(tx);\n\t\t\t\tthis._selectedItem.set(this._isActive ? this._currentSuggestItemInfo : undefined, tx);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getSuggestItemInfo(): SuggestItemInfo | undefined {\n\t\tconst suggestController = SuggestController.get(this.editor);\n\t\tif (!suggestController || !this.isSuggestWidgetVisible) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst focusedItem = suggestController.widget.value.getFocusedItem();\n\t\tconst position = this.editor.getPosition();\n\t\tconst model = this.editor.getModel();\n\n\t\tif (!focusedItem || !position || !model) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn SuggestItemInfo.fromSuggestion(\n\t\t\tsuggestController,\n\t\t\tmodel,\n\t\t\tposition,\n\t\t\tfocusedItem.item,\n\t\t\tthis.isShiftKeyPressed\n\t\t);\n\t}\n\n\tpublic stopForceRenderingAbove(): void {\n\t\tconst suggestController = SuggestController.get(this.editor);\n\t\tsuggestController?.stopForceRenderingAbove();\n\t}\n\n\tpublic forceRenderingAbove(): void {\n\t\tconst suggestController = SuggestController.get(this.editor);\n\t\tsuggestController?.forceRenderingAbove();\n\t}\n}\n\nexport class SuggestItemInfo {\n\tpublic static fromSuggestion(suggestController: SuggestController, model: ITextModel, position: Position, item: CompletionItem, toggleMode: boolean): SuggestItemInfo {\n\t\tlet { insertText } = item.completion;\n\t\tlet isSnippetText = false;\n\t\tif (item.completion.insertTextRules! & CompletionItemInsertTextRule.InsertAsSnippet) {\n\t\t\tconst snippet = new SnippetParser().parse(insertText);\n\n\t\t\tif (snippet.children.length < 100) {\n\t\t\t\t// Adjust whitespace is expensive.\n\t\t\t\tSnippetSession.adjustWhitespace(model, position, true, snippet);\n\t\t\t}\n\n\t\t\tinsertText = snippet.toString();\n\t\t\tisSnippetText = true;\n\t\t}\n\n\t\tconst info = suggestController.getOverwriteInfo(item, toggleMode);\n\n\t\treturn new SuggestItemInfo(\n\t\t\tRange.fromPositions(\n\t\t\t\tposition.delta(0, -info.overwriteBefore),\n\t\t\t\tposition.delta(0, Math.max(info.overwriteAfter, 0))\n\t\t\t),\n\t\t\tinsertText,\n\t\t\titem.completion.kind,\n\t\t\tisSnippetText,\n\t\t);\n\t}\n\n\tprivate constructor(\n\t\tpublic readonly range: Range,\n\t\tpublic readonly insertText: string,\n\t\tpublic readonly completionItemKind: CompletionItemKind,\n\t\tpublic readonly isSnippetText: boolean,\n\t) { }\n\n\tpublic equals(other: SuggestItemInfo): boolean {\n\t\treturn this.range.equalsRange(other.range)\n\t\t\t&& this.insertText === other.insertText\n\t\t\t&& this.completionItemKind === other.completionItemKind\n\t\t\t&& this.isSnippetText === other.isSnippetText;\n\t}\n\n\tpublic toSelectedSuggestionInfo(): SelectedSuggestionInfo {\n\t\treturn new SelectedSuggestionInfo(this.range, this.insertText, this.completionItemKind, this.isSnippetText);\n\t}\n\n\tpublic toSingleTextEdit(): SingleTextEdit {\n\t\treturn new SingleTextEdit(this.range, this.insertText);\n\t}\n}\n\nfunction suggestItemInfoEquals(a: SuggestItemInfo | undefined, b: SuggestItemInfo | undefined): boolean {\n\tif (a === b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\treturn a.equals(b);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event';\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { Position } from '../../../common/core/position';\nimport { Range } from '../../../common/core/range';\nimport { CompletionItemInsertTextRule, CompletionItemKind, SelectedSuggestionInfo } from '../../../common/languages';\nimport { SnippetParser } from '../../snippet/browser/snippetParser';\nimport { SnippetSession } from '../../snippet/browser/snippetSession';\nimport { CompletionItem } from '../../suggest/browser/suggest';\nimport { SuggestController } from '../../suggest/browser/suggestController';\nimport { IObservable, ITransaction, observableValue, transaction } from '../../../../base/common/observable';\nimport { SingleTextEdit } from './singleTextEdit';\nimport { ITextModel } from '../../../common/model';\nimport { compareBy, numberComparator } from '../../../../base/common/arrays';\nimport { findFirstMaxBy } from '../../../../base/common/arraysFind';\n\nexport class SuggestWidgetAdaptor extends Disposable {\n\tprivate isSuggestWidgetVisible: boolean = false;\n\tprivate isShiftKeyPressed = false;\n\tprivate _isActive = false;\n\tprivate _currentSuggestItemInfo: SuggestItemInfo | undefined = undefined;\n\n\tprivate readonly _selectedItem = observableValue(this, undefined as SuggestItemInfo | undefined);\n\n\tpublic get selectedItem(): IObservable<SuggestItemInfo | undefined> {\n\t\treturn this._selectedItem;\n\t}\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\tprivate readonly suggestControllerPreselector: () => SingleTextEdit | undefined,\n\t\tprivate readonly checkModelVersion: (tx: ITransaction) => void,\n\t\tprivate readonly onWillAccept: (item: SuggestItemInfo) => void,\n\t) {\n\t\tsuper();\n\n\t\t// See the command acceptAlternativeSelectedSuggestion that is bound to shift+tab\n\t\tthis._register(editor.onKeyDown(e => {\n\t\t\tif (e.shiftKey && !this.isShiftKeyPressed) {\n\t\t\t\tthis.isShiftKeyPressed = true;\n\t\t\t\tthis.update(this._isActive);\n\t\t\t}\n\t\t}));\n\t\tthis._register(editor.onKeyUp(e => {\n\t\t\tif (e.shiftKey && this.isShiftKeyPressed) {\n\t\t\t\tthis.isShiftKeyPressed = false;\n\t\t\t\tthis.update(this._isActive);\n\t\t\t}\n\t\t}));\n\n\t\tconst suggestController = SuggestController.get(this.editor);\n\t\tif (suggestController) {\n\t\t\tthis._register(suggestController.registerSelector({\n\t\t\t\tpriority: 100,\n\t\t\t\tselect: (model, pos, suggestItems) => {\n\t\t\t\t\ttransaction(tx => this.checkModelVersion(tx));\n\n\t\t\t\t\tconst textModel = this.editor.getModel();\n\t\t\t\t\tif (!textModel) {\n\t\t\t\t\t\t// Should not happen\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst itemToPreselect = this.suggestControllerPreselector()?.removeCommonPrefix(textModel);\n\t\t\t\t\tif (!itemToPreselect) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tconst position = Position.lift(pos);\n\n\t\t\t\t\tconst candidates = suggestItems\n\t\t\t\t\t\t.map((suggestItem, index) => {\n\t\t\t\t\t\t\tconst suggestItemInfo = SuggestItemInfo.fromSuggestion(suggestController, textModel, position, suggestItem, this.isShiftKeyPressed);\n\t\t\t\t\t\t\tconst suggestItemTextEdit = suggestItemInfo.toSingleTextEdit().removeCommonPrefix(textModel);\n\t\t\t\t\t\t\tconst valid = itemToPreselect.augments(suggestItemTextEdit);\n\t\t\t\t\t\t\treturn { index, valid, prefixLength: suggestItemTextEdit.text.length, suggestItem };\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter(item => item && item.valid && item.prefixLength > 0);\n\n\t\t\t\t\tconst result = findFirstMaxBy(\n\t\t\t\t\t\tcandidates,\n\t\t\t\t\t\tcompareBy(s => s!.prefixLength, numberComparator)\n\t\t\t\t\t);\n\t\t\t\t\treturn result ? result.index : - 1;\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tlet isBoundToSuggestWidget = false;\n\t\t\tconst bindToSuggestWidget = () => {\n\t\t\t\tif (isBoundToSuggestWidget) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tisBoundToSuggestWidget = true;\n\n\t\t\t\tthis._register(suggestController.widget.value.onDidShow(() => {\n\t\t\t\t\tthis.isSuggestWidgetVisible = true;\n\t\t\t\t\tthis.update(true);\n\t\t\t\t}));\n\t\t\t\tthis._register(suggestController.widget.value.onDidHide(() => {\n\t\t\t\t\tthis.isSuggestWidgetVisible = false;\n\t\t\t\t\tthis.update(false);\n\t\t\t\t}));\n\t\t\t\tthis._register(suggestController.widget.value.onDidFocus(() => {\n\t\t\t\t\tthis.isSuggestWidgetVisible = true;\n\t\t\t\t\tthis.update(true);\n\t\t\t\t}));\n\t\t\t};\n\n\t\t\tthis._register(Event.once(suggestController.model.onDidTrigger)(e => {\n\t\t\t\tbindToSuggestWidget();\n\t\t\t}));\n\n\t\t\tthis._register(suggestController.onWillInsertSuggestItem(e => {\n\t\t\t\tconst position = this.editor.getPosition();\n\t\t\t\tconst model = this.editor.getModel();\n\t\t\t\tif (!position || !model) { return undefined; }\n\n\t\t\t\tconst suggestItemInfo = SuggestItemInfo.fromSuggestion(\n\t\t\t\t\tsuggestController,\n\t\t\t\t\tmodel,\n\t\t\t\t\tposition,\n\t\t\t\t\te.item,\n\t\t\t\t\tthis.isShiftKeyPressed\n\t\t\t\t);\n\n\t\t\t\tthis.onWillAccept(suggestItemInfo);\n\t\t\t}));\n\t\t}\n\t\tthis.update(this._isActive);\n\t}\n\n\tprivate update(newActive: boolean): void {\n\t\tconst newInlineCompletion = this.getSuggestItemInfo();\n\n\t\tif (this._isActive !== newActive || !suggestItemInfoEquals(this._currentSuggestItemInfo, newInlineCompletion)) {\n\t\t\tthis._isActive = newActive;\n\t\t\tthis._currentSuggestItemInfo = newInlineCompletion;\n\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description Update state from suggest widget */\n\t\t\t\tthis.checkModelVersion(tx);\n\t\t\t\tthis._selectedItem.set(this._isActive ? this._currentSuggestItemInfo : undefined, tx);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getSuggestItemInfo(): SuggestItemInfo | undefined {\n\t\tconst suggestController = SuggestController.get(this.editor);\n\t\tif (!suggestController || !this.isSuggestWidgetVisible) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst focusedItem = suggestController.widget.value.getFocusedItem();\n\t\tconst position = this.editor.getPosition();\n\t\tconst model = this.editor.getModel();\n\n\t\tif (!focusedItem || !position || !model) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn SuggestItemInfo.fromSuggestion(\n\t\t\tsuggestController,\n\t\t\tmodel,\n\t\t\tposition,\n\t\t\tfocusedItem.item,\n\t\t\tthis.isShiftKeyPressed\n\t\t);\n\t}\n\n\tpublic stopForceRenderingAbove(): void {\n\t\tconst suggestController = SuggestController.get(this.editor);\n\t\tsuggestController?.stopForceRenderingAbove();\n\t}\n\n\tpublic forceRenderingAbove(): void {\n\t\tconst suggestController = SuggestController.get(this.editor);\n\t\tsuggestController?.forceRenderingAbove();\n\t}\n}\n\nexport class SuggestItemInfo {\n\tpublic static fromSuggestion(suggestController: SuggestController, model: ITextModel, position: Position, item: CompletionItem, toggleMode: boolean): SuggestItemInfo {\n\t\tlet { insertText } = item.completion;\n\t\tlet isSnippetText = false;\n\t\tif (item.completion.insertTextRules! & CompletionItemInsertTextRule.InsertAsSnippet) {\n\t\t\tconst snippet = new SnippetParser().parse(insertText);\n\n\t\t\tif (snippet.children.length < 100) {\n\t\t\t\t// Adjust whitespace is expensive.\n\t\t\t\tSnippetSession.adjustWhitespace(model, position, true, snippet);\n\t\t\t}\n\n\t\t\tinsertText = snippet.toString();\n\t\t\tisSnippetText = true;\n\t\t}\n\n\t\tconst info = suggestController.getOverwriteInfo(item, toggleMode);\n\n\t\treturn new SuggestItemInfo(\n\t\t\tRange.fromPositions(\n\t\t\t\tposition.delta(0, -info.overwriteBefore),\n\t\t\t\tposition.delta(0, Math.max(info.overwriteAfter, 0))\n\t\t\t),\n\t\t\tinsertText,\n\t\t\titem.completion.kind,\n\t\t\tisSnippetText,\n\t\t);\n\t}\n\n\tprivate constructor(\n\t\tpublic readonly range: Range,\n\t\tpublic readonly insertText: string,\n\t\tpublic readonly completionItemKind: CompletionItemKind,\n\t\tpublic readonly isSnippetText: boolean,\n\t) { }\n\n\tpublic equals(other: SuggestItemInfo): boolean {\n\t\treturn this.range.equalsRange(other.range)\n\t\t\t&& this.insertText === other.insertText\n\t\t\t&& this.completionItemKind === other.completionItemKind\n\t\t\t&& this.isSnippetText === other.isSnippetText;\n\t}\n\n\tpublic toSelectedSuggestionInfo(): SelectedSuggestionInfo {\n\t\treturn new SelectedSuggestionInfo(this.range, this.insertText, this.completionItemKind, this.isSnippetText);\n\t}\n\n\tpublic toSingleTextEdit(): SingleTextEdit {\n\t\treturn new SingleTextEdit(this.range, this.insertText);\n\t}\n}\n\nfunction suggestItemInfoEquals(a: SuggestItemInfo | undefined, b: SuggestItemInfo | undefined): boolean {\n\tif (a === b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\treturn a.equals(b);\n}\n"]}