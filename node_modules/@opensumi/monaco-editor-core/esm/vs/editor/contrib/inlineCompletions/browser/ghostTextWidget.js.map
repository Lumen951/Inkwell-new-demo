{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/inlineCompletions/browser/ghostTextWidget.ts","vs/editor/contrib/inlineCompletions/browser/ghostTextWidget.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;;;;;;;;;;AAEhG,wEAAiF;AACjF,yDAAsD;AACtD,iEAA6E;AAC7E,mEAAoJ;AACpJ,2DAA2D;AAC3D,2BAAyB;AACzB,qEAAoE;AAEpE,wEAAiH;AACjH,4DAAyD;AACzD,sDAAmD;AACnD,sEAAmE;AAEnE,iEAAsE;AACtE,iDAAqH;AACrH,kEAA+D;AAC/D,gFAA4E;AAC5E,kFAA8F;AAE9F,2CAA8D;AAC9D,mCAAkE;AAErD,QAAA,sBAAsB,GAAG,YAAY,CAAC;AAO5C,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,sBAAU;IAI9C,YACkB,MAAmB,EACnB,KAA4B,EAC3B,eAAkD;QAEpE,KAAK,EAAE,CAAC;QAJS,WAAM,GAAN,MAAM,CAAa;QACnB,UAAK,GAAL,KAAK,CAAuB;QACV,oBAAe,GAAf,eAAe,CAAkB;QANpD,eAAU,GAAG,IAAA,4BAAe,EAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC1C,qBAAgB,GAAG,IAAA,gCAAmB,EAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,gCAAgC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAapI,YAAO,GAAG,IAAA,oBAAO,EAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACjD,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;gBAClC,OAAO,SAAS,CAAC;YAClB,CAAC;YACD,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrD,IAAI,SAAS,KAAK,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC3D,OAAO,SAAS,CAAC;YAClB,CAAC;YACD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpD,IAAI,CAAC,SAAS,EAAE,CAAC;gBAChB,OAAO,SAAS,CAAC;YAClB,CAAC;YAED,MAAM,aAAa,GAAG,SAAS,YAAY,gCAAoB,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;YAEpG,MAAM,WAAW,GAAyD,EAAE,CAAC;YAC7E,MAAM,eAAe,GAAe,EAAE,CAAC;YAEvC,SAAS,oBAAoB,CAAC,KAAwB,EAAE,SAA6B;gBACpF,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAChC,MAAM,QAAQ,GAAG,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBAC7D,IAAI,SAAS,EAAE,CAAC;wBACf,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,gCAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,SAAS,uCAA+B,CAAC,CAAC;oBACpK,CAAC;oBACD,QAAQ,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBAE7B,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxB,CAAC;gBACD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;oBAC1B,eAAe,CAAC,IAAI,CAAC;wBACpB,OAAO,EAAE,IAAI;wBACb,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAc,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,SAAS,uCAA+B,CAAC,CAAC,CAAC,CAAC,EAAE;qBAC/G,CAAC,CAAC;gBACJ,CAAC;YACF,CAAC;YAED,MAAM,cAAc,GAAG,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;YAEtE,IAAI,qBAAqB,GAAuB,SAAS,CAAC;YAC1D,IAAI,OAAO,GAAG,CAAC,CAAC;YAChB,KAAK,MAAM,IAAI,IAAI,SAAS,CAAC,KAAK,EAAE,CAAC;gBACpC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAI,qBAAqB,KAAK,SAAS,EAAE,CAAC;oBACzC,WAAW,CAAC,IAAI,CAAC;wBAChB,MAAM,EAAE,IAAI,CAAC,MAAM;wBACnB,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;wBACd,OAAO,EAAE,IAAI,CAAC,OAAO;qBACrB,CAAC,CAAC;oBACH,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxB,CAAC;qBAAM,CAAC;oBACP,oBAAoB,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;gBACvF,CAAC;gBAED,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACtB,oBAAoB,CAAC,KAAK,EAAE,8BAAsB,CAAC,CAAC;oBACpD,IAAI,qBAAqB,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,IAAI,cAAc,CAAC,MAAM,EAAE,CAAC;wBACjF,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC;oBACrC,CAAC;gBACF,CAAC;gBAED,OAAO,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAC3B,CAAC;YACD,IAAI,qBAAqB,KAAK,SAAS,EAAE,CAAC;gBACzC,oBAAoB,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YACtE,CAAC;YAED,MAAM,WAAW,GAAG,qBAAqB,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,mBAAW,CAAC,qBAAqB,EAAE,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAExI,OAAO;gBACN,aAAa;gBACb,WAAW;gBACX,eAAe;gBACf,WAAW;gBACX,UAAU,EAAE,SAAS,CAAC,UAAU;gBAChC,2BAA2B,EAAE,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC;gBACzE,eAAe,EAAE,SAAS;aAC1B,CAAC;QACH,CAAC,CAAC,CAAC;QAEc,gBAAW,GAAG,IAAA,oBAAO,EAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACrD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1C,IAAI,CAAC,OAAO,EAAE,CAAC;gBACd,OAAO,EAAE,CAAC;YACX,CAAC;YAED,MAAM,WAAW,GAA4B,EAAE,CAAC;YAEhD,IAAI,OAAO,CAAC,aAAa,EAAE,CAAC;gBAC3B,WAAW,CAAC,IAAI,CAAC;oBAChB,KAAK,EAAE,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;oBACxD,OAAO,EAAE,EAAE,eAAe,EAAE,mCAAmC,EAAE,WAAW,EAAE,sBAAsB,EAAE;iBACtG,CAAC,CAAC;YACJ,CAAC;YAED,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC;gBACzB,WAAW,CAAC,IAAI,CAAC;oBAChB,KAAK,EAAE,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;oBACtD,OAAO,EAAE,EAAE,eAAe,EAAE,mBAAmB,EAAE,WAAW,EAAE,mBAAmB,GAAG;iBACpF,CAAC,CAAC;YACJ,CAAC;YAED,KAAK,MAAM,CAAC,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC;gBACrC,WAAW,CAAC,IAAI,CAAC;oBAChB,KAAK,EAAE,aAAK,CAAC,aAAa,CAAC,IAAI,mBAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;oBACtE,OAAO,EAAE;wBACR,WAAW,EAAE,8BAAsB;wBACnC,KAAK,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC,uBAAuB,EAAE,WAAW,EAAE,+BAAuB,CAAC,IAAI,EAAE;wBAC7J,eAAe,EAAE,IAAI;qBACrB;iBACD,CAAC,CAAC;YACJ,CAAC;YAED,OAAO,WAAW,CAAC;QACpB,CAAC,CAAC,CAAC;QAEc,0BAAqB,GAAG,IAAI,CAAC,SAAS,CACtD,IAAI,qBAAqB,CACxB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,eAAe,CAAC,eAAe,EACpC,IAAA,oBAAO,EAAC,MAAM,CAAC,EAAE;YAChB,yBAAyB;YACzB,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1C,OAAO,OAAO,CAAC,CAAC,CAAC;gBAChB,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,eAAe,EAAE,OAAO,CAAC,eAAe;gBACxC,oBAAoB,EAAE,OAAO,CAAC,2BAA2B;gBACzD,eAAe,EAAE,OAAO,CAAC,eAAe;aACxC,CAAC,CAAC,CAAC,SAAS,CAAC;QACf,CAAC,CAAC,CACF,CACD,CAAC;QAtID,IAAI,CAAC,SAAS,CAAC,IAAA,wBAAY,EAAC,GAAG,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9E,IAAI,CAAC,SAAS,CAAC,IAAA,kCAA0B,EAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAC3E,CAAC;IAsIM,YAAY,CAAC,UAAkB;QACrC,OAAO,IAAI,CAAC,qBAAqB,CAAC,UAAU,KAAK,UAAU,CAAC;IAC7D,CAAC;CACD,CAAA;AAtJY,0CAAe;0BAAf,eAAe;IAOzB,WAAA,2BAAgB,CAAA;GAPN,eAAe,CAsJ3B;AAED,MAAa,qBAAsB,SAAQ,sBAAU;IAEpD,IAAW,UAAU,KAAyB,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAaxE,YACkB,MAAmB,EACnB,eAAiC,EACjC,KAA8I;QAE/J,KAAK,EAAE,CAAC;QAJS,WAAM,GAAN,MAAM,CAAa;QACnB,oBAAe,GAAf,eAAe,CAAkB;QACjC,UAAK,GAAL,KAAK,CAAyI;QAjBxJ,gBAAW,GAAuB,SAAS,CAAC;QAGnC,yBAAoB,GAAG,IAAA,sCAAyB,EAAC,qBAAqB,EAAE,aAAK,CAAC,MAAM,CACpG,IAAI,CAAC,MAAM,CAAC,wBAAwB,EACpC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,qDAA4C;eACzD,CAAC,CAAC,UAAU,+CAAqC;eACjD,CAAC,CAAC,UAAU,wCAA+B;eAC3C,CAAC,CAAC,UAAU,+CAAsC;eAClD,CAAC,CAAC,UAAU,qCAA4B;eACxC,CAAC,CAAC,UAAU,gCAAuB;eACnC,CAAC,CAAC,UAAU,kCAAyB,CACzC,CAAC,CAAC;QASF,IAAI,CAAC,SAAS,CAAC,IAAA,oBAAO,EAAC,MAAM,CAAC,EAAE;YAC/B,oCAAoC;YACpC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACtC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEvC,IAAI,KAAK,EAAE,CAAC;gBACX,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACvF,CAAC;iBAAM,CAAC;gBACP,IAAI,CAAC,KAAK,EAAE,CAAC;YACd,CAAC;QACF,CAAC,CAAC,CAAC,CAAC;IACL,CAAC;IAEe,OAAO;QACtB,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;IACd,CAAC;IAEO,KAAK;QACZ,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,cAAc,EAAE,EAAE;YAC9C,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;gBACtB,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC5C,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;YAC9B,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,WAAW,CAAC,UAAkB,EAAE,eAA2B,EAAE,oBAA4B;QAChG,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QACzC,IAAI,CAAC,SAAS,EAAE,CAAC;YAChB,OAAO;QACR,CAAC;QAED,MAAM,EAAE,OAAO,EAAE,GAAG,SAAS,CAAC,UAAU,EAAE,CAAC;QAE3C,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,cAAc,EAAE,EAAE;YAC9C,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;gBACtB,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC5C,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;YAC9B,CAAC;YAED,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;YAC7E,IAAI,aAAa,GAAG,CAAC,EAAE,CAAC;gBACvB,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC9C,WAAW,CAAC,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;gBAE/F,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC,OAAO,CAAC;oBACzC,eAAe,EAAE,UAAU;oBAC3B,aAAa,EAAE,aAAa;oBAC5B,OAAO;oBACP,mBAAmB,gCAAwB;iBAC3C,CAAC,CAAC;YACJ,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;CACD;AA7ED,sDA6EC;AAOD,SAAS,WAAW,CAAC,OAAoB,EAAE,OAAe,EAAE,KAAiB,EAAE,IAA4B,EAAE,eAAiC;IAC7I,MAAM,6BAA6B,GAAG,IAAI,CAAC,GAAG,qDAA4C,CAAC;IAC3F,MAAM,sBAAsB,GAAG,IAAI,CAAC,GAAG,+CAAqC,CAAC;IAC7E,wEAAwE;IACxE,MAAM,gBAAgB,GAAG,MAAM,CAAC;IAChC,MAAM,uBAAuB,GAAG,IAAI,CAAC,GAAG,+CAAsC,CAAC;IAC/E,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,qCAA4B,CAAC;IAC3D,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,gCAAuB,CAAC;IACjD,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,kCAAyB,CAAC;IAErD,MAAM,EAAE,GAAG,IAAI,6BAAa,CAAC,KAAK,CAAC,CAAC;IACpC,EAAE,CAAC,YAAY,CAAC,oCAAoC,CAAC,CAAC;IAEtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;QAClD,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC;QAC9B,EAAE,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC;QACzC,EAAE,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;QACjC,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;QACxC,EAAE,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC;QAEzC,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAChD,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,UAAU,GAAG,uBAAU,CAAC,WAAW,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;QAEjE,IAAA,iCAAc,EAAC,IAAI,kCAAe,CACjC,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,6BAA6B,CAAC,EACxD,QAAQ,CAAC,8BAA8B,EACvC,IAAI,EACJ,KAAK,EACL,YAAY,EACZ,WAAW,EACX,CAAC,EACD,UAAU,EACV,QAAQ,CAAC,WAAW,EACpB,OAAO,EACP,CAAC,EACD,QAAQ,CAAC,UAAU,EACnB,QAAQ,CAAC,WAAW,EACpB,QAAQ,CAAC,aAAa,EACtB,sBAAsB,EACtB,gBAAgB,EAChB,uBAAuB,EACvB,aAAa,KAAK,mCAAmB,CAAC,GAAG,EACzC,IAAI,CACJ,EAAE,EAAE,CAAC,CAAC;QAEP,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IAC3B,CAAC;IACD,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IAE1B,IAAA,2BAAa,EAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACjC,MAAM,IAAI,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;IACxB,MAAM,WAAW,GAAG,gBAAQ,CAAC,CAAC,CAAC,gBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAChE,OAAO,CAAC,SAAS,GAAG,WAAqB,CAAC;AAC3C,CAAC;AAEY,QAAA,QAAQ,GAAG,IAAA,uCAAwB,EAAC,iBAAiB,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC","file":"ghostTextWidget.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from '../../../../base/browser/trustedTypes';\nimport { Event } from '../../../../base/common/event';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle';\nimport { IObservable, autorun, derived, observableFromEvent, observableSignalFromEvent, observableValue } from '../../../../base/common/observable';\nimport * as strings from '../../../../base/common/strings';\nimport './ghostText.css';\nimport { applyFontInfo } from '../../../browser/config/domFontInfo';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { EditorFontLigatures, EditorOption, IComputedEditorOptions } from '../../../common/config/editorOptions';\nimport { Position } from '../../../common/core/position';\nimport { Range } from '../../../common/core/range';\nimport { StringBuilder } from '../../../common/core/stringBuilder';\nimport { ILanguageIdCodec } from '../../../common/languages';\nimport { ILanguageService } from '../../../common/languages/language';\nimport { IModelDeltaDecoration, ITextModel, InjectedTextCursorStops, PositionAffinity } from '../../../common/model';\nimport { LineTokens } from '../../../common/tokens/lineTokens';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations';\nimport { RenderLineInput, renderViewLine } from '../../../common/viewLayout/viewLineRenderer';\nimport { InlineDecorationType } from '../../../common/viewModel';\nimport { GhostText, GhostTextReplacement } from './ghostText';\nimport { ColumnRange, applyObservableDecorations } from './utils';\n\nexport const GHOST_TEXT_DESCRIPTION = 'ghost-text';\nexport interface IGhostTextWidgetModel {\n\treadonly targetTextModel: IObservable<ITextModel | undefined>;\n\treadonly ghostText: IObservable<GhostText | GhostTextReplacement | undefined>;\n\treadonly minReservedLineCount: IObservable<number>;\n}\n\nexport class GhostTextWidget extends Disposable {\n\tprivate readonly isDisposed = observableValue(this, false);\n\tprivate readonly currentTextModel = observableFromEvent(this.editor.onDidChangeModel, () => /** @description editor.model */ this.editor.getModel());\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\tprivate readonly model: IGhostTextWidgetModel,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => { this.isDisposed.set(true, undefined); }));\n\t\tthis._register(applyObservableDecorations(this.editor, this.decorations));\n\t}\n\n\tprivate readonly uiState = derived(this, reader => {\n\t\tif (this.isDisposed.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst textModel = this.currentTextModel.read(reader);\n\t\tif (textModel !== this.model.targetTextModel.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst ghostText = this.model.ghostText.read(reader);\n\t\tif (!ghostText) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst replacedRange = ghostText instanceof GhostTextReplacement ? ghostText.columnRange : undefined;\n\n\t\tconst inlineTexts: { column: number; text: string; preview: boolean }[] = [];\n\t\tconst additionalLines: LineData[] = [];\n\n\t\tfunction addToAdditionalLines(lines: readonly string[], className: string | undefined) {\n\t\t\tif (additionalLines.length > 0) {\n\t\t\t\tconst lastLine = additionalLines[additionalLines.length - 1];\n\t\t\t\tif (className) {\n\t\t\t\t\tlastLine.decorations.push(new LineDecoration(lastLine.content.length + 1, lastLine.content.length + 1 + lines[0].length, className, InlineDecorationType.Regular));\n\t\t\t\t}\n\t\t\t\tlastLine.content += lines[0];\n\n\t\t\t\tlines = lines.slice(1);\n\t\t\t}\n\t\t\tfor (const line of lines) {\n\t\t\t\tadditionalLines.push({\n\t\t\t\t\tcontent: line,\n\t\t\t\t\tdecorations: className ? [new LineDecoration(1, line.length + 1, className, InlineDecorationType.Regular)] : []\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst textBufferLine = textModel.getLineContent(ghostText.lineNumber);\n\n\t\tlet hiddenTextStartColumn: number | undefined = undefined;\n\t\tlet lastIdx = 0;\n\t\tfor (const part of ghostText.parts) {\n\t\t\tlet lines = part.lines;\n\t\t\tif (hiddenTextStartColumn === undefined) {\n\t\t\t\tinlineTexts.push({\n\t\t\t\t\tcolumn: part.column,\n\t\t\t\t\ttext: lines[0],\n\t\t\t\t\tpreview: part.preview,\n\t\t\t\t});\n\t\t\t\tlines = lines.slice(1);\n\t\t\t} else {\n\t\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx, part.column - 1)], undefined);\n\t\t\t}\n\n\t\t\tif (lines.length > 0) {\n\t\t\t\taddToAdditionalLines(lines, GHOST_TEXT_DESCRIPTION);\n\t\t\t\tif (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) {\n\t\t\t\t\thiddenTextStartColumn = part.column;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastIdx = part.column - 1;\n\t\t}\n\t\tif (hiddenTextStartColumn !== undefined) {\n\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx)], undefined);\n\t\t}\n\n\t\tconst hiddenRange = hiddenTextStartColumn !== undefined ? new ColumnRange(hiddenTextStartColumn, textBufferLine.length + 1) : undefined;\n\n\t\treturn {\n\t\t\treplacedRange,\n\t\t\tinlineTexts,\n\t\t\tadditionalLines,\n\t\t\thiddenRange,\n\t\t\tlineNumber: ghostText.lineNumber,\n\t\t\tadditionalReservedLineCount: this.model.minReservedLineCount.read(reader),\n\t\t\ttargetTextModel: textModel,\n\t\t};\n\t});\n\n\tprivate readonly decorations = derived(this, reader => {\n\t\tconst uiState = this.uiState.read(reader);\n\t\tif (!uiState) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\n\t\tif (uiState.replacedRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.replacedRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: { inlineClassName: 'inline-completion-text-to-replace', description: 'GhostTextReplacement' }\n\t\t\t});\n\t\t}\n\n\t\tif (uiState.hiddenRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.hiddenRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: { inlineClassName: 'ghost-text-hidden', description: 'ghost-text-hidden', }\n\t\t\t});\n\t\t}\n\n\t\tfor (const p of uiState.inlineTexts) {\n\t\t\tdecorations.push({\n\t\t\t\trange: Range.fromPositions(new Position(uiState.lineNumber, p.column)),\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: GHOST_TEXT_DESCRIPTION,\n\t\t\t\t\tafter: { content: p.text, inlineClassName: p.preview ? 'ghost-text-decoration-preview' : 'ghost-text-decoration', cursorStops: InjectedTextCursorStops.Left },\n\t\t\t\t\tshowIfCollapsed: true,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn decorations;\n\t});\n\n\tprivate readonly additionalLinesWidget = this._register(\n\t\tnew AdditionalLinesWidget(\n\t\t\tthis.editor,\n\t\t\tthis.languageService.languageIdCodec,\n\t\t\tderived(reader => {\n\t\t\t\t/** @description lines */\n\t\t\t\tconst uiState = this.uiState.read(reader);\n\t\t\t\treturn uiState ? {\n\t\t\t\t\tlineNumber: uiState.lineNumber,\n\t\t\t\t\tadditionalLines: uiState.additionalLines,\n\t\t\t\t\tminReservedLineCount: uiState.additionalReservedLineCount,\n\t\t\t\t\ttargetTextModel: uiState.targetTextModel,\n\t\t\t\t} : undefined;\n\t\t\t})\n\t\t)\n\t);\n\n\tpublic ownsViewZone(viewZoneId: string): boolean {\n\t\treturn this.additionalLinesWidget.viewZoneId === viewZoneId;\n\t}\n}\n\nexport class AdditionalLinesWidget extends Disposable {\n\tprivate _viewZoneId: string | undefined = undefined;\n\tpublic get viewZoneId(): string | undefined { return this._viewZoneId; }\n\n\tprivate readonly editorOptionsChanged = observableSignalFromEvent('editorOptionChanged', Event.filter(\n\t\tthis.editor.onDidChangeConfiguration,\n\t\te => e.hasChanged(EditorOption.disableMonospaceOptimizations)\n\t\t\t|| e.hasChanged(EditorOption.stopRenderingLineAfter)\n\t\t\t|| e.hasChanged(EditorOption.renderWhitespace)\n\t\t\t|| e.hasChanged(EditorOption.renderControlCharacters)\n\t\t\t|| e.hasChanged(EditorOption.fontLigatures)\n\t\t\t|| e.hasChanged(EditorOption.fontInfo)\n\t\t\t|| e.hasChanged(EditorOption.lineHeight)\n\t));\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\tprivate readonly languageIdCodec: ILanguageIdCodec,\n\t\tprivate readonly lines: IObservable<{ targetTextModel: ITextModel; lineNumber: number; additionalLines: LineData[]; minReservedLineCount: number } | undefined>\n\t) {\n\t\tsuper();\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update view zone */\n\t\t\tconst lines = this.lines.read(reader);\n\t\t\tthis.editorOptionsChanged.read(reader);\n\n\t\t\tif (lines) {\n\t\t\t\tthis.updateLines(lines.lineNumber, lines.additionalLines, lines.minReservedLineCount);\n\t\t\t} else {\n\t\t\t\tthis.clear();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t}\n\n\tprivate clear(): void {\n\t\tthis.editor.changeViewZones((changeAccessor) => {\n\t\t\tif (this._viewZoneId) {\n\t\t\t\tchangeAccessor.removeZone(this._viewZoneId);\n\t\t\t\tthis._viewZoneId = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate updateLines(lineNumber: number, additionalLines: LineData[], minReservedLineCount: number): void {\n\t\tconst textModel = this.editor.getModel();\n\t\tif (!textModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { tabSize } = textModel.getOptions();\n\n\t\tthis.editor.changeViewZones((changeAccessor) => {\n\t\t\tif (this._viewZoneId) {\n\t\t\t\tchangeAccessor.removeZone(this._viewZoneId);\n\t\t\t\tthis._viewZoneId = undefined;\n\t\t\t}\n\n\t\t\tconst heightInLines = Math.max(additionalLines.length, minReservedLineCount);\n\t\t\tif (heightInLines > 0) {\n\t\t\t\tconst domNode = document.createElement('div');\n\t\t\t\trenderLines(domNode, tabSize, additionalLines, this.editor.getOptions(), this.languageIdCodec);\n\n\t\t\t\tthis._viewZoneId = changeAccessor.addZone({\n\t\t\t\t\tafterLineNumber: lineNumber,\n\t\t\t\t\theightInLines: heightInLines,\n\t\t\t\t\tdomNode,\n\t\t\t\t\tafterColumnAffinity: PositionAffinity.Right\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport interface LineData {\n\tcontent: string; // Must not contain a linebreak!\n\tdecorations: LineDecoration[];\n}\n\nfunction renderLines(domNode: HTMLElement, tabSize: number, lines: LineData[], opts: IComputedEditorOptions, languageIdCodec: ILanguageIdCodec): void {\n\tconst disableMonospaceOptimizations = opts.get(EditorOption.disableMonospaceOptimizations);\n\tconst stopRenderingLineAfter = opts.get(EditorOption.stopRenderingLineAfter);\n\t// To avoid visual confusion, we don't want to render visible whitespace\n\tconst renderWhitespace = 'none';\n\tconst renderControlCharacters = opts.get(EditorOption.renderControlCharacters);\n\tconst fontLigatures = opts.get(EditorOption.fontLigatures);\n\tconst fontInfo = opts.get(EditorOption.fontInfo);\n\tconst lineHeight = opts.get(EditorOption.lineHeight);\n\n\tconst sb = new StringBuilder(10000);\n\tsb.appendString('<div class=\"suggest-preview-text\">');\n\n\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\tconst lineData = lines[i];\n\t\tconst line = lineData.content;\n\t\tsb.appendString('<div class=\"view-line');\n\t\tsb.appendString('\" style=\"top:');\n\t\tsb.appendString(String(i * lineHeight));\n\t\tsb.appendString('px;width:1000000px;\">');\n\n\t\tconst isBasicASCII = strings.isBasicASCII(line);\n\t\tconst containsRTL = strings.containsRTL(line);\n\t\tconst lineTokens = LineTokens.createEmpty(line, languageIdCodec);\n\n\t\trenderViewLine(new RenderLineInput(\n\t\t\t(fontInfo.isMonospace && !disableMonospaceOptimizations),\n\t\t\tfontInfo.canUseHalfwidthRightwardsArrow,\n\t\t\tline,\n\t\t\tfalse,\n\t\t\tisBasicASCII,\n\t\t\tcontainsRTL,\n\t\t\t0,\n\t\t\tlineTokens,\n\t\t\tlineData.decorations,\n\t\t\ttabSize,\n\t\t\t0,\n\t\t\tfontInfo.spaceWidth,\n\t\t\tfontInfo.middotWidth,\n\t\t\tfontInfo.wsmiddotWidth,\n\t\t\tstopRenderingLineAfter,\n\t\t\trenderWhitespace,\n\t\t\trenderControlCharacters,\n\t\t\tfontLigatures !== EditorFontLigatures.OFF,\n\t\t\tnull\n\t\t), sb);\n\n\t\tsb.appendString('</div>');\n\t}\n\tsb.appendString('</div>');\n\n\tapplyFontInfo(domNode, fontInfo);\n\tconst html = sb.build();\n\tconst trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n\tdomNode.innerHTML = trustedhtml as string;\n}\n\nexport const ttPolicy = createTrustedTypesPolicy('editorGhostText', { createHTML: value => value });\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from '../../../../base/browser/trustedTypes';\nimport { Event } from '../../../../base/common/event';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle';\nimport { IObservable, autorun, derived, observableFromEvent, observableSignalFromEvent, observableValue } from '../../../../base/common/observable';\nimport * as strings from '../../../../base/common/strings';\nimport './ghostText.css';\nimport { applyFontInfo } from '../../../browser/config/domFontInfo';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { EditorFontLigatures, EditorOption, IComputedEditorOptions } from '../../../common/config/editorOptions';\nimport { Position } from '../../../common/core/position';\nimport { Range } from '../../../common/core/range';\nimport { StringBuilder } from '../../../common/core/stringBuilder';\nimport { ILanguageIdCodec } from '../../../common/languages';\nimport { ILanguageService } from '../../../common/languages/language';\nimport { IModelDeltaDecoration, ITextModel, InjectedTextCursorStops, PositionAffinity } from '../../../common/model';\nimport { LineTokens } from '../../../common/tokens/lineTokens';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations';\nimport { RenderLineInput, renderViewLine } from '../../../common/viewLayout/viewLineRenderer';\nimport { InlineDecorationType } from '../../../common/viewModel';\nimport { GhostText, GhostTextReplacement } from './ghostText';\nimport { ColumnRange, applyObservableDecorations } from './utils';\n\nexport const GHOST_TEXT_DESCRIPTION = 'ghost-text';\nexport interface IGhostTextWidgetModel {\n\treadonly targetTextModel: IObservable<ITextModel | undefined>;\n\treadonly ghostText: IObservable<GhostText | GhostTextReplacement | undefined>;\n\treadonly minReservedLineCount: IObservable<number>;\n}\n\nexport class GhostTextWidget extends Disposable {\n\tprivate readonly isDisposed = observableValue(this, false);\n\tprivate readonly currentTextModel = observableFromEvent(this.editor.onDidChangeModel, () => /** @description editor.model */ this.editor.getModel());\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\tprivate readonly model: IGhostTextWidgetModel,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => { this.isDisposed.set(true, undefined); }));\n\t\tthis._register(applyObservableDecorations(this.editor, this.decorations));\n\t}\n\n\tprivate readonly uiState = derived(this, reader => {\n\t\tif (this.isDisposed.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst textModel = this.currentTextModel.read(reader);\n\t\tif (textModel !== this.model.targetTextModel.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst ghostText = this.model.ghostText.read(reader);\n\t\tif (!ghostText) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst replacedRange = ghostText instanceof GhostTextReplacement ? ghostText.columnRange : undefined;\n\n\t\tconst inlineTexts: { column: number; text: string; preview: boolean }[] = [];\n\t\tconst additionalLines: LineData[] = [];\n\n\t\tfunction addToAdditionalLines(lines: readonly string[], className: string | undefined) {\n\t\t\tif (additionalLines.length > 0) {\n\t\t\t\tconst lastLine = additionalLines[additionalLines.length - 1];\n\t\t\t\tif (className) {\n\t\t\t\t\tlastLine.decorations.push(new LineDecoration(lastLine.content.length + 1, lastLine.content.length + 1 + lines[0].length, className, InlineDecorationType.Regular));\n\t\t\t\t}\n\t\t\t\tlastLine.content += lines[0];\n\n\t\t\t\tlines = lines.slice(1);\n\t\t\t}\n\t\t\tfor (const line of lines) {\n\t\t\t\tadditionalLines.push({\n\t\t\t\t\tcontent: line,\n\t\t\t\t\tdecorations: className ? [new LineDecoration(1, line.length + 1, className, InlineDecorationType.Regular)] : []\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst textBufferLine = textModel.getLineContent(ghostText.lineNumber);\n\n\t\tlet hiddenTextStartColumn: number | undefined = undefined;\n\t\tlet lastIdx = 0;\n\t\tfor (const part of ghostText.parts) {\n\t\t\tlet lines = part.lines;\n\t\t\tif (hiddenTextStartColumn === undefined) {\n\t\t\t\tinlineTexts.push({\n\t\t\t\t\tcolumn: part.column,\n\t\t\t\t\ttext: lines[0],\n\t\t\t\t\tpreview: part.preview,\n\t\t\t\t});\n\t\t\t\tlines = lines.slice(1);\n\t\t\t} else {\n\t\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx, part.column - 1)], undefined);\n\t\t\t}\n\n\t\t\tif (lines.length > 0) {\n\t\t\t\taddToAdditionalLines(lines, GHOST_TEXT_DESCRIPTION);\n\t\t\t\tif (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) {\n\t\t\t\t\thiddenTextStartColumn = part.column;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastIdx = part.column - 1;\n\t\t}\n\t\tif (hiddenTextStartColumn !== undefined) {\n\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx)], undefined);\n\t\t}\n\n\t\tconst hiddenRange = hiddenTextStartColumn !== undefined ? new ColumnRange(hiddenTextStartColumn, textBufferLine.length + 1) : undefined;\n\n\t\treturn {\n\t\t\treplacedRange,\n\t\t\tinlineTexts,\n\t\t\tadditionalLines,\n\t\t\thiddenRange,\n\t\t\tlineNumber: ghostText.lineNumber,\n\t\t\tadditionalReservedLineCount: this.model.minReservedLineCount.read(reader),\n\t\t\ttargetTextModel: textModel,\n\t\t};\n\t});\n\n\tprivate readonly decorations = derived(this, reader => {\n\t\tconst uiState = this.uiState.read(reader);\n\t\tif (!uiState) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\n\t\tif (uiState.replacedRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.replacedRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: { inlineClassName: 'inline-completion-text-to-replace', description: 'GhostTextReplacement' }\n\t\t\t});\n\t\t}\n\n\t\tif (uiState.hiddenRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.hiddenRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: { inlineClassName: 'ghost-text-hidden', description: 'ghost-text-hidden', }\n\t\t\t});\n\t\t}\n\n\t\tfor (const p of uiState.inlineTexts) {\n\t\t\tdecorations.push({\n\t\t\t\trange: Range.fromPositions(new Position(uiState.lineNumber, p.column)),\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: GHOST_TEXT_DESCRIPTION,\n\t\t\t\t\tafter: { content: p.text, inlineClassName: p.preview ? 'ghost-text-decoration-preview' : 'ghost-text-decoration', cursorStops: InjectedTextCursorStops.Left },\n\t\t\t\t\tshowIfCollapsed: true,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn decorations;\n\t});\n\n\tprivate readonly additionalLinesWidget = this._register(\n\t\tnew AdditionalLinesWidget(\n\t\t\tthis.editor,\n\t\t\tthis.languageService.languageIdCodec,\n\t\t\tderived(reader => {\n\t\t\t\t/** @description lines */\n\t\t\t\tconst uiState = this.uiState.read(reader);\n\t\t\t\treturn uiState ? {\n\t\t\t\t\tlineNumber: uiState.lineNumber,\n\t\t\t\t\tadditionalLines: uiState.additionalLines,\n\t\t\t\t\tminReservedLineCount: uiState.additionalReservedLineCount,\n\t\t\t\t\ttargetTextModel: uiState.targetTextModel,\n\t\t\t\t} : undefined;\n\t\t\t})\n\t\t)\n\t);\n\n\tpublic ownsViewZone(viewZoneId: string): boolean {\n\t\treturn this.additionalLinesWidget.viewZoneId === viewZoneId;\n\t}\n}\n\nexport class AdditionalLinesWidget extends Disposable {\n\tprivate _viewZoneId: string | undefined = undefined;\n\tpublic get viewZoneId(): string | undefined { return this._viewZoneId; }\n\n\tprivate readonly editorOptionsChanged = observableSignalFromEvent('editorOptionChanged', Event.filter(\n\t\tthis.editor.onDidChangeConfiguration,\n\t\te => e.hasChanged(EditorOption.disableMonospaceOptimizations)\n\t\t\t|| e.hasChanged(EditorOption.stopRenderingLineAfter)\n\t\t\t|| e.hasChanged(EditorOption.renderWhitespace)\n\t\t\t|| e.hasChanged(EditorOption.renderControlCharacters)\n\t\t\t|| e.hasChanged(EditorOption.fontLigatures)\n\t\t\t|| e.hasChanged(EditorOption.fontInfo)\n\t\t\t|| e.hasChanged(EditorOption.lineHeight)\n\t));\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\tprivate readonly languageIdCodec: ILanguageIdCodec,\n\t\tprivate readonly lines: IObservable<{ targetTextModel: ITextModel; lineNumber: number; additionalLines: LineData[]; minReservedLineCount: number } | undefined>\n\t) {\n\t\tsuper();\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update view zone */\n\t\t\tconst lines = this.lines.read(reader);\n\t\t\tthis.editorOptionsChanged.read(reader);\n\n\t\t\tif (lines) {\n\t\t\t\tthis.updateLines(lines.lineNumber, lines.additionalLines, lines.minReservedLineCount);\n\t\t\t} else {\n\t\t\t\tthis.clear();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t}\n\n\tprivate clear(): void {\n\t\tthis.editor.changeViewZones((changeAccessor) => {\n\t\t\tif (this._viewZoneId) {\n\t\t\t\tchangeAccessor.removeZone(this._viewZoneId);\n\t\t\t\tthis._viewZoneId = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate updateLines(lineNumber: number, additionalLines: LineData[], minReservedLineCount: number): void {\n\t\tconst textModel = this.editor.getModel();\n\t\tif (!textModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { tabSize } = textModel.getOptions();\n\n\t\tthis.editor.changeViewZones((changeAccessor) => {\n\t\t\tif (this._viewZoneId) {\n\t\t\t\tchangeAccessor.removeZone(this._viewZoneId);\n\t\t\t\tthis._viewZoneId = undefined;\n\t\t\t}\n\n\t\t\tconst heightInLines = Math.max(additionalLines.length, minReservedLineCount);\n\t\t\tif (heightInLines > 0) {\n\t\t\t\tconst domNode = document.createElement('div');\n\t\t\t\trenderLines(domNode, tabSize, additionalLines, this.editor.getOptions(), this.languageIdCodec);\n\n\t\t\t\tthis._viewZoneId = changeAccessor.addZone({\n\t\t\t\t\tafterLineNumber: lineNumber,\n\t\t\t\t\theightInLines: heightInLines,\n\t\t\t\t\tdomNode,\n\t\t\t\t\tafterColumnAffinity: PositionAffinity.Right\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport interface LineData {\n\tcontent: string; // Must not contain a linebreak!\n\tdecorations: LineDecoration[];\n}\n\nfunction renderLines(domNode: HTMLElement, tabSize: number, lines: LineData[], opts: IComputedEditorOptions, languageIdCodec: ILanguageIdCodec): void {\n\tconst disableMonospaceOptimizations = opts.get(EditorOption.disableMonospaceOptimizations);\n\tconst stopRenderingLineAfter = opts.get(EditorOption.stopRenderingLineAfter);\n\t// To avoid visual confusion, we don't want to render visible whitespace\n\tconst renderWhitespace = 'none';\n\tconst renderControlCharacters = opts.get(EditorOption.renderControlCharacters);\n\tconst fontLigatures = opts.get(EditorOption.fontLigatures);\n\tconst fontInfo = opts.get(EditorOption.fontInfo);\n\tconst lineHeight = opts.get(EditorOption.lineHeight);\n\n\tconst sb = new StringBuilder(10000);\n\tsb.appendString('<div class=\"suggest-preview-text\">');\n\n\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\tconst lineData = lines[i];\n\t\tconst line = lineData.content;\n\t\tsb.appendString('<div class=\"view-line');\n\t\tsb.appendString('\" style=\"top:');\n\t\tsb.appendString(String(i * lineHeight));\n\t\tsb.appendString('px;width:1000000px;\">');\n\n\t\tconst isBasicASCII = strings.isBasicASCII(line);\n\t\tconst containsRTL = strings.containsRTL(line);\n\t\tconst lineTokens = LineTokens.createEmpty(line, languageIdCodec);\n\n\t\trenderViewLine(new RenderLineInput(\n\t\t\t(fontInfo.isMonospace && !disableMonospaceOptimizations),\n\t\t\tfontInfo.canUseHalfwidthRightwardsArrow,\n\t\t\tline,\n\t\t\tfalse,\n\t\t\tisBasicASCII,\n\t\t\tcontainsRTL,\n\t\t\t0,\n\t\t\tlineTokens,\n\t\t\tlineData.decorations,\n\t\t\ttabSize,\n\t\t\t0,\n\t\t\tfontInfo.spaceWidth,\n\t\t\tfontInfo.middotWidth,\n\t\t\tfontInfo.wsmiddotWidth,\n\t\t\tstopRenderingLineAfter,\n\t\t\trenderWhitespace,\n\t\t\trenderControlCharacters,\n\t\t\tfontLigatures !== EditorFontLigatures.OFF,\n\t\t\tnull\n\t\t), sb);\n\n\t\tsb.appendString('</div>');\n\t}\n\tsb.appendString('</div>');\n\n\tapplyFontInfo(domNode, fontInfo);\n\tconst html = sb.build();\n\tconst trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n\tdomNode.innerHTML = trustedhtml as string;\n}\n\nexport const ttPolicy = createTrustedTypesPolicy('editorGhostText', { createHTML: value => value });\n"]}