import { Disposable } from '../../../../base/common/lifecycle';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { Position } from '../../../common/core/position';
import { Range } from '../../../common/core/range';
import { CompletionItemKind, SelectedSuggestionInfo } from '../../../common/languages';
import { CompletionItem } from '../../suggest/browser/suggest';
import { SuggestController } from '../../suggest/browser/suggestController';
import { IObservable, ITransaction } from '../../../../base/common/observable';
import { SingleTextEdit } from './singleTextEdit';
import { ITextModel } from '../../../common/model';
export declare class SuggestWidgetAdaptor extends Disposable {
    private readonly editor;
    private readonly suggestControllerPreselector;
    private readonly checkModelVersion;
    private readonly onWillAccept;
    private isSuggestWidgetVisible;
    private isShiftKeyPressed;
    private _isActive;
    private _currentSuggestItemInfo;
    private readonly _selectedItem;
    get selectedItem(): IObservable<SuggestItemInfo | undefined>;
    constructor(editor: ICodeEditor, suggestControllerPreselector: () => SingleTextEdit | undefined, checkModelVersion: (tx: ITransaction) => void, onWillAccept: (item: SuggestItemInfo) => void);
    private update;
    private getSuggestItemInfo;
    stopForceRenderingAbove(): void;
    forceRenderingAbove(): void;
}
export declare class SuggestItemInfo {
    readonly range: Range;
    readonly insertText: string;
    readonly completionItemKind: CompletionItemKind;
    readonly isSnippetText: boolean;
    static fromSuggestion(suggestController: SuggestController, model: ITextModel, position: Position, item: CompletionItem, toggleMode: boolean): SuggestItemInfo;
    private constructor();
    equals(other: SuggestItemInfo): boolean;
    toSelectedSuggestionInfo(): SelectedSuggestionInfo;
    toSingleTextEdit(): SingleTextEdit;
}
