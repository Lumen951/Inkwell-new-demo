import { IObservable } from '../../../../base/common/observable';
import { InlineCompletionsModel } from './inlineCompletionsModel';
import { RawContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey';
import { Disposable } from '../../../../base/common/lifecycle';
export declare class InlineCompletionContextKeys extends Disposable {
    private readonly contextKeyService;
    private readonly model;
    static readonly inlineSuggestionVisible: RawContextKey<boolean>;
    static readonly inlineSuggestionHasIndentation: RawContextKey<boolean>;
    static readonly inlineSuggestionHasIndentationLessThanTabSize: RawContextKey<boolean>;
    static readonly suppressSuggestions: RawContextKey<boolean | undefined>;
    readonly inlineCompletionVisible: import("../../../../platform/contextkey/common/contextkey").IContextKey<boolean>;
    readonly inlineCompletionSuggestsIndentation: import("../../../../platform/contextkey/common/contextkey").IContextKey<boolean>;
    readonly inlineCompletionSuggestsIndentationLessThanTabSize: import("../../../../platform/contextkey/common/contextkey").IContextKey<boolean>;
    readonly suppressSuggestions: import("../../../../platform/contextkey/common/contextkey").IContextKey<boolean | undefined>;
    constructor(contextKeyService: IContextKeyService, model: IObservable<InlineCompletionsModel | undefined>);
}
