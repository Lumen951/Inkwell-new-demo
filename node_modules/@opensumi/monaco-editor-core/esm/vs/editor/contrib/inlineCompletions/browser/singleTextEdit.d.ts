import { Position } from '../../../common/core/position';
import { Range } from '../../../common/core/range';
import { ITextModel } from '../../../common/model';
import { GhostText } from './ghostText';
export declare class SingleTextEdit {
    readonly range: Range;
    readonly text: string;
    constructor(range: Range, text: string);
    static equals(first: SingleTextEdit, second: SingleTextEdit): boolean;
    removeCommonPrefix(model: ITextModel, validModelRange?: Range): SingleTextEdit;
    augments(base: SingleTextEdit): boolean;
    /**
     * @param previewSuffixLength Sets where to split `inlineCompletion.text`.
     * 	If the text is `hello` and the suffix length is 2, the non-preview part is `hel` and the preview-part is `lo`.
    */
    computeGhostText(model: ITextModel, mode: 'prefix' | 'subword' | 'subwordSmart', cursorPosition?: Position, previewSuffixLength?: number): GhostText | undefined;
}
