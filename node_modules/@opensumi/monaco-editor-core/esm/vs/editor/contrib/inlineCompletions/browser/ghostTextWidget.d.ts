/// <reference types="trusted-types" />
import { Disposable } from '../../../../base/common/lifecycle';
import { IObservable } from '../../../../base/common/observable';
import './ghostText.css';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { ILanguageIdCodec } from '../../../common/languages';
import { ILanguageService } from '../../../common/languages/language';
import { ITextModel } from '../../../common/model';
import { LineDecoration } from '../../../common/viewLayout/lineDecorations';
import { GhostText, GhostTextReplacement } from './ghostText';
export declare const GHOST_TEXT_DESCRIPTION = "ghost-text";
export interface IGhostTextWidgetModel {
    readonly targetTextModel: IObservable<ITextModel | undefined>;
    readonly ghostText: IObservable<GhostText | GhostTextReplacement | undefined>;
    readonly minReservedLineCount: IObservable<number>;
}
export declare class GhostTextWidget extends Disposable {
    private readonly editor;
    private readonly model;
    private readonly languageService;
    private readonly isDisposed;
    private readonly currentTextModel;
    constructor(editor: ICodeEditor, model: IGhostTextWidgetModel, languageService: ILanguageService);
    private readonly uiState;
    private readonly decorations;
    private readonly additionalLinesWidget;
    ownsViewZone(viewZoneId: string): boolean;
}
export declare class AdditionalLinesWidget extends Disposable {
    private readonly editor;
    private readonly languageIdCodec;
    private readonly lines;
    private _viewZoneId;
    get viewZoneId(): string | undefined;
    private readonly editorOptionsChanged;
    constructor(editor: ICodeEditor, languageIdCodec: ILanguageIdCodec, lines: IObservable<{
        targetTextModel: ITextModel;
        lineNumber: number;
        additionalLines: LineData[];
        minReservedLineCount: number;
    } | undefined>);
    dispose(): void;
    private clear;
    private updateLines;
}
export interface LineData {
    content: string;
    decorations: LineDecoration[];
}
export declare const ttPolicy: Pick<TrustedTypePolicy<{
    createHTML: (value: string) => string;
}>, "name" | "createHTML"> | undefined;
