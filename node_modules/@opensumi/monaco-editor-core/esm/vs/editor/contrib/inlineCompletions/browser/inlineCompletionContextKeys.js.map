{"version":3,"sources":["vs/editor/contrib/inlineCompletions/browser/inlineCompletionContextKeys.ts"],"names":[],"mappings":"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","file":"inlineCompletionContextKeys.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IObservable, autorun } from '../../../../base/common/observable';\nimport { firstNonWhitespaceIndex } from '../../../../base/common/strings';\nimport { CursorColumns } from '../../../common/core/cursorColumns';\nimport { InlineCompletionsModel } from './inlineCompletionsModel';\nimport { RawContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey';\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { localize } from '../../../../nls';\n\nexport class InlineCompletionContextKeys extends Disposable {\n\tpublic static readonly inlineSuggestionVisible = new RawContextKey<boolean>('inlineSuggestionVisible', false, localize('inlineSuggestionVisible', \"Whether an inline suggestion is visible\"));\n\tpublic static readonly inlineSuggestionHasIndentation = new RawContextKey<boolean>('inlineSuggestionHasIndentation', false, localize('inlineSuggestionHasIndentation', \"Whether the inline suggestion starts with whitespace\"));\n\tpublic static readonly inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey<boolean>('inlineSuggestionHasIndentationLessThanTabSize', true, localize('inlineSuggestionHasIndentationLessThanTabSize', \"Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab\"));\n\tpublic static readonly suppressSuggestions = new RawContextKey<boolean | undefined>('inlineSuggestionSuppressSuggestions', undefined, localize('suppressSuggestions', \"Whether suggestions should be suppressed for the current suggestion\"));\n\n\tpublic readonly inlineCompletionVisible = InlineCompletionContextKeys.inlineSuggestionVisible.bindTo(this.contextKeyService);\n\tpublic readonly inlineCompletionSuggestsIndentation = InlineCompletionContextKeys.inlineSuggestionHasIndentation.bindTo(this.contextKeyService);\n\tpublic readonly inlineCompletionSuggestsIndentationLessThanTabSize = InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService);\n\tpublic readonly suppressSuggestions = InlineCompletionContextKeys.suppressSuggestions.bindTo(this.contextKeyService);\n\n\tconstructor(\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t\tprivate readonly model: IObservable<InlineCompletionsModel | undefined>,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update context key: inlineCompletionVisible, suppressSuggestions */\n\t\t\tconst model = this.model.read(reader);\n\t\t\tconst state = model?.state.read(reader);\n\n\t\t\tconst isInlineCompletionVisible = !!state?.inlineCompletion && state?.primaryGhostText !== undefined && !state?.primaryGhostText.isEmpty();\n\t\t\tthis.inlineCompletionVisible.set(isInlineCompletionVisible);\n\n\t\t\tif (state?.primaryGhostText && state?.inlineCompletion) {\n\t\t\t\tthis.suppressSuggestions.set(state.inlineCompletion.inlineCompletion.source.inlineCompletions.suppressSuggestions);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update context key: inlineCompletionSuggestsIndentation, inlineCompletionSuggestsIndentationLessThanTabSize */\n\t\t\tconst model = this.model.read(reader);\n\n\t\t\tlet startsWithIndentation = false;\n\t\t\tlet startsWithIndentationLessThanTabSize = true;\n\n\t\t\tconst ghostText = model?.primaryGhostText.read(reader);\n\t\t\tif (!!model?.selectedSuggestItem && ghostText && ghostText.parts.length > 0) {\n\t\t\t\tconst { column, lines } = ghostText.parts[0];\n\n\t\t\t\tconst firstLine = lines[0];\n\n\t\t\t\tconst indentationEndColumn = model.textModel.getLineIndentColumn(ghostText.lineNumber);\n\t\t\t\tconst inIndentation = column <= indentationEndColumn;\n\n\t\t\t\tif (inIndentation) {\n\t\t\t\t\tlet firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n\t\t\t\t\tif (firstNonWsIdx === -1) {\n\t\t\t\t\t\tfirstNonWsIdx = firstLine.length - 1;\n\t\t\t\t\t}\n\t\t\t\t\tstartsWithIndentation = firstNonWsIdx > 0;\n\n\t\t\t\t\tconst tabSize = model.textModel.getOptions().tabSize;\n\t\t\t\t\tconst visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n\t\t\t\t\tstartsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.inlineCompletionSuggestsIndentation.set(startsWithIndentation);\n\t\t\tthis.inlineCompletionSuggestsIndentationLessThanTabSize.set(startsWithIndentationLessThanTabSize);\n\t\t}));\n\t}\n}\n"]}