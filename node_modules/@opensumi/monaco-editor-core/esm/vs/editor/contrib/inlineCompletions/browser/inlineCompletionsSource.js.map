{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletionsSource.ts","vs/editor/contrib/inlineCompletions/browser/inlineCompletionsSource.ts"],"names":[],"mappings":"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","file":"inlineCompletionsSource.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation';\nimport { matchesSubString } from '../../../../base/common/filters';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../../base/common/lifecycle';\nimport { IObservable, IReader, ITransaction, derived, disposableObservableValue, transaction } from '../../../../base/common/observable';\nimport { Position } from '../../../common/core/position';\nimport { Range } from '../../../common/core/range';\nimport { InlineCompletionContext, InlineCompletionTriggerKind } from '../../../common/languages';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry';\nimport { EndOfLinePreference, ITextModel } from '../../../common/model';\nimport { IFeatureDebounceInformation } from '../../../common/services/languageFeatureDebounce';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { InlineCompletionItem, InlineCompletionProviderResult, provideInlineCompletions } from './provideInlineCompletions';\nimport { SingleTextEdit } from './singleTextEdit';\n\nexport class InlineCompletionsSource extends Disposable {\n\tprivate readonly _updateOperation = this._register(new MutableDisposable<UpdateOperation>());\n\tpublic readonly inlineCompletions = disposableObservableValue<UpToDateInlineCompletions | undefined>('inlineCompletions', undefined);\n\tpublic readonly suggestWidgetInlineCompletions = disposableObservableValue<UpToDateInlineCompletions | undefined>('suggestWidgetInlineCompletions', undefined);\n\n\tconstructor(\n\t\tprivate readonly textModel: ITextModel,\n\t\tprivate readonly versionId: IObservable<number>,\n\t\tprivate readonly _debounceValue: IFeatureDebounceInformation,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@ILanguageConfigurationService private readonly languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this.textModel.onDidChangeContent(() => {\n\t\t\tthis._updateOperation.clear();\n\t\t}));\n\t}\n\n\tpublic fetch(position: Position, context: InlineCompletionContext, activeInlineCompletion: InlineCompletionWithUpdatedRange | undefined): Promise<boolean> {\n\t\tconst request = new UpdateRequest(position, context, this.textModel.getVersionId());\n\n\t\tconst target = context.selectedSuggestionInfo ? this.suggestWidgetInlineCompletions : this.inlineCompletions;\n\n\t\tif (this._updateOperation.value?.request.satisfies(request)) {\n\t\t\treturn this._updateOperation.value.promise;\n\t\t} else if (target.get()?.request.satisfies(request)) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\tconst updateOngoing = !!this._updateOperation.value;\n\t\tthis._updateOperation.clear();\n\n\t\tconst source = new CancellationTokenSource();\n\n\t\tconst promise = (async () => {\n\t\t\tconst shouldDebounce = updateOngoing || context.triggerKind === InlineCompletionTriggerKind.Automatic;\n\t\t\tif (shouldDebounce) {\n\t\t\t\t// This debounces the operation\n\t\t\t\tawait wait(this._debounceValue.get(this.textModel), source.token);\n\t\t\t}\n\n\t\t\tif (source.token.isCancellationRequested || this.textModel.getVersionId() !== request.versionId) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst startTime = new Date();\n\t\t\tconst updatedCompletions = await provideInlineCompletions(\n\t\t\t\tthis.languageFeaturesService.inlineCompletionsProvider,\n\t\t\t\tposition,\n\t\t\t\tthis.textModel,\n\t\t\t\tcontext,\n\t\t\t\tsource.token,\n\t\t\t\tthis.languageConfigurationService\n\t\t\t);\n\n\t\t\tif (source.token.isCancellationRequested || this.textModel.getVersionId() !== request.versionId) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst endTime = new Date();\n\t\t\tthis._debounceValue.update(this.textModel, endTime.getTime() - startTime.getTime());\n\n\t\t\tconst completions = new UpToDateInlineCompletions(updatedCompletions, request, this.textModel, this.versionId);\n\t\t\tif (activeInlineCompletion) {\n\t\t\t\tconst asInlineCompletion = activeInlineCompletion.toInlineCompletion(undefined);\n\t\t\t\tif (activeInlineCompletion.canBeReused(this.textModel, position) && !updatedCompletions.has(asInlineCompletion)) {\n\t\t\t\t\tcompletions.prepend(activeInlineCompletion.inlineCompletion, asInlineCompletion.range, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._updateOperation.clear();\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description Update completions with provider result */\n\t\t\t\ttarget.set(completions, tx);\n\t\t\t});\n\n\t\t\treturn true;\n\t\t})();\n\n\t\tconst updateOperation = new UpdateOperation(request, source, promise);\n\t\tthis._updateOperation.value = updateOperation;\n\n\t\treturn promise;\n\t}\n\n\tpublic clear(tx: ITransaction): void {\n\t\tthis._updateOperation.clear();\n\t\tthis.inlineCompletions.set(undefined, tx);\n\t\tthis.suggestWidgetInlineCompletions.set(undefined, tx);\n\t}\n\n\tpublic clearSuggestWidgetInlineCompletions(tx: ITransaction): void {\n\t\tif (this._updateOperation.value?.request.context.selectedSuggestionInfo) {\n\t\t\tthis._updateOperation.clear();\n\t\t}\n\t\tthis.suggestWidgetInlineCompletions.set(undefined, tx);\n\t}\n\n\tpublic cancelUpdate(): void {\n\t\tthis._updateOperation.clear();\n\t}\n}\n\nfunction wait(ms: number, cancellationToken?: CancellationToken): Promise<void> {\n\treturn new Promise(resolve => {\n\t\tlet d: IDisposable | undefined = undefined;\n\t\tconst handle = setTimeout(() => {\n\t\t\tif (d) { d.dispose(); }\n\t\t\tresolve();\n\t\t}, ms);\n\t\tif (cancellationToken) {\n\t\t\td = cancellationToken.onCancellationRequested(() => {\n\t\t\t\tclearTimeout(handle);\n\t\t\t\tif (d) { d.dispose(); }\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}\n\t});\n}\n\nclass UpdateRequest {\n\tconstructor(\n\t\tpublic readonly position: Position,\n\t\tpublic readonly context: InlineCompletionContext,\n\t\tpublic readonly versionId: number,\n\t) {\n\t}\n\n\tpublic satisfies(other: UpdateRequest): boolean {\n\t\treturn this.position.equals(other.position)\n\t\t\t&& equals(this.context.selectedSuggestionInfo, other.context.selectedSuggestionInfo, (v1, v2) => v1.equals(v2))\n\t\t\t&& (other.context.triggerKind === InlineCompletionTriggerKind.Automatic\n\t\t\t\t|| this.context.triggerKind === InlineCompletionTriggerKind.Explicit)\n\t\t\t&& this.versionId === other.versionId;\n\t}\n}\n\nfunction equals<T>(v1: T | undefined, v2: T | undefined, equals: (v1: T, v2: T) => boolean): boolean {\n\tif (!v1 || !v2) {\n\t\treturn v1 === v2;\n\t}\n\treturn equals(v1, v2);\n}\n\nclass UpdateOperation implements IDisposable {\n\tconstructor(\n\t\tpublic readonly request: UpdateRequest,\n\t\tpublic readonly cancellationTokenSource: CancellationTokenSource,\n\t\tpublic readonly promise: Promise<boolean>,\n\t) {\n\t}\n\n\tdispose() {\n\t\tthis.cancellationTokenSource.cancel();\n\t}\n}\n\nexport class UpToDateInlineCompletions implements IDisposable {\n\tprivate readonly _inlineCompletions: InlineCompletionWithUpdatedRange[];\n\tpublic get inlineCompletions(): ReadonlyArray<InlineCompletionWithUpdatedRange> { return this._inlineCompletions; }\n\n\tprivate _refCount = 1;\n\tprivate readonly _prependedInlineCompletionItems: InlineCompletionItem[] = [];\n\n\tprivate _rangeVersionIdValue = 0;\n\tprivate readonly _rangeVersionId = derived(this, reader => {\n\t\tthis.versionId.read(reader);\n\t\tlet changed = false;\n\t\tfor (const i of this._inlineCompletions) {\n\t\t\tchanged = changed || i._updateRange(this.textModel);\n\t\t}\n\t\tif (changed) {\n\t\t\tthis._rangeVersionIdValue++;\n\t\t}\n\t\treturn this._rangeVersionIdValue;\n\t});\n\n\tconstructor(\n\t\tprivate readonly inlineCompletionProviderResult: InlineCompletionProviderResult,\n\t\tpublic readonly request: UpdateRequest,\n\t\tprivate readonly textModel: ITextModel,\n\t\tprivate readonly versionId: IObservable<number>,\n\t) {\n\t\tconst ids = textModel.deltaDecorations([], inlineCompletionProviderResult.completions.map(i => ({\n\t\t\trange: i.range,\n\t\t\toptions: {\n\t\t\t\tdescription: 'inline-completion-tracking-range'\n\t\t\t},\n\t\t})));\n\n\t\tthis._inlineCompletions = inlineCompletionProviderResult.completions.map(\n\t\t\t(i, index) => new InlineCompletionWithUpdatedRange(i, ids[index], this._rangeVersionId)\n\t\t);\n\t}\n\n\tpublic clone(): this {\n\t\tthis._refCount++;\n\t\treturn this;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._refCount--;\n\t\tif (this._refCount === 0) {\n\t\t\tsetTimeout(() => {\n\t\t\t\t// To fix https://github.com/microsoft/vscode/issues/188348\n\t\t\t\tif (!this.textModel.isDisposed()) {\n\t\t\t\t\t// This is just cleanup. It's ok if it happens with a delay.\n\t\t\t\t\tthis.textModel.deltaDecorations(this._inlineCompletions.map(i => i.decorationId), []);\n\t\t\t\t}\n\t\t\t}, 0);\n\t\t\tthis.inlineCompletionProviderResult.dispose();\n\t\t\tfor (const i of this._prependedInlineCompletionItems) {\n\t\t\t\ti.source.removeRef();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic prepend(inlineCompletion: InlineCompletionItem, range: Range, addRefToSource: boolean): void {\n\t\tif (addRefToSource) {\n\t\t\tinlineCompletion.source.addRef();\n\t\t}\n\n\t\tconst id = this.textModel.deltaDecorations([], [{\n\t\t\trange,\n\t\t\toptions: {\n\t\t\t\tdescription: 'inline-completion-tracking-range'\n\t\t\t},\n\t\t}])[0];\n\t\tthis._inlineCompletions.unshift(new InlineCompletionWithUpdatedRange(inlineCompletion, id, this._rangeVersionId, range));\n\t\tthis._prependedInlineCompletionItems.push(inlineCompletion);\n\t}\n}\n\nexport class InlineCompletionWithUpdatedRange {\n\tpublic readonly semanticId = JSON.stringify([\n\t\tthis.inlineCompletion.filterText,\n\t\tthis.inlineCompletion.insertText,\n\t\tthis.inlineCompletion.range.getStartPosition().toString()\n\t]);\n\tprivate _updatedRange: Range;\n\tprivate _isValid = true;\n\n\tpublic get forwardStable() {\n\t\treturn this.inlineCompletion.source.inlineCompletions.enableForwardStability ?? false;\n\t}\n\n\tconstructor(\n\t\tpublic readonly inlineCompletion: InlineCompletionItem,\n\t\tpublic readonly decorationId: string,\n\t\tprivate readonly rangeVersion: IObservable<number>,\n\t\tinitialRange?: Range,\n\t) {\n\t\tthis._updatedRange = initialRange ?? inlineCompletion.range;\n\t}\n\n\tpublic toInlineCompletion(reader: IReader | undefined): InlineCompletionItem {\n\t\treturn this.inlineCompletion.withRange(this._getUpdatedRange(reader));\n\t}\n\n\tpublic toSingleTextEdit(reader: IReader | undefined): SingleTextEdit {\n\t\treturn new SingleTextEdit(this._getUpdatedRange(reader), this.inlineCompletion.insertText);\n\t}\n\n\tpublic isVisible(model: ITextModel, cursorPosition: Position, reader: IReader | undefined): boolean {\n\t\tconst minimizedReplacement = this._toFilterTextReplacement(reader).removeCommonPrefix(model);\n\n\t\tif (\n\t\t\t!this._isValid\n\t\t\t|| !this.inlineCompletion.range.getStartPosition().equals(this._getUpdatedRange(reader).getStartPosition())\n\t\t\t|| cursorPosition.lineNumber !== minimizedReplacement.range.startLineNumber\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// We might consider comparing by .toLowerText, but this requires GhostTextReplacement\n\t\tconst originalValue = model.getValueInRange(minimizedReplacement.range, EndOfLinePreference.LF);\n\t\tconst filterText = minimizedReplacement.text;\n\n\t\tconst cursorPosIndex = Math.max(0, cursorPosition.column - minimizedReplacement.range.startColumn);\n\n\t\tlet filterTextBefore = filterText.substring(0, cursorPosIndex);\n\t\tlet filterTextAfter = filterText.substring(cursorPosIndex);\n\n\t\tlet originalValueBefore = originalValue.substring(0, cursorPosIndex);\n\t\tlet originalValueAfter = originalValue.substring(cursorPosIndex);\n\n\t\tconst originalValueIndent = model.getLineIndentColumn(minimizedReplacement.range.startLineNumber);\n\t\tif (minimizedReplacement.range.startColumn <= originalValueIndent) {\n\t\t\t// Remove indentation\n\t\t\toriginalValueBefore = originalValueBefore.trimStart();\n\t\t\tif (originalValueBefore.length === 0) {\n\t\t\t\toriginalValueAfter = originalValueAfter.trimStart();\n\t\t\t}\n\t\t\tfilterTextBefore = filterTextBefore.trimStart();\n\t\t\tif (filterTextBefore.length === 0) {\n\t\t\t\tfilterTextAfter = filterTextAfter.trimStart();\n\t\t\t}\n\t\t}\n\n\t\treturn filterTextBefore.startsWith(originalValueBefore)\n\t\t\t&& !!matchesSubString(originalValueAfter, filterTextAfter);\n\t}\n\n\tpublic canBeReused(model: ITextModel, position: Position): boolean {\n\t\tconst result = this._isValid\n\t\t\t&& this._getUpdatedRange(undefined).containsPosition(position)\n\t\t\t&& this.isVisible(model, position, undefined)\n\t\t\t&& !this._isSmallerThanOriginal(undefined);\n\t\treturn result;\n\t}\n\n\tprivate _toFilterTextReplacement(reader: IReader | undefined): SingleTextEdit {\n\t\treturn new SingleTextEdit(this._getUpdatedRange(reader), this.inlineCompletion.filterText);\n\t}\n\n\tprivate _isSmallerThanOriginal(reader: IReader | undefined): boolean {\n\t\treturn length(this._getUpdatedRange(reader)).isBefore(length(this.inlineCompletion.range));\n\t}\n\n\tprivate _getUpdatedRange(reader: IReader | undefined): Range {\n\t\tthis.rangeVersion.read(reader); // This makes sure all the ranges are updated.\n\t\treturn this._updatedRange;\n\t}\n\n\tpublic _updateRange(textModel: ITextModel): boolean {\n\t\tconst range = textModel.getDecorationRange(this.decorationId);\n\t\tif (!range) {\n\t\t\t// A setValue call might flush all decorations.\n\t\t\tthis._isValid = false;\n\t\t\treturn true;\n\t\t}\n\t\tif (!this._updatedRange.equalsRange(range)) {\n\t\t\tthis._updatedRange = range;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nfunction length(range: Range): Position {\n\tif (range.startLineNumber === range.endLineNumber) {\n\t\treturn new Position(1, 1 + range.endColumn - range.startColumn);\n\t} else {\n\t\treturn new Position(1 + range.endLineNumber - range.startLineNumber, range.endColumn);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation';\nimport { matchesSubString } from '../../../../base/common/filters';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../../base/common/lifecycle';\nimport { IObservable, IReader, ITransaction, derived, disposableObservableValue, transaction } from '../../../../base/common/observable';\nimport { Position } from '../../../common/core/position';\nimport { Range } from '../../../common/core/range';\nimport { InlineCompletionContext, InlineCompletionTriggerKind } from '../../../common/languages';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry';\nimport { EndOfLinePreference, ITextModel } from '../../../common/model';\nimport { IFeatureDebounceInformation } from '../../../common/services/languageFeatureDebounce';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { InlineCompletionItem, InlineCompletionProviderResult, provideInlineCompletions } from './provideInlineCompletions';\nimport { SingleTextEdit } from './singleTextEdit';\n\nexport class InlineCompletionsSource extends Disposable {\n\tprivate readonly _updateOperation = this._register(new MutableDisposable<UpdateOperation>());\n\tpublic readonly inlineCompletions = disposableObservableValue<UpToDateInlineCompletions | undefined>('inlineCompletions', undefined);\n\tpublic readonly suggestWidgetInlineCompletions = disposableObservableValue<UpToDateInlineCompletions | undefined>('suggestWidgetInlineCompletions', undefined);\n\n\tconstructor(\n\t\tprivate readonly textModel: ITextModel,\n\t\tprivate readonly versionId: IObservable<number>,\n\t\tprivate readonly _debounceValue: IFeatureDebounceInformation,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@ILanguageConfigurationService private readonly languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this.textModel.onDidChangeContent(() => {\n\t\t\tthis._updateOperation.clear();\n\t\t}));\n\t}\n\n\tpublic fetch(position: Position, context: InlineCompletionContext, activeInlineCompletion: InlineCompletionWithUpdatedRange | undefined): Promise<boolean> {\n\t\tconst request = new UpdateRequest(position, context, this.textModel.getVersionId());\n\n\t\tconst target = context.selectedSuggestionInfo ? this.suggestWidgetInlineCompletions : this.inlineCompletions;\n\n\t\tif (this._updateOperation.value?.request.satisfies(request)) {\n\t\t\treturn this._updateOperation.value.promise;\n\t\t} else if (target.get()?.request.satisfies(request)) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\tconst updateOngoing = !!this._updateOperation.value;\n\t\tthis._updateOperation.clear();\n\n\t\tconst source = new CancellationTokenSource();\n\n\t\tconst promise = (async () => {\n\t\t\tconst shouldDebounce = updateOngoing || context.triggerKind === InlineCompletionTriggerKind.Automatic;\n\t\t\tif (shouldDebounce) {\n\t\t\t\t// This debounces the operation\n\t\t\t\tawait wait(this._debounceValue.get(this.textModel), source.token);\n\t\t\t}\n\n\t\t\tif (source.token.isCancellationRequested || this.textModel.getVersionId() !== request.versionId) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst startTime = new Date();\n\t\t\tconst updatedCompletions = await provideInlineCompletions(\n\t\t\t\tthis.languageFeaturesService.inlineCompletionsProvider,\n\t\t\t\tposition,\n\t\t\t\tthis.textModel,\n\t\t\t\tcontext,\n\t\t\t\tsource.token,\n\t\t\t\tthis.languageConfigurationService\n\t\t\t);\n\n\t\t\tif (source.token.isCancellationRequested || this.textModel.getVersionId() !== request.versionId) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst endTime = new Date();\n\t\t\tthis._debounceValue.update(this.textModel, endTime.getTime() - startTime.getTime());\n\n\t\t\tconst completions = new UpToDateInlineCompletions(updatedCompletions, request, this.textModel, this.versionId);\n\t\t\tif (activeInlineCompletion) {\n\t\t\t\tconst asInlineCompletion = activeInlineCompletion.toInlineCompletion(undefined);\n\t\t\t\tif (activeInlineCompletion.canBeReused(this.textModel, position) && !updatedCompletions.has(asInlineCompletion)) {\n\t\t\t\t\tcompletions.prepend(activeInlineCompletion.inlineCompletion, asInlineCompletion.range, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._updateOperation.clear();\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description Update completions with provider result */\n\t\t\t\ttarget.set(completions, tx);\n\t\t\t});\n\n\t\t\treturn true;\n\t\t})();\n\n\t\tconst updateOperation = new UpdateOperation(request, source, promise);\n\t\tthis._updateOperation.value = updateOperation;\n\n\t\treturn promise;\n\t}\n\n\tpublic clear(tx: ITransaction): void {\n\t\tthis._updateOperation.clear();\n\t\tthis.inlineCompletions.set(undefined, tx);\n\t\tthis.suggestWidgetInlineCompletions.set(undefined, tx);\n\t}\n\n\tpublic clearSuggestWidgetInlineCompletions(tx: ITransaction): void {\n\t\tif (this._updateOperation.value?.request.context.selectedSuggestionInfo) {\n\t\t\tthis._updateOperation.clear();\n\t\t}\n\t\tthis.suggestWidgetInlineCompletions.set(undefined, tx);\n\t}\n\n\tpublic cancelUpdate(): void {\n\t\tthis._updateOperation.clear();\n\t}\n}\n\nfunction wait(ms: number, cancellationToken?: CancellationToken): Promise<void> {\n\treturn new Promise(resolve => {\n\t\tlet d: IDisposable | undefined = undefined;\n\t\tconst handle = setTimeout(() => {\n\t\t\tif (d) { d.dispose(); }\n\t\t\tresolve();\n\t\t}, ms);\n\t\tif (cancellationToken) {\n\t\t\td = cancellationToken.onCancellationRequested(() => {\n\t\t\t\tclearTimeout(handle);\n\t\t\t\tif (d) { d.dispose(); }\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}\n\t});\n}\n\nclass UpdateRequest {\n\tconstructor(\n\t\tpublic readonly position: Position,\n\t\tpublic readonly context: InlineCompletionContext,\n\t\tpublic readonly versionId: number,\n\t) {\n\t}\n\n\tpublic satisfies(other: UpdateRequest): boolean {\n\t\treturn this.position.equals(other.position)\n\t\t\t&& equals(this.context.selectedSuggestionInfo, other.context.selectedSuggestionInfo, (v1, v2) => v1.equals(v2))\n\t\t\t&& (other.context.triggerKind === InlineCompletionTriggerKind.Automatic\n\t\t\t\t|| this.context.triggerKind === InlineCompletionTriggerKind.Explicit)\n\t\t\t&& this.versionId === other.versionId;\n\t}\n}\n\nfunction equals<T>(v1: T | undefined, v2: T | undefined, equals: (v1: T, v2: T) => boolean): boolean {\n\tif (!v1 || !v2) {\n\t\treturn v1 === v2;\n\t}\n\treturn equals(v1, v2);\n}\n\nclass UpdateOperation implements IDisposable {\n\tconstructor(\n\t\tpublic readonly request: UpdateRequest,\n\t\tpublic readonly cancellationTokenSource: CancellationTokenSource,\n\t\tpublic readonly promise: Promise<boolean>,\n\t) {\n\t}\n\n\tdispose() {\n\t\tthis.cancellationTokenSource.cancel();\n\t}\n}\n\nexport class UpToDateInlineCompletions implements IDisposable {\n\tprivate readonly _inlineCompletions: InlineCompletionWithUpdatedRange[];\n\tpublic get inlineCompletions(): ReadonlyArray<InlineCompletionWithUpdatedRange> { return this._inlineCompletions; }\n\n\tprivate _refCount = 1;\n\tprivate readonly _prependedInlineCompletionItems: InlineCompletionItem[] = [];\n\n\tprivate _rangeVersionIdValue = 0;\n\tprivate readonly _rangeVersionId = derived(this, reader => {\n\t\tthis.versionId.read(reader);\n\t\tlet changed = false;\n\t\tfor (const i of this._inlineCompletions) {\n\t\t\tchanged = changed || i._updateRange(this.textModel);\n\t\t}\n\t\tif (changed) {\n\t\t\tthis._rangeVersionIdValue++;\n\t\t}\n\t\treturn this._rangeVersionIdValue;\n\t});\n\n\tconstructor(\n\t\tprivate readonly inlineCompletionProviderResult: InlineCompletionProviderResult,\n\t\tpublic readonly request: UpdateRequest,\n\t\tprivate readonly textModel: ITextModel,\n\t\tprivate readonly versionId: IObservable<number>,\n\t) {\n\t\tconst ids = textModel.deltaDecorations([], inlineCompletionProviderResult.completions.map(i => ({\n\t\t\trange: i.range,\n\t\t\toptions: {\n\t\t\t\tdescription: 'inline-completion-tracking-range'\n\t\t\t},\n\t\t})));\n\n\t\tthis._inlineCompletions = inlineCompletionProviderResult.completions.map(\n\t\t\t(i, index) => new InlineCompletionWithUpdatedRange(i, ids[index], this._rangeVersionId)\n\t\t);\n\t}\n\n\tpublic clone(): this {\n\t\tthis._refCount++;\n\t\treturn this;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._refCount--;\n\t\tif (this._refCount === 0) {\n\t\t\tsetTimeout(() => {\n\t\t\t\t// To fix https://github.com/microsoft/vscode/issues/188348\n\t\t\t\tif (!this.textModel.isDisposed()) {\n\t\t\t\t\t// This is just cleanup. It's ok if it happens with a delay.\n\t\t\t\t\tthis.textModel.deltaDecorations(this._inlineCompletions.map(i => i.decorationId), []);\n\t\t\t\t}\n\t\t\t}, 0);\n\t\t\tthis.inlineCompletionProviderResult.dispose();\n\t\t\tfor (const i of this._prependedInlineCompletionItems) {\n\t\t\t\ti.source.removeRef();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic prepend(inlineCompletion: InlineCompletionItem, range: Range, addRefToSource: boolean): void {\n\t\tif (addRefToSource) {\n\t\t\tinlineCompletion.source.addRef();\n\t\t}\n\n\t\tconst id = this.textModel.deltaDecorations([], [{\n\t\t\trange,\n\t\t\toptions: {\n\t\t\t\tdescription: 'inline-completion-tracking-range'\n\t\t\t},\n\t\t}])[0];\n\t\tthis._inlineCompletions.unshift(new InlineCompletionWithUpdatedRange(inlineCompletion, id, this._rangeVersionId, range));\n\t\tthis._prependedInlineCompletionItems.push(inlineCompletion);\n\t}\n}\n\nexport class InlineCompletionWithUpdatedRange {\n\tpublic readonly semanticId = JSON.stringify([\n\t\tthis.inlineCompletion.filterText,\n\t\tthis.inlineCompletion.insertText,\n\t\tthis.inlineCompletion.range.getStartPosition().toString()\n\t]);\n\tprivate _updatedRange: Range;\n\tprivate _isValid = true;\n\n\tpublic get forwardStable() {\n\t\treturn this.inlineCompletion.source.inlineCompletions.enableForwardStability ?? false;\n\t}\n\n\tconstructor(\n\t\tpublic readonly inlineCompletion: InlineCompletionItem,\n\t\tpublic readonly decorationId: string,\n\t\tprivate readonly rangeVersion: IObservable<number>,\n\t\tinitialRange?: Range,\n\t) {\n\t\tthis._updatedRange = initialRange ?? inlineCompletion.range;\n\t}\n\n\tpublic toInlineCompletion(reader: IReader | undefined): InlineCompletionItem {\n\t\treturn this.inlineCompletion.withRange(this._getUpdatedRange(reader));\n\t}\n\n\tpublic toSingleTextEdit(reader: IReader | undefined): SingleTextEdit {\n\t\treturn new SingleTextEdit(this._getUpdatedRange(reader), this.inlineCompletion.insertText);\n\t}\n\n\tpublic isVisible(model: ITextModel, cursorPosition: Position, reader: IReader | undefined): boolean {\n\t\tconst minimizedReplacement = this._toFilterTextReplacement(reader).removeCommonPrefix(model);\n\n\t\tif (\n\t\t\t!this._isValid\n\t\t\t|| !this.inlineCompletion.range.getStartPosition().equals(this._getUpdatedRange(reader).getStartPosition())\n\t\t\t|| cursorPosition.lineNumber !== minimizedReplacement.range.startLineNumber\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// We might consider comparing by .toLowerText, but this requires GhostTextReplacement\n\t\tconst originalValue = model.getValueInRange(minimizedReplacement.range, EndOfLinePreference.LF);\n\t\tconst filterText = minimizedReplacement.text;\n\n\t\tconst cursorPosIndex = Math.max(0, cursorPosition.column - minimizedReplacement.range.startColumn);\n\n\t\tlet filterTextBefore = filterText.substring(0, cursorPosIndex);\n\t\tlet filterTextAfter = filterText.substring(cursorPosIndex);\n\n\t\tlet originalValueBefore = originalValue.substring(0, cursorPosIndex);\n\t\tlet originalValueAfter = originalValue.substring(cursorPosIndex);\n\n\t\tconst originalValueIndent = model.getLineIndentColumn(minimizedReplacement.range.startLineNumber);\n\t\tif (minimizedReplacement.range.startColumn <= originalValueIndent) {\n\t\t\t// Remove indentation\n\t\t\toriginalValueBefore = originalValueBefore.trimStart();\n\t\t\tif (originalValueBefore.length === 0) {\n\t\t\t\toriginalValueAfter = originalValueAfter.trimStart();\n\t\t\t}\n\t\t\tfilterTextBefore = filterTextBefore.trimStart();\n\t\t\tif (filterTextBefore.length === 0) {\n\t\t\t\tfilterTextAfter = filterTextAfter.trimStart();\n\t\t\t}\n\t\t}\n\n\t\treturn filterTextBefore.startsWith(originalValueBefore)\n\t\t\t&& !!matchesSubString(originalValueAfter, filterTextAfter);\n\t}\n\n\tpublic canBeReused(model: ITextModel, position: Position): boolean {\n\t\tconst result = this._isValid\n\t\t\t&& this._getUpdatedRange(undefined).containsPosition(position)\n\t\t\t&& this.isVisible(model, position, undefined)\n\t\t\t&& !this._isSmallerThanOriginal(undefined);\n\t\treturn result;\n\t}\n\n\tprivate _toFilterTextReplacement(reader: IReader | undefined): SingleTextEdit {\n\t\treturn new SingleTextEdit(this._getUpdatedRange(reader), this.inlineCompletion.filterText);\n\t}\n\n\tprivate _isSmallerThanOriginal(reader: IReader | undefined): boolean {\n\t\treturn length(this._getUpdatedRange(reader)).isBefore(length(this.inlineCompletion.range));\n\t}\n\n\tprivate _getUpdatedRange(reader: IReader | undefined): Range {\n\t\tthis.rangeVersion.read(reader); // This makes sure all the ranges are updated.\n\t\treturn this._updatedRange;\n\t}\n\n\tpublic _updateRange(textModel: ITextModel): boolean {\n\t\tconst range = textModel.getDecorationRange(this.decorationId);\n\t\tif (!range) {\n\t\t\t// A setValue call might flush all decorations.\n\t\t\tthis._isValid = false;\n\t\t\treturn true;\n\t\t}\n\t\tif (!this._updatedRange.equalsRange(range)) {\n\t\t\tthis._updatedRange = range;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nfunction length(range: Range): Position {\n\tif (range.startLineNumber === range.endLineNumber) {\n\t\treturn new Position(1, 1 + range.endColumn - range.startColumn);\n\t} else {\n\t\treturn new Position(1 + range.endLineNumber - range.startLineNumber, range.endColumn);\n\t}\n}\n"]}