"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToggleAlwaysShowInlineSuggestionToolbar = exports.HideInlineCompletion = exports.AcceptInlineCompletion = exports.AcceptNextLineOfInlineCompletion = exports.AcceptNextWordOfInlineCompletion = exports.TriggerInlineSuggestionAction = exports.ShowPreviousInlineSuggestionAction = exports.ShowNextInlineSuggestionAction = void 0;
const observable_1 = require("../../../../base/common/observable");
const base_1 = require("../../../../base/common/observableInternal/base");
const editorExtensions_1 = require("../../../browser/editorExtensions");
const editorContextKeys_1 = require("../../../common/editorContextKeys");
const commandIds_1 = require("./commandIds");
const inlineCompletionContextKeys_1 = require("./inlineCompletionContextKeys");
const inlineCompletionsController_1 = require("./inlineCompletionsController");
const suggest_1 = require("../../suggest/browser/suggest");
const nls = require("../../../../nls");
const actions_1 = require("../../../../platform/actions/common/actions");
const configuration_1 = require("../../../../platform/configuration/common/configuration");
const contextkey_1 = require("../../../../platform/contextkey/common/contextkey");
class ShowNextInlineSuggestionAction extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: ShowNextInlineSuggestionAction.ID,
            label: nls.localize("vs/editor/contrib/inlineCompletions/browser/commands",0, "Show Next Inline Suggestion"),
            alias: 'Show Next Inline Suggestion',
            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, inlineCompletionContextKeys_1.InlineCompletionContextKeys.inlineSuggestionVisible),
            kbOpts: {
                weight: 100,
                primary: 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */,
            },
        });
    }
    async run(accessor, editor) {
        var _a;
        const controller = inlineCompletionsController_1.InlineCompletionsController.get(editor);
        (_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.next();
    }
}
exports.ShowNextInlineSuggestionAction = ShowNextInlineSuggestionAction;
ShowNextInlineSuggestionAction.ID = commandIds_1.showNextInlineSuggestionActionId;
class ShowPreviousInlineSuggestionAction extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: ShowPreviousInlineSuggestionAction.ID,
            label: nls.localize("vs/editor/contrib/inlineCompletions/browser/commands",1, "Show Previous Inline Suggestion"),
            alias: 'Show Previous Inline Suggestion',
            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, inlineCompletionContextKeys_1.InlineCompletionContextKeys.inlineSuggestionVisible),
            kbOpts: {
                weight: 100,
                primary: 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */,
            },
        });
    }
    async run(accessor, editor) {
        var _a;
        const controller = inlineCompletionsController_1.InlineCompletionsController.get(editor);
        (_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.previous();
    }
}
exports.ShowPreviousInlineSuggestionAction = ShowPreviousInlineSuggestionAction;
ShowPreviousInlineSuggestionAction.ID = commandIds_1.showPreviousInlineSuggestionActionId;
class TriggerInlineSuggestionAction extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.inlineSuggest.trigger',
            label: nls.localize("vs/editor/contrib/inlineCompletions/browser/commands",2, "Trigger Inline Suggestion"),
            alias: 'Trigger Inline Suggestion',
            precondition: editorContextKeys_1.EditorContextKeys.writable
        });
    }
    async run(accessor, editor) {
        const controller = inlineCompletionsController_1.InlineCompletionsController.get(editor);
        await (0, base_1.asyncTransaction)(async (tx) => {
            var _a;
            /** @description triggerExplicitly from command */
            await ((_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.triggerExplicitly(tx));
            controller === null || controller === void 0 ? void 0 : controller.playAccessibilitySignal(tx);
        });
    }
}
exports.TriggerInlineSuggestionAction = TriggerInlineSuggestionAction;
class AcceptNextWordOfInlineCompletion extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.inlineSuggest.acceptNextWord',
            label: nls.localize("vs/editor/contrib/inlineCompletions/browser/commands",3, "Accept Next Word Of Inline Suggestion"),
            alias: 'Accept Next Word Of Inline Suggestion',
            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, inlineCompletionContextKeys_1.InlineCompletionContextKeys.inlineSuggestionVisible),
            kbOpts: {
                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,
                primary: 2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */,
                kbExpr: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, inlineCompletionContextKeys_1.InlineCompletionContextKeys.inlineSuggestionVisible),
            },
            menuOpts: [{
                    menuId: actions_1.MenuId.InlineSuggestionToolbar,
                    title: nls.localize("vs/editor/contrib/inlineCompletions/browser/commands",4, 'Accept Word'),
                    group: 'primary',
                    order: 2,
                }],
        });
    }
    async run(accessor, editor) {
        var _a;
        const controller = inlineCompletionsController_1.InlineCompletionsController.get(editor);
        await ((_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.acceptNextWord(controller.editor));
    }
}
exports.AcceptNextWordOfInlineCompletion = AcceptNextWordOfInlineCompletion;
class AcceptNextLineOfInlineCompletion extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: 'editor.action.inlineSuggest.acceptNextLine',
            label: nls.localize("vs/editor/contrib/inlineCompletions/browser/commands",5, "Accept Next Line Of Inline Suggestion"),
            alias: 'Accept Next Line Of Inline Suggestion',
            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, inlineCompletionContextKeys_1.InlineCompletionContextKeys.inlineSuggestionVisible),
            kbOpts: {
                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,
            },
            menuOpts: [{
                    menuId: actions_1.MenuId.InlineSuggestionToolbar,
                    title: nls.localize("vs/editor/contrib/inlineCompletions/browser/commands",6, 'Accept Line'),
                    group: 'secondary',
                    order: 2,
                }],
        });
    }
    async run(accessor, editor) {
        var _a;
        const controller = inlineCompletionsController_1.InlineCompletionsController.get(editor);
        await ((_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.acceptNextLine(controller.editor));
    }
}
exports.AcceptNextLineOfInlineCompletion = AcceptNextLineOfInlineCompletion;
class AcceptInlineCompletion extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: commandIds_1.inlineSuggestCommitId,
            label: nls.localize("vs/editor/contrib/inlineCompletions/browser/commands",7, "Accept Inline Suggestion"),
            alias: 'Accept Inline Suggestion',
            precondition: inlineCompletionContextKeys_1.InlineCompletionContextKeys.inlineSuggestionVisible,
            menuOpts: [{
                    menuId: actions_1.MenuId.InlineSuggestionToolbar,
                    title: nls.localize("vs/editor/contrib/inlineCompletions/browser/commands",8, "Accept"),
                    group: 'primary',
                    order: 1,
                }],
            kbOpts: {
                primary: 2 /* KeyCode.Tab */,
                weight: 200,
                kbExpr: contextkey_1.ContextKeyExpr.and(inlineCompletionContextKeys_1.InlineCompletionContextKeys.inlineSuggestionVisible, editorContextKeys_1.EditorContextKeys.tabMovesFocus.toNegated(), inlineCompletionContextKeys_1.InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize, suggest_1.Context.Visible.toNegated(), editorContextKeys_1.EditorContextKeys.hoverFocused.toNegated()),
            }
        });
    }
    async run(accessor, editor) {
        var _a;
        const controller = inlineCompletionsController_1.InlineCompletionsController.get(editor);
        if (controller) {
            (_a = controller.model.get()) === null || _a === void 0 ? void 0 : _a.accept(controller.editor);
            controller.editor.focus();
        }
    }
}
exports.AcceptInlineCompletion = AcceptInlineCompletion;
class HideInlineCompletion extends editorExtensions_1.EditorAction {
    constructor() {
        super({
            id: HideInlineCompletion.ID,
            label: nls.localize("vs/editor/contrib/inlineCompletions/browser/commands",9, "Hide Inline Suggestion"),
            alias: 'Hide Inline Suggestion',
            precondition: inlineCompletionContextKeys_1.InlineCompletionContextKeys.inlineSuggestionVisible,
            kbOpts: {
                weight: 100,
                primary: 9 /* KeyCode.Escape */,
            }
        });
    }
    async run(accessor, editor) {
        const controller = inlineCompletionsController_1.InlineCompletionsController.get(editor);
        (0, observable_1.transaction)(tx => {
            var _a;
            (_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.stop(tx);
        });
    }
}
exports.HideInlineCompletion = HideInlineCompletion;
HideInlineCompletion.ID = 'editor.action.inlineSuggest.hide';
class ToggleAlwaysShowInlineSuggestionToolbar extends actions_1.Action2 {
    constructor() {
        super({
            id: ToggleAlwaysShowInlineSuggestionToolbar.ID,
            title: nls.localize("vs/editor/contrib/inlineCompletions/browser/commands",10, "Always Show Toolbar"),
            f1: false,
            precondition: undefined,
            menu: [{
                    id: actions_1.MenuId.InlineSuggestionToolbar,
                    group: 'secondary',
                    order: 10,
                }],
            toggled: contextkey_1.ContextKeyExpr.equals('config.editor.inlineSuggest.showToolbar', 'always')
        });
    }
    async run(accessor, editor) {
        const configService = accessor.get(configuration_1.IConfigurationService);
        const currentValue = configService.getValue('editor.inlineSuggest.showToolbar');
        const newValue = currentValue === 'always' ? 'onHover' : 'always';
        configService.updateValue('editor.inlineSuggest.showToolbar', newValue);
    }
}
exports.ToggleAlwaysShowInlineSuggestionToolbar = ToggleAlwaysShowInlineSuggestionToolbar;
ToggleAlwaysShowInlineSuggestionToolbar.ID = 'editor.action.inlineSuggest.toggleAlwaysShowToolbar';
//# sourceMappingURL=commands.js.map