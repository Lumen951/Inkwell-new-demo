{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/quickAccess/browser/commandsQuickAccess.ts","vs/editor/contrib/quickAccess/browser/commandsQuickAccess.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,mEAAgE;AAMhE,qGAAkK;AAGlK,MAAsB,yCAA0C,SAAQ,yDAAmC;IAE1G,YACC,OAAoC,EACpC,oBAA2C,EAC3C,iBAAqC,EACrC,cAA+B,EAC/B,gBAAmC,EACnC,aAA6B;QAE7B,KAAK,CAAC,OAAO,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,cAAc,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;IAC1G,CAAC;IAOS,yBAAyB;QAClC,MAAM,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAC7D,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC9B,OAAO,EAAE,CAAC;QACX,CAAC;QAED,MAAM,kBAAkB,GAAwB,EAAE,CAAC;QACnD,KAAK,MAAM,YAAY,IAAI,uBAAuB,CAAC,mBAAmB,EAAE,EAAE,CAAC;YAC1E,kBAAkB,CAAC,IAAI,CAAC;gBACvB,SAAS,EAAE,YAAY,CAAC,EAAE;gBAC1B,YAAY,EAAE,YAAY,CAAC,KAAK;gBAChC,KAAK,EAAE,IAAA,uBAAU,EAAC,YAAY,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,EAAE;aACxD,CAAC,CAAC;QACJ,CAAC;QAED,OAAO,kBAAkB,CAAC;IAC3B,CAAC;CACD;AAnCD,8FAmCC","file":"commandsQuickAccess.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { stripIcons } from '../../../../base/common/iconLabels';\nimport { IEditor } from '../../../common/editorCommon';\nimport { ICommandService } from '../../../../platform/commands/common/commands';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';\nimport { AbstractCommandsQuickAccessProvider, ICommandQuickPick, ICommandsQuickAccessOptions } from '../../../../platform/quickinput/browser/commandsQuickAccess';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry';\n\nexport abstract class AbstractEditorCommandsQuickAccessProvider extends AbstractCommandsQuickAccessProvider {\n\n\tconstructor(\n\t\toptions: ICommandsQuickAccessOptions,\n\t\tinstantiationService: IInstantiationService,\n\t\tkeybindingService: IKeybindingService,\n\t\tcommandService: ICommandService,\n\t\ttelemetryService: ITelemetryService,\n\t\tdialogService: IDialogService\n\t) {\n\t\tsuper(options, instantiationService, keybindingService, commandService, telemetryService, dialogService);\n\t}\n\n\t/**\n\t * Subclasses to provide the current active editor control.\n\t */\n\tprotected abstract activeTextEditorControl: IEditor | undefined;\n\n\tprotected getCodeEditorCommandPicks(): ICommandQuickPick[] {\n\t\tconst activeTextEditorControl = this.activeTextEditorControl;\n\t\tif (!activeTextEditorControl) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst editorCommandPicks: ICommandQuickPick[] = [];\n\t\tfor (const editorAction of activeTextEditorControl.getSupportedActions()) {\n\t\t\teditorCommandPicks.push({\n\t\t\t\tcommandId: editorAction.id,\n\t\t\t\tcommandAlias: editorAction.alias,\n\t\t\t\tlabel: stripIcons(editorAction.label) || editorAction.id,\n\t\t\t});\n\t\t}\n\n\t\treturn editorCommandPicks;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { stripIcons } from '../../../../base/common/iconLabels';\nimport { IEditor } from '../../../common/editorCommon';\nimport { ICommandService } from '../../../../platform/commands/common/commands';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';\nimport { AbstractCommandsQuickAccessProvider, ICommandQuickPick, ICommandsQuickAccessOptions } from '../../../../platform/quickinput/browser/commandsQuickAccess';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry';\n\nexport abstract class AbstractEditorCommandsQuickAccessProvider extends AbstractCommandsQuickAccessProvider {\n\n\tconstructor(\n\t\toptions: ICommandsQuickAccessOptions,\n\t\tinstantiationService: IInstantiationService,\n\t\tkeybindingService: IKeybindingService,\n\t\tcommandService: ICommandService,\n\t\ttelemetryService: ITelemetryService,\n\t\tdialogService: IDialogService\n\t) {\n\t\tsuper(options, instantiationService, keybindingService, commandService, telemetryService, dialogService);\n\t}\n\n\t/**\n\t * Subclasses to provide the current active editor control.\n\t */\n\tprotected abstract activeTextEditorControl: IEditor | undefined;\n\n\tprotected getCodeEditorCommandPicks(): ICommandQuickPick[] {\n\t\tconst activeTextEditorControl = this.activeTextEditorControl;\n\t\tif (!activeTextEditorControl) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst editorCommandPicks: ICommandQuickPick[] = [];\n\t\tfor (const editorAction of activeTextEditorControl.getSupportedActions()) {\n\t\t\teditorCommandPicks.push({\n\t\t\t\tcommandId: editorAction.id,\n\t\t\t\tcommandAlias: editorAction.alias,\n\t\t\t\tlabel: stripIcons(editorAction.label) || editorAction.id,\n\t\t\t});\n\t\t}\n\n\t\treturn editorCommandPicks;\n\t}\n}\n"]}