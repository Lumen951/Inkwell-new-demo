{"version":3,"sources":["vs/editor/contrib/comment/browser/comment.ts"],"names":[],"mappings":"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","file":"comment.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyChord, KeyCode, KeyMod } from '../../../../base/common/keyCodes';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { EditorAction, IActionOptions, registerEditorAction, ServicesAccessor } from '../../../browser/editorExtensions';\nimport { EditorOption } from '../../../common/config/editorOptions';\nimport { Range } from '../../../common/core/range';\nimport { ICommand } from '../../../common/editorCommon';\nimport { EditorContextKeys } from '../../../common/editorContextKeys';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry';\nimport { BlockCommentCommand } from './blockCommentCommand';\nimport { LineCommentCommand, Type } from './lineCommentCommand';\nimport * as nls from '../../../../nls';\nimport { MenuId } from '../../../../platform/actions/common/actions';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry';\n\nabstract class CommentLineAction extends EditorAction {\n\n\tprivate readonly _type: Type;\n\n\tconstructor(type: Type, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis._type = type;\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst languageConfigurationService = accessor.get(ILanguageConfigurationService);\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tconst commands: ICommand[] = [];\n\t\tconst modelOptions = model.getOptions();\n\t\tconst commentsOptions = editor.getOption(EditorOption.comments);\n\n\t\tconst selections = editor.getSelections().map((selection, index) => ({ selection, index, ignoreFirstLine: false }));\n\t\tselections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n\n\t\t// Remove selections that would result in copying the same line\n\t\tlet prev = selections[0];\n\t\tfor (let i = 1; i < selections.length; i++) {\n\t\t\tconst curr = selections[i];\n\t\t\tif (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n\t\t\t\t// these two selections would copy the same line\n\t\t\t\tif (prev.index < curr.index) {\n\t\t\t\t\t// prev wins\n\t\t\t\t\tcurr.ignoreFirstLine = true;\n\t\t\t\t} else {\n\t\t\t\t\t// curr wins\n\t\t\t\t\tprev.ignoreFirstLine = true;\n\t\t\t\t\tprev = curr;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(new LineCommentCommand(\n\t\t\t\tlanguageConfigurationService,\n\t\t\t\tselection.selection,\n\t\t\t\tmodelOptions.tabSize,\n\t\t\t\tthis._type,\n\t\t\t\tcommentsOptions.insertSpace,\n\t\t\t\tcommentsOptions.ignoreEmptyLines,\n\t\t\t\tselection.ignoreFirstLine\n\t\t\t));\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n\n}\n\nclass ToggleCommentLineAction extends CommentLineAction {\n\tconstructor() {\n\t\tsuper(Type.Toggle, {\n\t\t\tid: 'editor.action.commentLine',\n\t\t\tlabel: nls.localize('comment.line', \"Toggle Line Comment\"),\n\t\t\talias: 'Toggle Line Comment',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Slash,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: '5_insert',\n\t\t\t\ttitle: nls.localize({ key: 'miToggleLineComment', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Line Comment\"),\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass AddLineCommentAction extends CommentLineAction {\n\tconstructor() {\n\t\tsuper(Type.ForceAdd, {\n\t\t\tid: 'editor.action.addCommentLine',\n\t\t\tlabel: nls.localize('comment.line.add', \"Add Line Comment\"),\n\t\t\talias: 'Add Line Comment',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyC),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass RemoveLineCommentAction extends CommentLineAction {\n\tconstructor() {\n\t\tsuper(Type.ForceRemove, {\n\t\t\tid: 'editor.action.removeCommentLine',\n\t\t\tlabel: nls.localize('comment.line.remove', \"Remove Line Comment\"),\n\t\t\talias: 'Remove Line Comment',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.KeyU),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass BlockCommentAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.blockComment',\n\t\t\tlabel: nls.localize('comment.block', \"Toggle Block Comment\"),\n\t\t\talias: 'Toggle Block Comment',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KeyA,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: '5_insert',\n\t\t\t\ttitle: nls.localize({ key: 'miToggleBlockComment', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Block Comment\"),\n\t\t\t\torder: 2\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst languageConfigurationService = accessor.get(ILanguageConfigurationService);\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commentsOptions = editor.getOption(EditorOption.comments);\n\t\tconst commands: ICommand[] = [];\n\t\tconst selections = editor.getSelections();\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(new BlockCommentCommand(selection, commentsOptions.insertSpace, languageConfigurationService));\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nregisterEditorAction(ToggleCommentLineAction);\nregisterEditorAction(AddLineCommentAction);\nregisterEditorAction(RemoveLineCommentAction);\nregisterEditorAction(BlockCommentAction);\n"]}