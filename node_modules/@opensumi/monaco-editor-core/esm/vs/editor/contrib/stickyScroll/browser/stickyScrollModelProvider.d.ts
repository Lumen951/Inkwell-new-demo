import { Disposable } from '../../../../base/common/lifecycle';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { ILanguageFeaturesService } from '../../../common/services/languageFeatures';
import { CancellationToken } from '../../../../base/common/cancellation';
import { ITextModel } from '../../../common/model';
import { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry';
import { StickyModel } from './stickyScrollElement';
export interface IStickyModelProvider {
    /**
     * Method which updates the sticky model
     * @param textModel text-model of the editor
     * @param textModelVersionId text-model version ID
     * @param token cancellation token
     * @returns the sticky model
     */
    update(textModel: ITextModel, textModelVersionId: number, token: CancellationToken): Promise<StickyModel | null>;
}
export declare class StickyModelProvider extends Disposable implements IStickyModelProvider {
    private readonly _editor;
    readonly _languageConfigurationService: ILanguageConfigurationService;
    readonly _languageFeaturesService: ILanguageFeaturesService;
    private _modelProviders;
    private _modelPromise;
    private _updateScheduler;
    private readonly _updateOperation;
    constructor(_editor: ICodeEditor, _languageConfigurationService: ILanguageConfigurationService, _languageFeaturesService: ILanguageFeaturesService, defaultModel: string);
    private _cancelModelPromise;
    update(textModel: ITextModel, textModelVersionId: number, token: CancellationToken): Promise<StickyModel | null>;
}
