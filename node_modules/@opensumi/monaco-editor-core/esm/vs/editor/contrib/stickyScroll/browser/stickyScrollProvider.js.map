{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/contrib/stickyScroll/browser/stickyScrollProvider.ts","vs/editor/contrib/stickyScroll/browser/stickyScrollProvider.ts"],"names":[],"mappings":"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","file":"stickyScrollProvider.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { CancellationToken, CancellationTokenSource, } from '../../../../base/common/cancellation';\nimport { EditorOption, IEditorStickyScrollOptions } from '../../../common/config/editorOptions';\nimport { RunOnceScheduler } from '../../../../base/common/async';\nimport { Range } from '../../../common/core/range';\nimport { binarySearch } from '../../../../base/common/arrays';\nimport { Event, Emitter } from '../../../../base/common/event';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry';\nimport { StickyModelProvider, IStickyModelProvider } from './stickyScrollModelProvider';\nimport { StickyElement, StickyModel, StickyRange } from './stickyScrollElement';\n\nexport class StickyLineCandidate {\n\tconstructor(\n\t\tpublic readonly startLineNumber: number,\n\t\tpublic readonly endLineNumber: number,\n\t\tpublic readonly nestingDepth: number,\n\t) { }\n}\n\nexport interface IStickyLineCandidateProvider {\n\n\tdispose(): void;\n\tgetVersionId(): number | undefined;\n\tupdate(): Promise<void>;\n\tgetCandidateStickyLinesIntersecting(range: StickyRange): StickyLineCandidate[];\n\tonDidChangeStickyScroll: Event<void>;\n\n}\n\nexport class StickyLineCandidateProvider extends Disposable implements IStickyLineCandidateProvider {\n\n\tstatic readonly ID = 'store.contrib.stickyScrollController';\n\n\tprivate readonly _onDidChangeStickyScroll = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeStickyScroll = this._onDidChangeStickyScroll.event;\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate readonly _updateSoon: RunOnceScheduler;\n\tprivate readonly _sessionStore: DisposableStore;\n\n\tprivate _options: Readonly<Required<IEditorStickyScrollOptions>> | null = null;\n\tprivate _model: StickyModel | null = null;\n\tprivate _cts: CancellationTokenSource | null = null;\n\tprivate _stickyModelProvider: IStickyModelProvider | null = null;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis._editor = editor;\n\t\tthis._sessionStore = this._register(new DisposableStore());\n\t\tthis._updateSoon = this._register(new RunOnceScheduler(() => this.update(), 50));\n\n\t\tthis._register(this._editor.onDidChangeConfiguration(e => {\n\t\t\tif (e.hasChanged(EditorOption.stickyScroll)) {\n\t\t\t\tthis.readConfiguration();\n\t\t\t}\n\t\t}));\n\t\tthis.readConfiguration();\n\t}\n\n\tprivate readConfiguration() {\n\n\t\tthis._stickyModelProvider = null;\n\t\tthis._sessionStore.clear();\n\n\t\tthis._options = this._editor.getOption(EditorOption.stickyScroll);\n\t\tif (!this._options.enabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._stickyModelProvider = this._sessionStore.add(new StickyModelProvider(\n\t\t\tthis._editor,\n\t\t\tthis._languageConfigurationService,\n\t\t\tthis._languageFeaturesService,\n\t\t\tthis._options.defaultModel\n\t\t));\n\n\t\tthis._sessionStore.add(this._editor.onDidChangeModel(() => {\n\t\t\t// We should not show an old model for a different file, it will always be wrong.\n\t\t\t// So we clear the model here immediately and then trigger an update.\n\t\t\tthis._model = null;\n\t\t\tthis._onDidChangeStickyScroll.fire();\n\n\t\t\tthis.update();\n\t\t}));\n\t\tthis._sessionStore.add(this._editor.onDidChangeHiddenAreas(() => this.update()));\n\t\tthis._sessionStore.add(this._editor.onDidChangeModelContent(() => this._updateSoon.schedule()));\n\t\tthis._sessionStore.add(this._languageFeaturesService.documentSymbolProvider.onDidChange(() => this.update()));\n\t\tthis.update();\n\t}\n\n\tpublic getVersionId(): number | undefined {\n\t\treturn this._model?.version;\n\t}\n\n\tpublic async update(): Promise<void> {\n\t\tthis._cts?.dispose(true);\n\t\tthis._cts = new CancellationTokenSource();\n\t\tawait this.updateStickyModel(this._cts.token);\n\t\tthis._onDidChangeStickyScroll.fire();\n\t}\n\n\tprivate async updateStickyModel(token: CancellationToken): Promise<void> {\n\n\t\tif (!this._editor.hasModel() || !this._stickyModelProvider || this._editor.getModel().isTooLargeForTokenization()) {\n\t\t\tthis._model = null;\n\t\t\treturn;\n\t\t}\n\n\t\tconst textModel = this._editor.getModel();\n\t\tconst modelVersionId = textModel.getVersionId();\n\n\t\tconst model = await this._stickyModelProvider.update(textModel, modelVersionId, token);\n\t\tif (token.isCancellationRequested) {\n\t\t\t// the computation was canceled, so do not overwrite the model\n\t\t\treturn;\n\t\t}\n\n\t\tthis._model = model;\n\t}\n\n\tprivate updateIndex(index: number) {\n\t\tif (index === -1) {\n\t\t\tindex = 0;\n\t\t} else if (index < 0) {\n\t\t\tindex = -index - 2;\n\t\t}\n\t\treturn index;\n\t}\n\n\tpublic getCandidateStickyLinesIntersectingFromStickyModel(\n\t\trange: StickyRange,\n\t\toutlineModel: StickyElement,\n\t\tresult: StickyLineCandidate[],\n\t\tdepth: number,\n\t\tlastStartLineNumber: number\n\t): void {\n\t\tif (outlineModel.children.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tlet lastLine = lastStartLineNumber;\n\t\tconst childrenStartLines: number[] = [];\n\n\t\tfor (let i = 0; i < outlineModel.children.length; i++) {\n\t\t\tconst child = outlineModel.children[i];\n\t\t\tif (child.range) {\n\t\t\t\tchildrenStartLines.push(child.range.startLineNumber);\n\t\t\t}\n\t\t}\n\t\tconst lowerBound = this.updateIndex(binarySearch(childrenStartLines, range.startLineNumber, (a: number, b: number) => { return a - b; }));\n\t\tconst upperBound = this.updateIndex(binarySearch(childrenStartLines, range.startLineNumber + depth, (a: number, b: number) => { return a - b; }));\n\n\t\tfor (let i = lowerBound; i <= upperBound; i++) {\n\t\t\tconst child = outlineModel.children[i];\n\t\t\tif (!child) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (child.range) {\n\t\t\t\tconst childStartLine = child.range.startLineNumber;\n\t\t\t\tconst childEndLine = child.range.endLineNumber;\n\t\t\t\tif (range.startLineNumber <= childEndLine + 1 && childStartLine - 1 <= range.endLineNumber && childStartLine !== lastLine) {\n\t\t\t\t\tlastLine = childStartLine;\n\t\t\t\t\tresult.push(new StickyLineCandidate(childStartLine, childEndLine - 1, depth + 1));\n\t\t\t\t\tthis.getCandidateStickyLinesIntersectingFromStickyModel(range, child, result, depth + 1, childStartLine);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.getCandidateStickyLinesIntersectingFromStickyModel(range, child, result, depth, lastStartLineNumber);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getCandidateStickyLinesIntersecting(range: StickyRange): StickyLineCandidate[] {\n\t\tif (!this._model?.element) {\n\t\t\treturn [];\n\t\t}\n\t\tlet stickyLineCandidates: StickyLineCandidate[] = [];\n\t\tthis.getCandidateStickyLinesIntersectingFromStickyModel(range, this._model.element, stickyLineCandidates, 0, -1);\n\t\tconst hiddenRanges: Range[] | undefined = this._editor._getViewModel()?.getHiddenAreas();\n\n\t\tif (hiddenRanges) {\n\t\t\tfor (const hiddenRange of hiddenRanges) {\n\t\t\t\tstickyLineCandidates = stickyLineCandidates.filter(stickyLine => !(stickyLine.startLineNumber >= hiddenRange.startLineNumber && stickyLine.endLineNumber <= hiddenRange.endLineNumber + 1));\n\t\t\t}\n\t\t}\n\t\treturn stickyLineCandidates;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle';\nimport { ICodeEditor } from '../../../browser/editorBrowser';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures';\nimport { CancellationToken, CancellationTokenSource, } from '../../../../base/common/cancellation';\nimport { EditorOption, IEditorStickyScrollOptions } from '../../../common/config/editorOptions';\nimport { RunOnceScheduler } from '../../../../base/common/async';\nimport { Range } from '../../../common/core/range';\nimport { binarySearch } from '../../../../base/common/arrays';\nimport { Event, Emitter } from '../../../../base/common/event';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry';\nimport { StickyModelProvider, IStickyModelProvider } from './stickyScrollModelProvider';\nimport { StickyElement, StickyModel, StickyRange } from './stickyScrollElement';\n\nexport class StickyLineCandidate {\n\tconstructor(\n\t\tpublic readonly startLineNumber: number,\n\t\tpublic readonly endLineNumber: number,\n\t\tpublic readonly nestingDepth: number,\n\t) { }\n}\n\nexport interface IStickyLineCandidateProvider {\n\n\tdispose(): void;\n\tgetVersionId(): number | undefined;\n\tupdate(): Promise<void>;\n\tgetCandidateStickyLinesIntersecting(range: StickyRange): StickyLineCandidate[];\n\tonDidChangeStickyScroll: Event<void>;\n\n}\n\nexport class StickyLineCandidateProvider extends Disposable implements IStickyLineCandidateProvider {\n\n\tstatic readonly ID = 'store.contrib.stickyScrollController';\n\n\tprivate readonly _onDidChangeStickyScroll = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeStickyScroll = this._onDidChangeStickyScroll.event;\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate readonly _updateSoon: RunOnceScheduler;\n\tprivate readonly _sessionStore: DisposableStore;\n\n\tprivate _options: Readonly<Required<IEditorStickyScrollOptions>> | null = null;\n\tprivate _model: StickyModel | null = null;\n\tprivate _cts: CancellationTokenSource | null = null;\n\tprivate _stickyModelProvider: IStickyModelProvider | null = null;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis._editor = editor;\n\t\tthis._sessionStore = this._register(new DisposableStore());\n\t\tthis._updateSoon = this._register(new RunOnceScheduler(() => this.update(), 50));\n\n\t\tthis._register(this._editor.onDidChangeConfiguration(e => {\n\t\t\tif (e.hasChanged(EditorOption.stickyScroll)) {\n\t\t\t\tthis.readConfiguration();\n\t\t\t}\n\t\t}));\n\t\tthis.readConfiguration();\n\t}\n\n\tprivate readConfiguration() {\n\n\t\tthis._stickyModelProvider = null;\n\t\tthis._sessionStore.clear();\n\n\t\tthis._options = this._editor.getOption(EditorOption.stickyScroll);\n\t\tif (!this._options.enabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._stickyModelProvider = this._sessionStore.add(new StickyModelProvider(\n\t\t\tthis._editor,\n\t\t\tthis._languageConfigurationService,\n\t\t\tthis._languageFeaturesService,\n\t\t\tthis._options.defaultModel\n\t\t));\n\n\t\tthis._sessionStore.add(this._editor.onDidChangeModel(() => {\n\t\t\t// We should not show an old model for a different file, it will always be wrong.\n\t\t\t// So we clear the model here immediately and then trigger an update.\n\t\t\tthis._model = null;\n\t\t\tthis._onDidChangeStickyScroll.fire();\n\n\t\t\tthis.update();\n\t\t}));\n\t\tthis._sessionStore.add(this._editor.onDidChangeHiddenAreas(() => this.update()));\n\t\tthis._sessionStore.add(this._editor.onDidChangeModelContent(() => this._updateSoon.schedule()));\n\t\tthis._sessionStore.add(this._languageFeaturesService.documentSymbolProvider.onDidChange(() => this.update()));\n\t\tthis.update();\n\t}\n\n\tpublic getVersionId(): number | undefined {\n\t\treturn this._model?.version;\n\t}\n\n\tpublic async update(): Promise<void> {\n\t\tthis._cts?.dispose(true);\n\t\tthis._cts = new CancellationTokenSource();\n\t\tawait this.updateStickyModel(this._cts.token);\n\t\tthis._onDidChangeStickyScroll.fire();\n\t}\n\n\tprivate async updateStickyModel(token: CancellationToken): Promise<void> {\n\n\t\tif (!this._editor.hasModel() || !this._stickyModelProvider || this._editor.getModel().isTooLargeForTokenization()) {\n\t\t\tthis._model = null;\n\t\t\treturn;\n\t\t}\n\n\t\tconst textModel = this._editor.getModel();\n\t\tconst modelVersionId = textModel.getVersionId();\n\n\t\tconst model = await this._stickyModelProvider.update(textModel, modelVersionId, token);\n\t\tif (token.isCancellationRequested) {\n\t\t\t// the computation was canceled, so do not overwrite the model\n\t\t\treturn;\n\t\t}\n\n\t\tthis._model = model;\n\t}\n\n\tprivate updateIndex(index: number) {\n\t\tif (index === -1) {\n\t\t\tindex = 0;\n\t\t} else if (index < 0) {\n\t\t\tindex = -index - 2;\n\t\t}\n\t\treturn index;\n\t}\n\n\tpublic getCandidateStickyLinesIntersectingFromStickyModel(\n\t\trange: StickyRange,\n\t\toutlineModel: StickyElement,\n\t\tresult: StickyLineCandidate[],\n\t\tdepth: number,\n\t\tlastStartLineNumber: number\n\t): void {\n\t\tif (outlineModel.children.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tlet lastLine = lastStartLineNumber;\n\t\tconst childrenStartLines: number[] = [];\n\n\t\tfor (let i = 0; i < outlineModel.children.length; i++) {\n\t\t\tconst child = outlineModel.children[i];\n\t\t\tif (child.range) {\n\t\t\t\tchildrenStartLines.push(child.range.startLineNumber);\n\t\t\t}\n\t\t}\n\t\tconst lowerBound = this.updateIndex(binarySearch(childrenStartLines, range.startLineNumber, (a: number, b: number) => { return a - b; }));\n\t\tconst upperBound = this.updateIndex(binarySearch(childrenStartLines, range.startLineNumber + depth, (a: number, b: number) => { return a - b; }));\n\n\t\tfor (let i = lowerBound; i <= upperBound; i++) {\n\t\t\tconst child = outlineModel.children[i];\n\t\t\tif (!child) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (child.range) {\n\t\t\t\tconst childStartLine = child.range.startLineNumber;\n\t\t\t\tconst childEndLine = child.range.endLineNumber;\n\t\t\t\tif (range.startLineNumber <= childEndLine + 1 && childStartLine - 1 <= range.endLineNumber && childStartLine !== lastLine) {\n\t\t\t\t\tlastLine = childStartLine;\n\t\t\t\t\tresult.push(new StickyLineCandidate(childStartLine, childEndLine - 1, depth + 1));\n\t\t\t\t\tthis.getCandidateStickyLinesIntersectingFromStickyModel(range, child, result, depth + 1, childStartLine);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.getCandidateStickyLinesIntersectingFromStickyModel(range, child, result, depth, lastStartLineNumber);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getCandidateStickyLinesIntersecting(range: StickyRange): StickyLineCandidate[] {\n\t\tif (!this._model?.element) {\n\t\t\treturn [];\n\t\t}\n\t\tlet stickyLineCandidates: StickyLineCandidate[] = [];\n\t\tthis.getCandidateStickyLinesIntersectingFromStickyModel(range, this._model.element, stickyLineCandidates, 0, -1);\n\t\tconst hiddenRanges: Range[] | undefined = this._editor._getViewModel()?.getHiddenAreas();\n\n\t\tif (hiddenRanges) {\n\t\t\tfor (const hiddenRange of hiddenRanges) {\n\t\t\t\tstickyLineCandidates = stickyLineCandidates.filter(stickyLine => !(stickyLine.startLineNumber >= hiddenRange.startLineNumber && stickyLine.endLineNumber <= hiddenRange.endLineNumber + 1));\n\t\t\t}\n\t\t}\n\t\treturn stickyLineCandidates;\n\t}\n}\n"]}