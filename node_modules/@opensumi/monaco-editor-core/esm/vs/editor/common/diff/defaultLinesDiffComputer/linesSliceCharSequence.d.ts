import { OffsetRange } from '../../core/offsetRange';
import { Position } from '../../core/position';
import { Range } from '../../core/range';
import { ISequence } from './algorithms/diffAlgorithm';
export declare class LinesSliceCharSequence implements ISequence {
    readonly lines: string[];
    readonly considerWhitespaceChanges: boolean;
    private readonly elements;
    private readonly firstCharOffsetByLine;
    readonly lineRange: OffsetRange;
    private readonly additionalOffsetByLine;
    constructor(lines: string[], lineRange: OffsetRange, considerWhitespaceChanges: boolean);
    toString(): string;
    get text(): string;
    getText(range: OffsetRange): string;
    getElement(offset: number): number;
    get length(): number;
    getBoundaryScore(length: number): number;
    translateOffset(offset: number): Position;
    translateRange(range: OffsetRange): Range;
    /**
     * Finds the word that contains the character at the given offset
     */
    findWordContaining(offset: number): OffsetRange | undefined;
    countLinesIn(range: OffsetRange): number;
    isStronglyEqual(offset1: number, offset2: number): boolean;
    extendToFullLines(range: OffsetRange): OffsetRange;
}
