{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/common/core/wordCharacterClassifier.ts","vs/editor/common/core/wordCharacterClassifier.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,+DAA4D;AAE5D,IAAkB,kBAIjB;AAJD,WAAkB,kBAAkB;IACnC,iEAAW,CAAA;IACX,uEAAc,CAAA;IACd,6EAAiB,CAAA;AAClB,CAAC,EAJiB,kBAAkB,kCAAlB,kBAAkB,QAInC;AAED,MAAa,uBAAwB,SAAQ,yCAAuC;IAEnF,YAAY,cAAsB;QACjC,KAAK,oCAA4B,CAAC;QAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3D,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,2CAAmC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,GAAG,gEAA+C,CAAC;QACxD,IAAI,CAAC,GAAG,6DAA6C,CAAC;IACvD,CAAC;CAED;AAbD,0DAaC;AAED,SAAS,IAAI,CAAI,SAA+B;IAC/C,MAAM,KAAK,GAAyB,EAAE,CAAC,CAAC,4BAA4B;IACpE,OAAO,CAAC,KAAa,EAAK,EAAE;QAC3B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC;YAClC,KAAK,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;QACD,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC,CAAC;AACH,CAAC;AAEY,QAAA,uBAAuB,GAAG,IAAI,CAC1C,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAC7C,CAAC","file":"wordCharacterClassifier.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../base/common/charCode';\nimport { CharacterClassifier } from './characterClassifier';\n\nexport const enum WordCharacterClass {\n\tRegular = 0,\n\tWhitespace = 1,\n\tWordSeparator = 2\n}\n\nexport class WordCharacterClassifier extends CharacterClassifier<WordCharacterClass> {\n\n\tconstructor(wordSeparators: string) {\n\t\tsuper(WordCharacterClass.Regular);\n\n\t\tfor (let i = 0, len = wordSeparators.length; i < len; i++) {\n\t\t\tthis.set(wordSeparators.charCodeAt(i), WordCharacterClass.WordSeparator);\n\t\t}\n\n\t\tthis.set(CharCode.Space, WordCharacterClass.Whitespace);\n\t\tthis.set(CharCode.Tab, WordCharacterClass.Whitespace);\n\t}\n\n}\n\nfunction once<R>(computeFn: (input: string) => R): (input: string) => R {\n\tconst cache: { [key: string]: R } = {}; // TODO@Alex unbounded cache\n\treturn (input: string): R => {\n\t\tif (!cache.hasOwnProperty(input)) {\n\t\t\tcache[input] = computeFn(input);\n\t\t}\n\t\treturn cache[input];\n\t};\n}\n\nexport const getMapForWordSeparators = once<WordCharacterClassifier>(\n\t(input) => new WordCharacterClassifier(input)\n);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from '../../../base/common/charCode';\nimport { CharacterClassifier } from './characterClassifier';\n\nexport const enum WordCharacterClass {\n\tRegular = 0,\n\tWhitespace = 1,\n\tWordSeparator = 2\n}\n\nexport class WordCharacterClassifier extends CharacterClassifier<WordCharacterClass> {\n\n\tconstructor(wordSeparators: string) {\n\t\tsuper(WordCharacterClass.Regular);\n\n\t\tfor (let i = 0, len = wordSeparators.length; i < len; i++) {\n\t\t\tthis.set(wordSeparators.charCodeAt(i), WordCharacterClass.WordSeparator);\n\t\t}\n\n\t\tthis.set(CharCode.Space, WordCharacterClass.Whitespace);\n\t\tthis.set(CharCode.Tab, WordCharacterClass.Whitespace);\n\t}\n\n}\n\nfunction once<R>(computeFn: (input: string) => R): (input: string) => R {\n\tconst cache: { [key: string]: R } = {}; // TODO@Alex unbounded cache\n\treturn (input: string): R => {\n\t\tif (!cache.hasOwnProperty(input)) {\n\t\t\tcache[input] = computeFn(input);\n\t\t}\n\t\treturn cache[input];\n\t};\n}\n\nexport const getMapForWordSeparators = once<WordCharacterClassifier>(\n\t(input) => new WordCharacterClassifier(input)\n);\n"]}