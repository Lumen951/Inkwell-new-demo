{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/common/services/editorBaseApi.ts","vs/editor/common/services/editorBaseApi.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,oEAA4E;AAC5E,sDAAqD;AACrD,4DAAgF;AAChF,kDAA+C;AAC/C,+CAA4C;AAC5C,yCAAsC;AACtC,iDAA8C;AAC9C,4CAAqC;AACrC,iEAAiE;AAEjE,MAAa,MAAM;IAMX,MAAM,CAAC,KAAK,CAAC,SAAiB,EAAE,UAAkB;QACxD,OAAO,IAAA,mBAAQ,EAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IACxC,CAAC;;AARF,wBASC;AARuB,cAAO,kCAA+B;AACtC,YAAK,gCAA6B;AAClC,UAAG,6BAA2B;AAC9B,cAAO,iCAA+B;AAO9D,SAAgB,mBAAmB;IAClC,OAAO;QACN,MAAM,EAAE,SAAU,EAAE,mCAAmC;QACvD,SAAS,EAAE,SAAU,EAAE,mCAAmC;QAC1D,uBAAuB,EAAE,sCAAuB;QAChD,OAAO,EAAE,eAAO;QAChB,OAAO,EAAE,eAAe,CAAC,OAAO;QAChC,MAAM,EAAE,MAAM;QACd,QAAQ,EAAE,mBAAQ;QAClB,KAAK,EAAE,aAAK;QACZ,SAAS,EAAO,qBAAS;QACzB,kBAAkB,EAAE,eAAe,CAAC,kBAAkB;QACtD,cAAc,EAAE,eAAe,CAAC,cAAc;QAC9C,SAAS,EAAE,eAAe,CAAC,SAAS;QACpC,GAAG,EAAO,SAAG;QACb,KAAK,EAAE,iBAAK;KACZ,CAAC;AACH,CAAC;AAjBD,kDAiBC","file":"editorBaseApi.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from '../../../base/common/cancellation';\nimport { Emitter } from '../../../base/common/event';\nimport { KeyChord, KeyMod as ConstKeyMod } from '../../../base/common/keyCodes';\nimport { URI } from '../../../base/common/uri';\nimport { Position } from '../core/position';\nimport { Range } from '../core/range';\nimport { Selection } from '../core/selection';\nimport { Token } from '../languages';\nimport * as standaloneEnums from '../standalone/standaloneEnums';\n\nexport class KeyMod {\n\tpublic static readonly CtrlCmd: number = ConstKeyMod.CtrlCmd;\n\tpublic static readonly Shift: number = ConstKeyMod.Shift;\n\tpublic static readonly Alt: number = ConstKeyMod.Alt;\n\tpublic static readonly WinCtrl: number = ConstKeyMod.WinCtrl;\n\n\tpublic static chord(firstPart: number, secondPart: number): number {\n\t\treturn KeyChord(firstPart, secondPart);\n\t}\n}\n\nexport function createMonacoBaseAPI(): typeof monaco {\n\treturn {\n\t\teditor: undefined!, // undefined override expected here\n\t\tlanguages: undefined!, // undefined override expected here\n\t\tCancellationTokenSource: CancellationTokenSource,\n\t\tEmitter: Emitter,\n\t\tKeyCode: standaloneEnums.KeyCode,\n\t\tKeyMod: KeyMod,\n\t\tPosition: Position,\n\t\tRange: Range,\n\t\tSelection: <any>Selection,\n\t\tSelectionDirection: standaloneEnums.SelectionDirection,\n\t\tMarkerSeverity: standaloneEnums.MarkerSeverity,\n\t\tMarkerTag: standaloneEnums.MarkerTag,\n\t\tUri: <any>URI,\n\t\tToken: Token\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from '../../../base/common/cancellation';\nimport { Emitter } from '../../../base/common/event';\nimport { KeyChord, KeyMod as ConstKeyMod } from '../../../base/common/keyCodes';\nimport { URI } from '../../../base/common/uri';\nimport { Position } from '../core/position';\nimport { Range } from '../core/range';\nimport { Selection } from '../core/selection';\nimport { Token } from '../languages';\nimport * as standaloneEnums from '../standalone/standaloneEnums';\n\nexport class KeyMod {\n\tpublic static readonly CtrlCmd: number = ConstKeyMod.CtrlCmd;\n\tpublic static readonly Shift: number = ConstKeyMod.Shift;\n\tpublic static readonly Alt: number = ConstKeyMod.Alt;\n\tpublic static readonly WinCtrl: number = ConstKeyMod.WinCtrl;\n\n\tpublic static chord(firstPart: number, secondPart: number): number {\n\t\treturn KeyChord(firstPart, secondPart);\n\t}\n}\n\nexport function createMonacoBaseAPI(): typeof monaco {\n\treturn {\n\t\teditor: undefined!, // undefined override expected here\n\t\tlanguages: undefined!, // undefined override expected here\n\t\tCancellationTokenSource: CancellationTokenSource,\n\t\tEmitter: Emitter,\n\t\tKeyCode: standaloneEnums.KeyCode,\n\t\tKeyMod: KeyMod,\n\t\tPosition: Position,\n\t\tRange: Range,\n\t\tSelection: <any>Selection,\n\t\tSelectionDirection: standaloneEnums.SelectionDirection,\n\t\tMarkerSeverity: standaloneEnums.MarkerSeverity,\n\t\tMarkerTag: standaloneEnums.MarkerTag,\n\t\tUri: <any>URI,\n\t\tToken: Token\n\t};\n}\n"]}