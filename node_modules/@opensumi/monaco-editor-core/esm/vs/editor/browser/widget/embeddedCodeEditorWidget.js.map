{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/browser/widget/embeddedCodeEditorWidget.ts","vs/editor/browser/widget/embeddedCodeEditorWidget.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;;;;;;;;;;AAEhG,wDAAwD;AAExD,qEAAmE;AACnE,yDAAgF;AAChF,oEAA+F;AAE/F,wGAAqG;AACrG,6EAAkF;AAClF,wFAA6F;AAC7F,yHAAuH;AACvH,yEAA6E;AAC7E,+EAAoF;AACpF,wFAA6F;AAC7F,qFAA0F;AAC1F,yEAAoF;AACpF,8EAA4E;AAErE,IAAM,wBAAwB,GAA9B,MAAM,wBAAyB,SAAQ,mCAAgB;IAK7D,YACC,UAAuB,EACvB,OAAuB,EACvB,uBAAiD,EACjD,YAAyB,EACF,oBAA2C,EAC9C,iBAAqC,EACxC,cAA+B,EAC5B,iBAAqC,EAC1C,YAA2B,EACpB,mBAAyC,EACxC,oBAA2C,EACnC,4BAA2D,EAChE,uBAAiD;QAE3E,KAAK,CAAC,UAAU,EAAE,EAAE,GAAG,YAAY,CAAC,aAAa,EAAE,EAAE,sBAAsB,EAAE,YAAY,CAAC,yBAAyB,EAAE,EAAE,EAAE,uBAAuB,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,cAAc,EAAE,iBAAiB,EAAE,YAAY,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,4BAA4B,EAAE,uBAAuB,CAAC,CAAC;QAE9U,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;QAEjC,6BAA6B;QAC7B,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAE5C,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC,CAA4B,EAAE,EAAE,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChI,CAAC;IAED,eAAe;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAEO,6BAA6B,CAAC,CAA4B;QACjE,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC,CAAC;QACxD,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7C,CAAC;IAEQ,aAAa,CAAC,UAA0B;QAChD,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QACxD,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7C,CAAC;CACD,CAAA;AA5CY,4DAAwB;mCAAxB,wBAAwB;IAUlC,WAAA,qCAAqB,CAAA;IACrB,WAAA,sCAAkB,CAAA;IAClB,WAAA,0BAAe,CAAA;IACf,WAAA,+BAAkB,CAAA;IAClB,WAAA,4BAAa,CAAA;IACb,WAAA,mCAAoB,CAAA;IACpB,YAAA,qCAAqB,CAAA;IACrB,YAAA,6DAA6B,CAAA;IAC7B,YAAA,2CAAwB,CAAA;GAlBd,wBAAwB,CA4CpC;AAEM,IAAM,wBAAwB,GAA9B,MAAM,wBAAyB,SAAQ,mCAAgB;IAK7D,YACC,UAAuB,EACvB,OAAiD,EACjD,uBAAqD,EACrD,YAAyB,EACL,iBAAqC,EAClC,oBAA2C,EAC9C,iBAAqC,EAC5B,0BAAuD,EAC5D,qBAA6C;QAErE,KAAK,CAAC,UAAU,EAAE,YAAY,CAAC,aAAa,EAAE,EAAE,uBAAuB,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,0BAA0B,EAAE,qBAAqB,CAAC,CAAC;QAExL,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;QAEjC,6BAA6B;QAC7B,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAE5C,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnG,CAAC;IAED,eAAe;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAEO,6BAA6B,CAAC,CAA4B;QACjE,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC,CAAC;QACxD,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7C,CAAC;IAEQ,aAAa,CAAC,UAA0B;QAChD,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QACxD,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7C,CAAC;CACD,CAAA;AAxCY,4DAAwB;mCAAxB,wBAAwB;IAUlC,WAAA,+BAAkB,CAAA;IAClB,WAAA,qCAAqB,CAAA;IACrB,WAAA,sCAAkB,CAAA;IAClB,WAAA,wDAA2B,CAAA;IAC3B,WAAA,iCAAsB,CAAA;GAdZ,wBAAwB,CAwCpC","file":"embeddedCodeEditorWidget.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as objects from '../../../base/common/objects';\nimport { ICodeEditor, IDiffEditorConstructionOptions } from '../editorBrowser';\nimport { ICodeEditorService } from '../services/codeEditorService';\nimport { CodeEditorWidget, ICodeEditorWidgetOptions } from './codeEditorWidget';\nimport { DiffEditorWidget, IDiffCodeEditorWidgetOptions } from './diffEditor/diffEditorWidget';\nimport { ConfigurationChangedEvent, IDiffEditorOptions, IEditorOptions } from '../../common/config/editorOptions';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility';\nimport { IAccessibilitySignalService } from '../../../platform/accessibilitySignal/browser/accessibilitySignalService';\nimport { ICommandService } from '../../../platform/commands/common/commands';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation';\nimport { INotificationService } from '../../../platform/notification/common/notification';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress';\nimport { IThemeService } from '../../../platform/theme/common/themeService';\n\nexport class EmbeddedCodeEditorWidget extends CodeEditorWidget {\n\n\tprivate readonly _parentEditor: ICodeEditor;\n\tprivate readonly _overwriteOptions: IEditorOptions;\n\n\tconstructor(\n\t\tdomElement: HTMLElement,\n\t\toptions: IEditorOptions,\n\t\tcodeEditorWidgetOptions: ICodeEditorWidgetOptions,\n\t\tparentEditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t\t@ILanguageConfigurationService languageConfigurationService: ILanguageConfigurationService,\n\t\t@ILanguageFeaturesService languageFeaturesService: ILanguageFeaturesService,\n\t) {\n\t\tsuper(domElement, { ...parentEditor.getRawOptions(), overflowWidgetsDomNode: parentEditor.getOverflowWidgetsDomNode() }, codeEditorWidgetOptions, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService, languageConfigurationService, languageFeaturesService);\n\n\t\tthis._parentEditor = parentEditor;\n\t\tthis._overwriteOptions = options;\n\n\t\t// Overwrite parent's options\n\t\tsuper.updateOptions(this._overwriteOptions);\n\n\t\tthis._register(parentEditor.onDidChangeConfiguration((e: ConfigurationChangedEvent) => this._onParentConfigurationChanged(e)));\n\t}\n\n\tgetParentEditor(): ICodeEditor {\n\t\treturn this._parentEditor;\n\t}\n\n\tprivate _onParentConfigurationChanged(e: ConfigurationChangedEvent): void {\n\t\tsuper.updateOptions(this._parentEditor.getRawOptions());\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n\n\toverride updateOptions(newOptions: IEditorOptions): void {\n\t\tobjects.mixin(this._overwriteOptions, newOptions, true);\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n}\n\nexport class EmbeddedDiffEditorWidget extends DiffEditorWidget {\n\n\tprivate readonly _parentEditor: ICodeEditor;\n\tprivate readonly _overwriteOptions: IDiffEditorOptions;\n\n\tconstructor(\n\t\tdomElement: HTMLElement,\n\t\toptions: Readonly<IDiffEditorConstructionOptions>,\n\t\tcodeEditorWidgetOptions: IDiffCodeEditorWidgetOptions,\n\t\tparentEditor: ICodeEditor,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IAccessibilitySignalService accessibilitySignalService: IAccessibilitySignalService,\n\t\t@IEditorProgressService editorProgressService: IEditorProgressService,\n\t) {\n\t\tsuper(domElement, parentEditor.getRawOptions(), codeEditorWidgetOptions, contextKeyService, instantiationService, codeEditorService, accessibilitySignalService, editorProgressService);\n\n\t\tthis._parentEditor = parentEditor;\n\t\tthis._overwriteOptions = options;\n\n\t\t// Overwrite parent's options\n\t\tsuper.updateOptions(this._overwriteOptions);\n\n\t\tthis._register(parentEditor.onDidChangeConfiguration(e => this._onParentConfigurationChanged(e)));\n\t}\n\n\tgetParentEditor(): ICodeEditor {\n\t\treturn this._parentEditor;\n\t}\n\n\tprivate _onParentConfigurationChanged(e: ConfigurationChangedEvent): void {\n\t\tsuper.updateOptions(this._parentEditor.getRawOptions());\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n\n\toverride updateOptions(newOptions: IEditorOptions): void {\n\t\tobjects.mixin(this._overwriteOptions, newOptions, true);\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as objects from '../../../base/common/objects';\nimport { ICodeEditor, IDiffEditorConstructionOptions } from '../editorBrowser';\nimport { ICodeEditorService } from '../services/codeEditorService';\nimport { CodeEditorWidget, ICodeEditorWidgetOptions } from './codeEditorWidget';\nimport { DiffEditorWidget, IDiffCodeEditorWidgetOptions } from './diffEditor/diffEditorWidget';\nimport { ConfigurationChangedEvent, IDiffEditorOptions, IEditorOptions } from '../../common/config/editorOptions';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility';\nimport { IAccessibilitySignalService } from '../../../platform/accessibilitySignal/browser/accessibilitySignalService';\nimport { ICommandService } from '../../../platform/commands/common/commands';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation';\nimport { INotificationService } from '../../../platform/notification/common/notification';\nimport { IEditorProgressService } from '../../../platform/progress/common/progress';\nimport { IThemeService } from '../../../platform/theme/common/themeService';\n\nexport class EmbeddedCodeEditorWidget extends CodeEditorWidget {\n\n\tprivate readonly _parentEditor: ICodeEditor;\n\tprivate readonly _overwriteOptions: IEditorOptions;\n\n\tconstructor(\n\t\tdomElement: HTMLElement,\n\t\toptions: IEditorOptions,\n\t\tcodeEditorWidgetOptions: ICodeEditorWidgetOptions,\n\t\tparentEditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t\t@ILanguageConfigurationService languageConfigurationService: ILanguageConfigurationService,\n\t\t@ILanguageFeaturesService languageFeaturesService: ILanguageFeaturesService,\n\t) {\n\t\tsuper(domElement, { ...parentEditor.getRawOptions(), overflowWidgetsDomNode: parentEditor.getOverflowWidgetsDomNode() }, codeEditorWidgetOptions, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService, languageConfigurationService, languageFeaturesService);\n\n\t\tthis._parentEditor = parentEditor;\n\t\tthis._overwriteOptions = options;\n\n\t\t// Overwrite parent's options\n\t\tsuper.updateOptions(this._overwriteOptions);\n\n\t\tthis._register(parentEditor.onDidChangeConfiguration((e: ConfigurationChangedEvent) => this._onParentConfigurationChanged(e)));\n\t}\n\n\tgetParentEditor(): ICodeEditor {\n\t\treturn this._parentEditor;\n\t}\n\n\tprivate _onParentConfigurationChanged(e: ConfigurationChangedEvent): void {\n\t\tsuper.updateOptions(this._parentEditor.getRawOptions());\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n\n\toverride updateOptions(newOptions: IEditorOptions): void {\n\t\tobjects.mixin(this._overwriteOptions, newOptions, true);\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n}\n\nexport class EmbeddedDiffEditorWidget extends DiffEditorWidget {\n\n\tprivate readonly _parentEditor: ICodeEditor;\n\tprivate readonly _overwriteOptions: IDiffEditorOptions;\n\n\tconstructor(\n\t\tdomElement: HTMLElement,\n\t\toptions: Readonly<IDiffEditorConstructionOptions>,\n\t\tcodeEditorWidgetOptions: IDiffCodeEditorWidgetOptions,\n\t\tparentEditor: ICodeEditor,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IAccessibilitySignalService accessibilitySignalService: IAccessibilitySignalService,\n\t\t@IEditorProgressService editorProgressService: IEditorProgressService,\n\t) {\n\t\tsuper(domElement, parentEditor.getRawOptions(), codeEditorWidgetOptions, contextKeyService, instantiationService, codeEditorService, accessibilitySignalService, editorProgressService);\n\n\t\tthis._parentEditor = parentEditor;\n\t\tthis._overwriteOptions = options;\n\n\t\t// Overwrite parent's options\n\t\tsuper.updateOptions(this._overwriteOptions);\n\n\t\tthis._register(parentEditor.onDidChangeConfiguration(e => this._onParentConfigurationChanged(e)));\n\t}\n\n\tgetParentEditor(): ICodeEditor {\n\t\treturn this._parentEditor;\n\t}\n\n\tprivate _onParentConfigurationChanged(e: ConfigurationChangedEvent): void {\n\t\tsuper.updateOptions(this._parentEditor.getRawOptions());\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n\n\toverride updateOptions(newOptions: IEditorOptions): void {\n\t\tobjects.mixin(this._overwriteOptions, newOptions, true);\n\t\tsuper.updateOptions(this._overwriteOptions);\n\t}\n}\n"]}