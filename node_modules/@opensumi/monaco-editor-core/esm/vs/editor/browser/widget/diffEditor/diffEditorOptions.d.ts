import { IObservable } from '../../../../base/common/observable';
import { IDiffEditorOptions, IEditorOptions } from '../../../common/config/editorOptions';
export declare class DiffEditorOptions {
    private readonly _options;
    get editorOptions(): IObservable<IEditorOptions, {
        changedOptions: IEditorOptions;
    }>;
    private readonly _diffEditorWidth;
    constructor(options: Readonly<IDiffEditorOptions>);
    readonly couldShowInlineViewBecauseOfSize: IObservable<boolean, unknown>;
    readonly renderOverviewRuler: IObservable<boolean, unknown>;
    readonly renderSideBySide: IObservable<boolean, unknown>;
    readonly readOnly: IObservable<boolean | undefined, unknown>;
    readonly shouldRenderRevertArrows: IObservable<boolean, unknown>;
    readonly renderIndicators: IObservable<boolean, unknown>;
    readonly enableSplitViewResizing: IObservable<boolean, unknown>;
    readonly splitViewDefaultRatio: IObservable<number, unknown>;
    readonly ignoreTrimWhitespace: IObservable<boolean, unknown>;
    readonly maxComputationTimeMs: IObservable<number, unknown>;
    readonly showMoves: IObservable<boolean, unknown>;
    readonly isInEmbeddedEditor: IObservable<boolean, unknown>;
    readonly diffWordWrap: IObservable<"on" | "off" | "inherit", unknown>;
    readonly originalEditable: IObservable<boolean, unknown>;
    readonly diffCodeLens: IObservable<boolean, unknown>;
    readonly accessibilityVerbose: IObservable<boolean, unknown>;
    readonly diffAlgorithm: IObservable<"advanced" | "legacy", unknown>;
    readonly showEmptyDecorations: IObservable<boolean, unknown>;
    readonly onlyShowAccessibleDiffViewer: IObservable<boolean, unknown>;
    readonly hideUnchangedRegions: IObservable<boolean, unknown>;
    readonly hideUnchangedRegionsRevealLineCount: IObservable<number, unknown>;
    readonly hideUnchangedRegionsContextLineCount: IObservable<number, unknown>;
    readonly hideUnchangedRegionsMinimumLineCount: IObservable<number, unknown>;
    updateOptions(changedOptions: IDiffEditorOptions): void;
    setWidth(width: number): void;
}
