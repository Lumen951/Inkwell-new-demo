import { ICodeEditor, IDiffEditorConstructionOptions } from '../editorBrowser';
import { ICodeEditorService } from '../services/codeEditorService';
import { CodeEditorWidget, ICodeEditorWidgetOptions } from './codeEditorWidget';
import { DiffEditorWidget, IDiffCodeEditorWidgetOptions } from './diffEditor/diffEditorWidget';
import { IEditorOptions } from '../../common/config/editorOptions';
import { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry';
import { ILanguageFeaturesService } from '../../common/services/languageFeatures';
import { IAccessibilityService } from '../../../platform/accessibility/common/accessibility';
import { IAccessibilitySignalService } from '../../../platform/accessibilitySignal/browser/accessibilitySignalService';
import { ICommandService } from '../../../platform/commands/common/commands';
import { IContextKeyService } from '../../../platform/contextkey/common/contextkey';
import { IInstantiationService } from '../../../platform/instantiation/common/instantiation';
import { INotificationService } from '../../../platform/notification/common/notification';
import { IEditorProgressService } from '../../../platform/progress/common/progress';
import { IThemeService } from '../../../platform/theme/common/themeService';
export declare class EmbeddedCodeEditorWidget extends CodeEditorWidget {
    private readonly _parentEditor;
    private readonly _overwriteOptions;
    constructor(domElement: HTMLElement, options: IEditorOptions, codeEditorWidgetOptions: ICodeEditorWidgetOptions, parentEditor: ICodeEditor, instantiationService: IInstantiationService, codeEditorService: ICodeEditorService, commandService: ICommandService, contextKeyService: IContextKeyService, themeService: IThemeService, notificationService: INotificationService, accessibilityService: IAccessibilityService, languageConfigurationService: ILanguageConfigurationService, languageFeaturesService: ILanguageFeaturesService);
    getParentEditor(): ICodeEditor;
    private _onParentConfigurationChanged;
    updateOptions(newOptions: IEditorOptions): void;
}
export declare class EmbeddedDiffEditorWidget extends DiffEditorWidget {
    private readonly _parentEditor;
    private readonly _overwriteOptions;
    constructor(domElement: HTMLElement, options: Readonly<IDiffEditorConstructionOptions>, codeEditorWidgetOptions: IDiffCodeEditorWidgetOptions, parentEditor: ICodeEditor, contextKeyService: IContextKeyService, instantiationService: IInstantiationService, codeEditorService: ICodeEditorService, accessibilitySignalService: IAccessibilitySignalService, editorProgressService: IEditorProgressService);
    getParentEditor(): ICodeEditor;
    private _onParentConfigurationChanged;
    updateOptions(newOptions: IEditorOptions): void;
}
