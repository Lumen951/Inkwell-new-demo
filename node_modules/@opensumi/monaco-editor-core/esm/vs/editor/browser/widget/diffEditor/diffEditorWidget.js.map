{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/browser/widget/diffEditor/diffEditorWidget.ts","vs/editor/browser/widget/diffEditor/diffEditorWidget.ts"],"names":[],"mappings":"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","file":"diffEditorWidget.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, getWindow, h } from '../../../../base/browser/dom';\nimport { IBoundarySashes } from '../../../../base/browser/ui/sash/sash';\nimport { findLast } from '../../../../base/common/arraysFind';\nimport { onUnexpectedError } from '../../../../base/common/errors';\nimport { Event } from '../../../../base/common/event';\nimport { toDisposable } from '../../../../base/common/lifecycle';\nimport { IObservable, ITransaction, autorun, autorunWithStore, derived, observableFromEvent, observableValue, recomputeInitiallyAndOnChange, subtransaction, transaction } from '../../../../base/common/observable';\nimport { derivedDisposable } from '../../../../base/common/observableInternal/derived';\nimport './style.css';\nimport { IEditorConstructionOptions } from '../../config/editorConfiguration';\nimport { ICodeEditor, IDiffEditor, IDiffEditorConstructionOptions } from '../../editorBrowser';\nimport { EditorExtensionsRegistry, IDiffEditorContributionDescription } from '../../editorExtensions';\nimport { ICodeEditorService } from '../../services/codeEditorService';\nimport { StableEditorScrollState } from '../../stableEditorScroll';\nimport { CodeEditorWidget, ICodeEditorWidgetOptions } from '../codeEditorWidget';\nimport { AccessibleDiffViewer, AccessibleDiffViewerModelFromEditors } from './components/accessibleDiffViewer';\nimport { DiffEditorDecorations } from './components/diffEditorDecorations';\nimport { DiffEditorSash } from './components/diffEditorSash';\nimport { HideUnchangedRegionsFeature } from './features/hideUnchangedRegionsFeature';\nimport { DiffEditorViewZones } from './components/diffEditorViewZones/diffEditorViewZones';\nimport { MovedBlocksLinesFeature } from './features/movedBlocksLinesFeature';\nimport { OverviewRulerFeature } from './features/overviewRulerFeature';\nimport { CSSStyle, ObservableElementSizeObserver, applyStyle, applyViewZones, bindContextKey, readHotReloadableExport, translatePosition } from './utils';\nimport { IDiffEditorOptions } from '../../../common/config/editorOptions';\nimport { IDimension } from '../../../common/core/dimension';\nimport { Position } from '../../../common/core/position';\nimport { Range } from '../../../common/core/range';\nimport { CursorChangeReason } from '../../../common/cursorEvents';\nimport { IDiffComputationResult, ILineChange } from '../../../common/diff/legacyLinesDiffComputer';\nimport { DetailedLineRangeMapping, RangeMapping } from '../../../common/diff/rangeMapping';\nimport { EditorType, IDiffEditorModel, IDiffEditorViewModel, IDiffEditorViewState } from '../../../common/editorCommon';\nimport { EditorContextKeys } from '../../../common/editorContextKeys';\nimport { IIdentifiedSingleEditOperation } from '../../../common/model';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection';\nimport { IEditorProgressService } from '../../../../platform/progress/common/progress';\nimport { DelegatingEditor } from './delegatingEditorImpl';\nimport { DiffEditorEditors } from './components/diffEditorEditors';\nimport { DiffEditorOptions } from './diffEditorOptions';\nimport { DiffEditorViewModel, DiffMapping, DiffState } from './diffEditorViewModel';\nimport { RevertButtonsFeature } from './features/revertButtonsFeature';\n\nexport interface IDiffCodeEditorWidgetOptions {\n\toriginalEditor?: ICodeEditorWidgetOptions;\n\tmodifiedEditor?: ICodeEditorWidgetOptions;\n}\n\nexport class DiffEditorWidget extends DelegatingEditor implements IDiffEditor {\n\tpublic static ENTIRE_DIFF_OVERVIEW_WIDTH = OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH;\n\n\tprivate readonly elements = h('div.monaco-diff-editor.side-by-side', { style: { position: 'relative', height: '100%' } }, [\n\t\th('div.noModificationsOverlay@overlay', { style: { position: 'absolute', height: '100%', visibility: 'hidden', } }, [$('span', {}, 'No Changes')]),\n\t\th('div.editor.original@original', { style: { position: 'absolute', height: '100%' } }),\n\t\th('div.editor.modified@modified', { style: { position: 'absolute', height: '100%' } }),\n\t\th('div.accessibleDiffViewer@accessibleDiffViewer', { style: { position: 'absolute', height: '100%' } }),\n\t]);\n\tprivate readonly _diffModel = observableValue<DiffEditorViewModel | undefined>(this, undefined);\n\tprivate _shouldDisposeDiffModel = false;\n\tpublic readonly onDidChangeModel = Event.fromObservableLight(this._diffModel);\n\n\tpublic get onDidContentSizeChange() { return this._editors.onDidContentSizeChange; }\n\n\tprivate readonly _contextKeyService = this._register(this._parentContextKeyService.createScoped(this._domElement));\n\tprivate readonly _instantiationService = this._parentInstantiationService.createChild(\n\t\tnew ServiceCollection([IContextKeyService, this._contextKeyService])\n\t);\n\tprivate readonly _rootSizeObserver: ObservableElementSizeObserver;\n\n\tprivate readonly _sash: IObservable<DiffEditorSash | undefined>;\n\tprivate readonly _boundarySashes = observableValue<IBoundarySashes | undefined>(this, undefined);\n\n\tprivate _accessibleDiffViewerShouldBeVisible = observableValue(this, false);\n\tprivate _accessibleDiffViewerVisible = derived(this, reader =>\n\t\tthis._options.onlyShowAccessibleDiffViewer.read(reader)\n\t\t\t? true\n\t\t\t: this._accessibleDiffViewerShouldBeVisible.read(reader)\n\t);\n\tprivate readonly _accessibleDiffViewer: IObservable<AccessibleDiffViewer>;\n\tprivate readonly _options: DiffEditorOptions;\n\tprivate readonly _editors: DiffEditorEditors;\n\n\tprivate readonly _overviewRulerPart: IObservable<OverviewRulerFeature | undefined>;\n\tprivate readonly _movedBlocksLinesPart = observableValue<MovedBlocksLinesFeature | undefined>(this, undefined);\n\n\tpublic get collapseUnchangedRegions() { return this._options.hideUnchangedRegions.get(); }\n\n\tconstructor(\n\t\tprivate readonly _domElement: HTMLElement,\n\t\toptions: Readonly<IDiffEditorConstructionOptions>,\n\t\tcodeEditorWidgetOptions: IDiffCodeEditorWidgetOptions,\n\t\t@IContextKeyService private readonly _parentContextKeyService: IContextKeyService,\n\t\t@IInstantiationService private readonly _parentInstantiationService: IInstantiationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IAccessibilitySignalService private readonly _accessibilitySignalService: IAccessibilitySignalService,\n\t\t@IEditorProgressService private readonly _editorProgressService: IEditorProgressService,\n\t) {\n\t\tsuper();\n\t\tcodeEditorService.willCreateDiffEditor();\n\n\t\tthis._contextKeyService.createKey('isInDiffEditor', true);\n\n\t\tthis._domElement.appendChild(this.elements.root);\n\t\tthis._register(toDisposable(() => this._domElement.removeChild(this.elements.root)));\n\n\t\tthis._rootSizeObserver = this._register(new ObservableElementSizeObserver(this.elements.root, options.dimension));\n\t\tthis._rootSizeObserver.setAutomaticLayout(options.automaticLayout ?? false);\n\n\t\tthis._options = new DiffEditorOptions(options);\n\t\tthis._register(autorun(reader => {\n\t\t\tthis._options.setWidth(this._rootSizeObserver.width.read(reader));\n\t\t}));\n\n\t\tthis._contextKeyService.createKey(EditorContextKeys.isEmbeddedDiffEditor.key, false);\n\t\tthis._register(bindContextKey(EditorContextKeys.isEmbeddedDiffEditor, this._contextKeyService,\n\t\t\treader => this._options.isInEmbeddedEditor.read(reader)\n\t\t));\n\t\tthis._register(bindContextKey(EditorContextKeys.comparingMovedCode, this._contextKeyService,\n\t\t\treader => !!this._diffModel.read(reader)?.movedTextToCompare.read(reader)\n\t\t));\n\t\tthis._register(bindContextKey(EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached, this._contextKeyService,\n\t\t\treader => this._options.couldShowInlineViewBecauseOfSize.read(reader)\n\t\t));\n\n\t\tthis._register(bindContextKey(EditorContextKeys.hasChanges, this._contextKeyService,\n\t\t\treader => (this._diffModel.read(reader)?.diff.read(reader)?.mappings.length ?? 0) > 0\n\t\t));\n\n\t\tthis._editors = this._register(this._instantiationService.createInstance(\n\t\t\tDiffEditorEditors,\n\t\t\tthis.elements.original,\n\t\t\tthis.elements.modified,\n\t\t\tthis._options,\n\t\t\tcodeEditorWidgetOptions,\n\t\t\t(i, c, o, o2) => this._createInnerEditor(i, c, o, o2),\n\t\t));\n\n\t\tthis._overviewRulerPart = derivedDisposable(this, reader =>\n\t\t\t!this._options.renderOverviewRuler.read(reader)\n\t\t\t\t? undefined\n\t\t\t\t: this._instantiationService.createInstance(\n\t\t\t\t\treadHotReloadableExport(OverviewRulerFeature, reader),\n\t\t\t\t\tthis._editors,\n\t\t\t\t\tthis.elements.root,\n\t\t\t\t\tthis._diffModel,\n\t\t\t\t\tthis._rootSizeObserver.width,\n\t\t\t\t\tthis._rootSizeObserver.height,\n\t\t\t\t\tthis._layoutInfo.map(i => i.modifiedEditor),\n\t\t\t\t)\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\n\t\tthis._sash = derivedDisposable(this, reader => {\n\t\t\tconst showSash = this._options.renderSideBySide.read(reader);\n\t\t\tthis.elements.root.classList.toggle('side-by-side', showSash);\n\t\t\treturn !showSash ? undefined : new DiffEditorSash(\n\t\t\t\tthis._options,\n\t\t\t\tthis.elements.root,\n\t\t\t\t{\n\t\t\t\t\theight: this._rootSizeObserver.height,\n\t\t\t\t\twidth: this._rootSizeObserver.width.map((w, reader) => w - (this._overviewRulerPart.read(reader)?.width ?? 0)),\n\t\t\t\t},\n\t\t\t\tthis._boundarySashes,\n\t\t\t);\n\t\t}).recomputeInitiallyAndOnChange(this._store);\n\n\t\tconst unchangedRangesFeature = derivedDisposable(this, reader => /** @description UnchangedRangesFeature */\n\t\t\tthis._instantiationService.createInstance(\n\t\t\t\treadHotReloadableExport(HideUnchangedRegionsFeature, reader),\n\t\t\t\tthis._editors, this._diffModel, this._options\n\t\t\t)\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\n\t\tderivedDisposable(this, reader => /** @description DiffEditorDecorations */\n\t\t\tthis._instantiationService.createInstance(\n\t\t\t\treadHotReloadableExport(DiffEditorDecorations, reader),\n\t\t\t\tthis._editors, this._diffModel, this._options, this,\n\t\t\t)\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\n\t\tconst origViewZoneIdsToIgnore = new Set<string>();\n\t\tconst modViewZoneIdsToIgnore = new Set<string>();\n\t\tlet isUpdatingViewZones = false;\n\t\tconst viewZoneManager = derivedDisposable(this, reader => /** @description ViewZoneManager */\n\t\t\tthis._instantiationService.createInstance(\n\t\t\t\treadHotReloadableExport(DiffEditorViewZones, reader),\n\t\t\t\tgetWindow(this._domElement),\n\t\t\t\tthis._editors,\n\t\t\t\tthis._diffModel,\n\t\t\t\tthis._options,\n\t\t\t\tthis,\n\t\t\t\t() => isUpdatingViewZones || unchangedRangesFeature.get().isUpdatingHiddenAreas,\n\t\t\t\torigViewZoneIdsToIgnore,\n\t\t\t\tmodViewZoneIdsToIgnore\n\t\t\t)\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\n\t\tconst originalViewZones = derived(this, (reader) => { /** @description originalViewZones */\n\t\t\tconst orig = viewZoneManager.read(reader).viewZones.read(reader).orig;\n\t\t\tconst orig2 = unchangedRangesFeature.read(reader).viewZones.read(reader).origViewZones;\n\t\t\treturn orig.concat(orig2);\n\t\t});\n\t\tconst modifiedViewZones = derived(this, (reader) => { /** @description modifiedViewZones */\n\t\t\tconst mod = viewZoneManager.read(reader).viewZones.read(reader).mod;\n\t\t\tconst mod2 = unchangedRangesFeature.read(reader).viewZones.read(reader).modViewZones;\n\t\t\treturn mod.concat(mod2);\n\t\t});\n\t\tthis._register(applyViewZones(this._editors.original, originalViewZones, isUpdatingOrigViewZones => {\n\t\t\tisUpdatingViewZones = isUpdatingOrigViewZones;\n\t\t}, origViewZoneIdsToIgnore));\n\t\tlet scrollState: StableEditorScrollState | undefined;\n\t\tthis._register(applyViewZones(this._editors.modified, modifiedViewZones, isUpdatingModViewZones => {\n\t\t\tisUpdatingViewZones = isUpdatingModViewZones;\n\t\t\tif (isUpdatingViewZones) {\n\t\t\t\tscrollState = StableEditorScrollState.capture(this._editors.modified);\n\t\t\t} else {\n\t\t\t\tscrollState?.restore(this._editors.modified);\n\t\t\t\tscrollState = undefined;\n\t\t\t}\n\t\t}, modViewZoneIdsToIgnore));\n\n\t\tthis._accessibleDiffViewer = derivedDisposable(this, reader =>\n\t\t\tthis._instantiationService.createInstance(\n\t\t\t\treadHotReloadableExport(AccessibleDiffViewer, reader),\n\t\t\t\tthis.elements.accessibleDiffViewer,\n\t\t\t\tthis._accessibleDiffViewerVisible,\n\t\t\t\t(visible, tx) => this._accessibleDiffViewerShouldBeVisible.set(visible, tx),\n\t\t\t\tthis._options.onlyShowAccessibleDiffViewer.map(v => !v),\n\t\t\t\tthis._rootSizeObserver.width,\n\t\t\t\tthis._rootSizeObserver.height,\n\t\t\t\tthis._diffModel.map((m, r) => m?.diff.read(r)?.mappings.map(m => m.lineRangeMapping)),\n\t\t\t\tnew AccessibleDiffViewerModelFromEditors(this._editors),\n\t\t\t)\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\n\t\tconst visibility = this._accessibleDiffViewerVisible.map<CSSStyle['visibility']>(v => v ? 'hidden' : 'visible');\n\t\tthis._register(applyStyle(this.elements.modified, { visibility }));\n\t\tthis._register(applyStyle(this.elements.original, { visibility }));\n\n\t\tthis._createDiffEditorContributions();\n\n\t\tcodeEditorService.addDiffEditor(this);\n\n\t\tthis._register(recomputeInitiallyAndOnChange(this._layoutInfo));\n\n\t\tderivedDisposable(this, reader => /** @description MovedBlocksLinesPart */\n\t\t\tnew (readHotReloadableExport(MovedBlocksLinesFeature, reader))(\n\t\t\t\tthis.elements.root,\n\t\t\t\tthis._diffModel,\n\t\t\t\tthis._layoutInfo.map(i => i.originalEditor),\n\t\t\t\tthis._layoutInfo.map(i => i.modifiedEditor),\n\t\t\t\tthis._editors,\n\t\t\t)\n\t\t).recomputeInitiallyAndOnChange(this._store, value => {\n\t\t\t// This is to break the layout info <-> moved blocks lines part dependency cycle.\n\t\t\tthis._movedBlocksLinesPart.set(value, undefined);\n\t\t});\n\n\t\tthis._register(applyStyle(this.elements.overlay, {\n\t\t\twidth: this._layoutInfo.map((i, r) => i.originalEditor.width + (this._options.renderSideBySide.read(r) ? 0 : i.modifiedEditor.width)),\n\t\t\tvisibility: derived(reader => /** @description visibility */(this._options.hideUnchangedRegions.read(reader) && this._diffModel.read(reader)?.diff.read(reader)?.mappings.length === 0)\n\t\t\t\t? 'visible' : 'hidden'\n\t\t\t),\n\t\t}));\n\n\t\tthis._register(Event.runAndSubscribe(this._editors.modified.onDidChangeCursorPosition, (e) => {\n\t\t\tif (e?.reason === CursorChangeReason.Explicit) {\n\t\t\t\tconst diff = this._diffModel.get()?.diff.get()?.mappings.find(m => m.lineRangeMapping.modified.contains(e.position.lineNumber));\n\t\t\t\tif (diff?.lineRangeMapping.modified.isEmpty) {\n\t\t\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineDeleted, { source: 'diffEditor.cursorPositionChanged' });\n\t\t\t\t} else if (diff?.lineRangeMapping.original.isEmpty) {\n\t\t\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineInserted, { source: 'diffEditor.cursorPositionChanged' });\n\t\t\t\t} else if (diff) {\n\t\t\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineModified, { source: 'diffEditor.cursorPositionChanged' });\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tconst isInitializingDiff = this._diffModel.map(this, (m, reader) => {\n\t\t\t/** @isInitializingDiff isDiffUpToDate */\n\t\t\tif (!m) { return undefined; }\n\t\t\treturn m.diff.read(reader) === undefined && !m.isDiffUpToDate.read(reader);\n\t\t});\n\t\tthis._register(autorunWithStore((reader, store) => {\n\t\t\t/** @description DiffEditorWidgetHelper.ShowProgress */\n\t\t\tif (isInitializingDiff.read(reader) === true) {\n\t\t\t\tconst r = this._editorProgressService.show(true, 1000);\n\t\t\t\tstore.add(toDisposable(() => r.done()));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (this._shouldDisposeDiffModel) {\n\t\t\t\tthis._diffModel.get()?.dispose();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(new RevertButtonsFeature(this._editors, this._diffModel, this._options, this));\n\t}\n\n\tpublic getViewWidth(): number {\n\t\treturn this._rootSizeObserver.width.get();\n\t}\n\n\tpublic getContentHeight() {\n\t\treturn this._editors.modified.getContentHeight();\n\t}\n\n\tprotected _createInnerEditor(instantiationService: IInstantiationService, container: HTMLElement, options: Readonly<IEditorConstructionOptions>, editorWidgetOptions: ICodeEditorWidgetOptions): CodeEditorWidget {\n\t\tconst editor = instantiationService.createInstance(CodeEditorWidget, container, options, editorWidgetOptions);\n\t\treturn editor;\n\t}\n\n\tprivate readonly _layoutInfo = derived(this, reader => {\n\t\tconst width = this._rootSizeObserver.width.read(reader);\n\t\tconst height = this._rootSizeObserver.height.read(reader);\n\t\tconst sashLeft = this._sash.read(reader)?.sashLeft.read(reader);\n\n\t\tconst originalWidth = sashLeft ?? Math.max(5, this._editors.original.getLayoutInfo().decorationsLeft);\n\t\tconst modifiedWidth = width - originalWidth - (this._overviewRulerPart.read(reader)?.width ?? 0);\n\n\t\tconst movedBlocksLinesWidth = this._movedBlocksLinesPart.read(reader)?.width.read(reader) ?? 0;\n\t\tconst originalWidthWithoutMovedBlockLines = originalWidth - movedBlocksLinesWidth;\n\t\tthis.elements.original.style.width = originalWidthWithoutMovedBlockLines + 'px';\n\t\tthis.elements.original.style.left = '0px';\n\n\t\tthis.elements.modified.style.width = modifiedWidth + 'px';\n\t\tthis.elements.modified.style.left = originalWidth + 'px';\n\n\t\tthis._editors.original.layout({ width: originalWidthWithoutMovedBlockLines, height }, true);\n\t\tthis._editors.modified.layout({ width: modifiedWidth, height }, true);\n\n\t\treturn {\n\t\t\tmodifiedEditor: this._editors.modified.getLayoutInfo(),\n\t\t\toriginalEditor: this._editors.original.getLayoutInfo(),\n\t\t};\n\t});\n\n\tprivate _createDiffEditorContributions() {\n\t\tconst contributions: IDiffEditorContributionDescription[] = EditorExtensionsRegistry.getDiffEditorContributions();\n\t\tfor (const desc of contributions) {\n\t\t\ttry {\n\t\t\t\tthis._register(this._instantiationService.createInstance(desc.ctor, this));\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected override get _targetEditor(): CodeEditorWidget { return this._editors.modified; }\n\n\toverride getEditorType(): string { return EditorType.IDiffEditor; }\n\n\toverride onVisible(): void {\n\t\t// TODO: Only compute diffs when diff editor is visible\n\t\tthis._editors.original.onVisible();\n\t\tthis._editors.modified.onVisible();\n\t}\n\n\toverride onHide(): void {\n\t\tthis._editors.original.onHide();\n\t\tthis._editors.modified.onHide();\n\t}\n\n\toverride layout(dimension?: IDimension | undefined): void {\n\t\tthis._rootSizeObserver.observe(dimension);\n\t}\n\n\toverride hasTextFocus(): boolean { return this._editors.original.hasTextFocus() || this._editors.modified.hasTextFocus(); }\n\n\tpublic override saveViewState(): IDiffEditorViewState {\n\t\tconst originalViewState = this._editors.original.saveViewState();\n\t\tconst modifiedViewState = this._editors.modified.saveViewState();\n\t\treturn {\n\t\t\toriginal: originalViewState,\n\t\t\tmodified: modifiedViewState,\n\t\t\tmodelState: this._diffModel.get()?.serializeState(),\n\t\t};\n\t}\n\n\tpublic override restoreViewState(s: IDiffEditorViewState): void {\n\t\tif (s && s.original && s.modified) {\n\t\t\tconst diffEditorState = s as IDiffEditorViewState;\n\t\t\tthis._editors.original.restoreViewState(diffEditorState.original);\n\t\t\tthis._editors.modified.restoreViewState(diffEditorState.modified);\n\t\t\tif (diffEditorState.modelState) {\n\t\t\t\tthis._diffModel.get()?.restoreSerializedState(diffEditorState.modelState as any);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic handleInitialized(): void {\n\t\tthis._editors.original.handleInitialized();\n\t\tthis._editors.modified.handleInitialized();\n\t}\n\n\tpublic createViewModel(model: IDiffEditorModel): IDiffEditorViewModel {\n\t\treturn this._instantiationService.createInstance(DiffEditorViewModel, model, this._options);\n\t}\n\n\toverride getModel(): IDiffEditorModel | null { return this._diffModel.get()?.model ?? null; }\n\n\toverride setModel(model: IDiffEditorModel | null | IDiffEditorViewModel, tx?: ITransaction): void {\n\t\tif (!model && this._diffModel.get()) {\n\t\t\t// Transitioning from a model to no-model\n\t\t\tthis._accessibleDiffViewer.get().close();\n\t\t}\n\n\t\tconst vm = model ? ('model' in model) ? { model, shouldDispose: false } : { model: this.createViewModel(model), shouldDispose: true } : undefined;\n\n\t\tif (this._diffModel.get() !== vm?.model) {\n\t\t\tsubtransaction(tx, tx => {\n\t\t\t\t/** @description DiffEditorWidget.setModel */\n\t\t\t\tobservableFromEvent.batchEventsGlobally(tx, () => {\n\t\t\t\t\tthis._editors.original.setModel(vm ? vm.model.model.original : null);\n\t\t\t\t\tthis._editors.modified.setModel(vm ? vm.model.model.modified : null);\n\t\t\t\t});\n\t\t\t\tconst prevValue = this._diffModel.get();\n\t\t\t\tconst shouldDispose = this._shouldDisposeDiffModel;\n\n\t\t\t\tthis._shouldDisposeDiffModel = vm?.shouldDispose ?? false;\n\t\t\t\tthis._diffModel.set(vm?.model as (DiffEditorViewModel | undefined), tx);\n\n\t\t\t\tif (shouldDispose) {\n\t\t\t\t\tprevValue?.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @param changedOptions Only has values for top-level options that have actually changed.\n\t */\n\toverride updateOptions(changedOptions: IDiffEditorOptions): void {\n\t\tthis._options.updateOptions(changedOptions);\n\t}\n\n\tgetContainerDomNode(): HTMLElement { return this._domElement; }\n\tgetOriginalEditor(): ICodeEditor { return this._editors.original; }\n\tgetModifiedEditor(): ICodeEditor { return this._editors.modified; }\n\n\tsetBoundarySashes(sashes: IBoundarySashes): void {\n\t\tthis._boundarySashes.set(sashes, undefined);\n\t}\n\n\tprivate readonly _diffValue = this._diffModel.map((m, r) => m?.diff.read(r));\n\treadonly onDidUpdateDiff: Event<void> = Event.fromObservableLight(this._diffValue);\n\n\tget ignoreTrimWhitespace(): boolean { return this._options.ignoreTrimWhitespace.get(); }\n\n\tget maxComputationTime(): number { return this._options.maxComputationTimeMs.get(); }\n\n\tget renderSideBySide(): boolean { return this._options.renderSideBySide.get(); }\n\n\t/**\n\t * @deprecated Use `this.getDiffComputationResult().changes2` instead.\n\t */\n\tgetLineChanges(): ILineChange[] | null {\n\t\tconst diffState = this._diffModel.get()?.diff.get();\n\t\tif (!diffState) { return null; }\n\t\treturn toLineChanges(diffState);\n\t}\n\n\tgetDiffComputationResult(): IDiffComputationResult | null {\n\t\tconst diffState = this._diffModel.get()?.diff.get();\n\t\tif (!diffState) { return null; }\n\n\t\treturn {\n\t\t\tchanges: this.getLineChanges()!,\n\t\t\tchanges2: diffState.mappings.map(m => m.lineRangeMapping),\n\t\t\tidentical: diffState.identical,\n\t\t\tquitEarly: diffState.quitEarly,\n\t\t};\n\t}\n\n\trevert(diff: DetailedLineRangeMapping): void {\n\t\tif (diff.innerChanges) {\n\t\t\tthis.revertRangeMappings(diff.innerChanges);\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._diffModel.get();\n\t\tif (!model || !model.isDiffUpToDate.get()) { return; }\n\n\t\tthis._editors.modified.executeEdits('diffEditor', [\n\t\t\t{\n\t\t\t\trange: diff.modified.toExclusiveRange(),\n\t\t\t\ttext: model.model.original.getValueInRange(diff.original.toExclusiveRange())\n\t\t\t}\n\t\t]);\n\t}\n\n\trevertRangeMappings(diffs: RangeMapping[]): void {\n\t\tconst model = this._diffModel.get();\n\t\tif (!model || !model.isDiffUpToDate.get()) { return; }\n\n\t\tconst changes: IIdentifiedSingleEditOperation[] = diffs.map<IIdentifiedSingleEditOperation>(c => ({\n\t\t\trange: c.modifiedRange,\n\t\t\ttext: model.model.original.getValueInRange(c.originalRange)\n\t\t}));\n\n\t\tthis._editors.modified.executeEdits('diffEditor', changes);\n\t}\n\n\tprivate _goTo(diff: DiffMapping): void {\n\t\tthis._editors.modified.setPosition(new Position(diff.lineRangeMapping.modified.startLineNumber, 1));\n\t\tthis._editors.modified.revealRangeInCenter(diff.lineRangeMapping.modified.toExclusiveRange());\n\t}\n\n\tgoToDiff(target: 'previous' | 'next'): void {\n\t\tconst diffs = this._diffModel.get()?.diff.get()?.mappings;\n\t\tif (!diffs || diffs.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst curLineNumber = this._editors.modified.getPosition()!.lineNumber;\n\n\t\tlet diff: DiffMapping | undefined;\n\t\tif (target === 'next') {\n\t\t\tdiff = diffs.find(d => d.lineRangeMapping.modified.startLineNumber > curLineNumber) ?? diffs[0];\n\t\t} else {\n\t\t\tdiff = findLast(diffs, d => d.lineRangeMapping.modified.startLineNumber < curLineNumber) ?? diffs[diffs.length - 1];\n\t\t}\n\t\tthis._goTo(diff);\n\n\t\tif (diff.lineRangeMapping.modified.isEmpty) {\n\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineDeleted, { source: 'diffEditor.goToDiff' });\n\t\t} else if (diff.lineRangeMapping.original.isEmpty) {\n\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineInserted, { source: 'diffEditor.goToDiff' });\n\t\t} else if (diff) {\n\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineModified, { source: 'diffEditor.goToDiff' });\n\t\t}\n\t}\n\n\trevealFirstDiff(): void {\n\t\tconst diffModel = this._diffModel.get();\n\t\tif (!diffModel) {\n\t\t\treturn;\n\t\t}\n\t\t// wait for the diff computation to finish\n\t\tthis.waitForDiff().then(() => {\n\t\t\tconst diffs = diffModel.diff.get()?.mappings;\n\t\t\tif (!diffs || diffs.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._goTo(diffs[0]);\n\t\t});\n\t}\n\n\taccessibleDiffViewerNext(): void { this._accessibleDiffViewer.get().next(); }\n\n\taccessibleDiffViewerPrev(): void { this._accessibleDiffViewer.get().prev(); }\n\n\tasync waitForDiff(): Promise<void> {\n\t\tconst diffModel = this._diffModel.get();\n\t\tif (!diffModel) { return; }\n\t\tawait diffModel.waitForDiff();\n\t}\n\n\tmapToOtherSide(): { destination: CodeEditorWidget; destinationSelection: Range | undefined } {\n\t\tconst isModifiedFocus = this._editors.modified.hasWidgetFocus();\n\t\tconst source = isModifiedFocus ? this._editors.modified : this._editors.original;\n\t\tconst destination = isModifiedFocus ? this._editors.original : this._editors.modified;\n\n\t\tlet destinationSelection: Range | undefined;\n\n\t\tconst sourceSelection = source.getSelection();\n\t\tif (sourceSelection) {\n\t\t\tconst mappings = this._diffModel.get()?.diff.get()?.mappings.map(m => isModifiedFocus ? m.lineRangeMapping.flip() : m.lineRangeMapping);\n\t\t\tif (mappings) {\n\t\t\t\tconst newRange1 = translatePosition(sourceSelection.getStartPosition(), mappings);\n\t\t\t\tconst newRange2 = translatePosition(sourceSelection.getEndPosition(), mappings);\n\t\t\t\tdestinationSelection = Range.plusRange(newRange1, newRange2);\n\t\t\t}\n\t\t}\n\t\treturn { destination, destinationSelection };\n\t}\n\n\tswitchSide(): void {\n\t\tconst { destination, destinationSelection } = this.mapToOtherSide();\n\t\tdestination.focus();\n\t\tif (destinationSelection) {\n\t\t\tdestination.setSelection(destinationSelection);\n\t\t}\n\t}\n\n\texitCompareMove(): void {\n\t\tconst model = this._diffModel.get();\n\t\tif (!model) { return; }\n\t\tmodel.movedTextToCompare.set(undefined, undefined);\n\t}\n\n\tcollapseAllUnchangedRegions(): void {\n\t\tconst unchangedRegions = this._diffModel.get()?.unchangedRegions.get();\n\t\tif (!unchangedRegions) { return; }\n\t\ttransaction(tx => {\n\t\t\tfor (const region of unchangedRegions) {\n\t\t\t\tregion.collapseAll(tx);\n\t\t\t}\n\t\t});\n\t}\n\n\tshowAllUnchangedRegions(): void {\n\t\tconst unchangedRegions = this._diffModel.get()?.unchangedRegions.get();\n\t\tif (!unchangedRegions) { return; }\n\t\ttransaction(tx => {\n\t\t\tfor (const region of unchangedRegions) {\n\t\t\t\tregion.showAll(tx);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction toLineChanges(state: DiffState): ILineChange[] {\n\treturn state.mappings.map(x => {\n\t\tconst m = x.lineRangeMapping;\n\t\tlet originalStartLineNumber: number;\n\t\tlet originalEndLineNumber: number;\n\t\tlet modifiedStartLineNumber: number;\n\t\tlet modifiedEndLineNumber: number;\n\t\tlet innerChanges = m.innerChanges;\n\n\t\tif (m.original.isEmpty) {\n\t\t\t// Insertion\n\t\t\toriginalStartLineNumber = m.original.startLineNumber - 1;\n\t\t\toriginalEndLineNumber = 0;\n\t\t\tinnerChanges = undefined;\n\t\t} else {\n\t\t\toriginalStartLineNumber = m.original.startLineNumber;\n\t\t\toriginalEndLineNumber = m.original.endLineNumberExclusive - 1;\n\t\t}\n\n\t\tif (m.modified.isEmpty) {\n\t\t\t// Deletion\n\t\t\tmodifiedStartLineNumber = m.modified.startLineNumber - 1;\n\t\t\tmodifiedEndLineNumber = 0;\n\t\t\tinnerChanges = undefined;\n\t\t} else {\n\t\t\tmodifiedStartLineNumber = m.modified.startLineNumber;\n\t\t\tmodifiedEndLineNumber = m.modified.endLineNumberExclusive - 1;\n\t\t}\n\n\t\treturn {\n\t\t\toriginalStartLineNumber,\n\t\t\toriginalEndLineNumber,\n\t\t\tmodifiedStartLineNumber,\n\t\t\tmodifiedEndLineNumber,\n\t\t\tcharChanges: innerChanges?.map(m => ({\n\t\t\t\toriginalStartLineNumber: m.originalRange.startLineNumber,\n\t\t\t\toriginalStartColumn: m.originalRange.startColumn,\n\t\t\t\toriginalEndLineNumber: m.originalRange.endLineNumber,\n\t\t\t\toriginalEndColumn: m.originalRange.endColumn,\n\t\t\t\tmodifiedStartLineNumber: m.modifiedRange.startLineNumber,\n\t\t\t\tmodifiedStartColumn: m.modifiedRange.startColumn,\n\t\t\t\tmodifiedEndLineNumber: m.modifiedRange.endLineNumber,\n\t\t\t\tmodifiedEndColumn: m.modifiedRange.endColumn,\n\t\t\t}))\n\t\t};\n\t});\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, getWindow, h } from '../../../../base/browser/dom';\nimport { IBoundarySashes } from '../../../../base/browser/ui/sash/sash';\nimport { findLast } from '../../../../base/common/arraysFind';\nimport { onUnexpectedError } from '../../../../base/common/errors';\nimport { Event } from '../../../../base/common/event';\nimport { toDisposable } from '../../../../base/common/lifecycle';\nimport { IObservable, ITransaction, autorun, autorunWithStore, derived, observableFromEvent, observableValue, recomputeInitiallyAndOnChange, subtransaction, transaction } from '../../../../base/common/observable';\nimport { derivedDisposable } from '../../../../base/common/observableInternal/derived';\nimport './style.css';\nimport { IEditorConstructionOptions } from '../../config/editorConfiguration';\nimport { ICodeEditor, IDiffEditor, IDiffEditorConstructionOptions } from '../../editorBrowser';\nimport { EditorExtensionsRegistry, IDiffEditorContributionDescription } from '../../editorExtensions';\nimport { ICodeEditorService } from '../../services/codeEditorService';\nimport { StableEditorScrollState } from '../../stableEditorScroll';\nimport { CodeEditorWidget, ICodeEditorWidgetOptions } from '../codeEditorWidget';\nimport { AccessibleDiffViewer, AccessibleDiffViewerModelFromEditors } from './components/accessibleDiffViewer';\nimport { DiffEditorDecorations } from './components/diffEditorDecorations';\nimport { DiffEditorSash } from './components/diffEditorSash';\nimport { HideUnchangedRegionsFeature } from './features/hideUnchangedRegionsFeature';\nimport { DiffEditorViewZones } from './components/diffEditorViewZones/diffEditorViewZones';\nimport { MovedBlocksLinesFeature } from './features/movedBlocksLinesFeature';\nimport { OverviewRulerFeature } from './features/overviewRulerFeature';\nimport { CSSStyle, ObservableElementSizeObserver, applyStyle, applyViewZones, bindContextKey, readHotReloadableExport, translatePosition } from './utils';\nimport { IDiffEditorOptions } from '../../../common/config/editorOptions';\nimport { IDimension } from '../../../common/core/dimension';\nimport { Position } from '../../../common/core/position';\nimport { Range } from '../../../common/core/range';\nimport { CursorChangeReason } from '../../../common/cursorEvents';\nimport { IDiffComputationResult, ILineChange } from '../../../common/diff/legacyLinesDiffComputer';\nimport { DetailedLineRangeMapping, RangeMapping } from '../../../common/diff/rangeMapping';\nimport { EditorType, IDiffEditorModel, IDiffEditorViewModel, IDiffEditorViewState } from '../../../common/editorCommon';\nimport { EditorContextKeys } from '../../../common/editorContextKeys';\nimport { IIdentifiedSingleEditOperation } from '../../../common/model';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection';\nimport { IEditorProgressService } from '../../../../platform/progress/common/progress';\nimport { DelegatingEditor } from './delegatingEditorImpl';\nimport { DiffEditorEditors } from './components/diffEditorEditors';\nimport { DiffEditorOptions } from './diffEditorOptions';\nimport { DiffEditorViewModel, DiffMapping, DiffState } from './diffEditorViewModel';\nimport { RevertButtonsFeature } from './features/revertButtonsFeature';\n\nexport interface IDiffCodeEditorWidgetOptions {\n\toriginalEditor?: ICodeEditorWidgetOptions;\n\tmodifiedEditor?: ICodeEditorWidgetOptions;\n}\n\nexport class DiffEditorWidget extends DelegatingEditor implements IDiffEditor {\n\tpublic static ENTIRE_DIFF_OVERVIEW_WIDTH = OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH;\n\n\tprivate readonly elements = h('div.monaco-diff-editor.side-by-side', { style: { position: 'relative', height: '100%' } }, [\n\t\th('div.noModificationsOverlay@overlay', { style: { position: 'absolute', height: '100%', visibility: 'hidden', } }, [$('span', {}, 'No Changes')]),\n\t\th('div.editor.original@original', { style: { position: 'absolute', height: '100%' } }),\n\t\th('div.editor.modified@modified', { style: { position: 'absolute', height: '100%' } }),\n\t\th('div.accessibleDiffViewer@accessibleDiffViewer', { style: { position: 'absolute', height: '100%' } }),\n\t]);\n\tprivate readonly _diffModel = observableValue<DiffEditorViewModel | undefined>(this, undefined);\n\tprivate _shouldDisposeDiffModel = false;\n\tpublic readonly onDidChangeModel = Event.fromObservableLight(this._diffModel);\n\n\tpublic get onDidContentSizeChange() { return this._editors.onDidContentSizeChange; }\n\n\tprivate readonly _contextKeyService = this._register(this._parentContextKeyService.createScoped(this._domElement));\n\tprivate readonly _instantiationService = this._parentInstantiationService.createChild(\n\t\tnew ServiceCollection([IContextKeyService, this._contextKeyService])\n\t);\n\tprivate readonly _rootSizeObserver: ObservableElementSizeObserver;\n\n\tprivate readonly _sash: IObservable<DiffEditorSash | undefined>;\n\tprivate readonly _boundarySashes = observableValue<IBoundarySashes | undefined>(this, undefined);\n\n\tprivate _accessibleDiffViewerShouldBeVisible = observableValue(this, false);\n\tprivate _accessibleDiffViewerVisible = derived(this, reader =>\n\t\tthis._options.onlyShowAccessibleDiffViewer.read(reader)\n\t\t\t? true\n\t\t\t: this._accessibleDiffViewerShouldBeVisible.read(reader)\n\t);\n\tprivate readonly _accessibleDiffViewer: IObservable<AccessibleDiffViewer>;\n\tprivate readonly _options: DiffEditorOptions;\n\tprivate readonly _editors: DiffEditorEditors;\n\n\tprivate readonly _overviewRulerPart: IObservable<OverviewRulerFeature | undefined>;\n\tprivate readonly _movedBlocksLinesPart = observableValue<MovedBlocksLinesFeature | undefined>(this, undefined);\n\n\tpublic get collapseUnchangedRegions() { return this._options.hideUnchangedRegions.get(); }\n\n\tconstructor(\n\t\tprivate readonly _domElement: HTMLElement,\n\t\toptions: Readonly<IDiffEditorConstructionOptions>,\n\t\tcodeEditorWidgetOptions: IDiffCodeEditorWidgetOptions,\n\t\t@IContextKeyService private readonly _parentContextKeyService: IContextKeyService,\n\t\t@IInstantiationService private readonly _parentInstantiationService: IInstantiationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IAccessibilitySignalService private readonly _accessibilitySignalService: IAccessibilitySignalService,\n\t\t@IEditorProgressService private readonly _editorProgressService: IEditorProgressService,\n\t) {\n\t\tsuper();\n\t\tcodeEditorService.willCreateDiffEditor();\n\n\t\tthis._contextKeyService.createKey('isInDiffEditor', true);\n\n\t\tthis._domElement.appendChild(this.elements.root);\n\t\tthis._register(toDisposable(() => this._domElement.removeChild(this.elements.root)));\n\n\t\tthis._rootSizeObserver = this._register(new ObservableElementSizeObserver(this.elements.root, options.dimension));\n\t\tthis._rootSizeObserver.setAutomaticLayout(options.automaticLayout ?? false);\n\n\t\tthis._options = new DiffEditorOptions(options);\n\t\tthis._register(autorun(reader => {\n\t\t\tthis._options.setWidth(this._rootSizeObserver.width.read(reader));\n\t\t}));\n\n\t\tthis._contextKeyService.createKey(EditorContextKeys.isEmbeddedDiffEditor.key, false);\n\t\tthis._register(bindContextKey(EditorContextKeys.isEmbeddedDiffEditor, this._contextKeyService,\n\t\t\treader => this._options.isInEmbeddedEditor.read(reader)\n\t\t));\n\t\tthis._register(bindContextKey(EditorContextKeys.comparingMovedCode, this._contextKeyService,\n\t\t\treader => !!this._diffModel.read(reader)?.movedTextToCompare.read(reader)\n\t\t));\n\t\tthis._register(bindContextKey(EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached, this._contextKeyService,\n\t\t\treader => this._options.couldShowInlineViewBecauseOfSize.read(reader)\n\t\t));\n\n\t\tthis._register(bindContextKey(EditorContextKeys.hasChanges, this._contextKeyService,\n\t\t\treader => (this._diffModel.read(reader)?.diff.read(reader)?.mappings.length ?? 0) > 0\n\t\t));\n\n\t\tthis._editors = this._register(this._instantiationService.createInstance(\n\t\t\tDiffEditorEditors,\n\t\t\tthis.elements.original,\n\t\t\tthis.elements.modified,\n\t\t\tthis._options,\n\t\t\tcodeEditorWidgetOptions,\n\t\t\t(i, c, o, o2) => this._createInnerEditor(i, c, o, o2),\n\t\t));\n\n\t\tthis._overviewRulerPart = derivedDisposable(this, reader =>\n\t\t\t!this._options.renderOverviewRuler.read(reader)\n\t\t\t\t? undefined\n\t\t\t\t: this._instantiationService.createInstance(\n\t\t\t\t\treadHotReloadableExport(OverviewRulerFeature, reader),\n\t\t\t\t\tthis._editors,\n\t\t\t\t\tthis.elements.root,\n\t\t\t\t\tthis._diffModel,\n\t\t\t\t\tthis._rootSizeObserver.width,\n\t\t\t\t\tthis._rootSizeObserver.height,\n\t\t\t\t\tthis._layoutInfo.map(i => i.modifiedEditor),\n\t\t\t\t)\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\n\t\tthis._sash = derivedDisposable(this, reader => {\n\t\t\tconst showSash = this._options.renderSideBySide.read(reader);\n\t\t\tthis.elements.root.classList.toggle('side-by-side', showSash);\n\t\t\treturn !showSash ? undefined : new DiffEditorSash(\n\t\t\t\tthis._options,\n\t\t\t\tthis.elements.root,\n\t\t\t\t{\n\t\t\t\t\theight: this._rootSizeObserver.height,\n\t\t\t\t\twidth: this._rootSizeObserver.width.map((w, reader) => w - (this._overviewRulerPart.read(reader)?.width ?? 0)),\n\t\t\t\t},\n\t\t\t\tthis._boundarySashes,\n\t\t\t);\n\t\t}).recomputeInitiallyAndOnChange(this._store);\n\n\t\tconst unchangedRangesFeature = derivedDisposable(this, reader => /** @description UnchangedRangesFeature */\n\t\t\tthis._instantiationService.createInstance(\n\t\t\t\treadHotReloadableExport(HideUnchangedRegionsFeature, reader),\n\t\t\t\tthis._editors, this._diffModel, this._options\n\t\t\t)\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\n\t\tderivedDisposable(this, reader => /** @description DiffEditorDecorations */\n\t\t\tthis._instantiationService.createInstance(\n\t\t\t\treadHotReloadableExport(DiffEditorDecorations, reader),\n\t\t\t\tthis._editors, this._diffModel, this._options, this,\n\t\t\t)\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\n\t\tconst origViewZoneIdsToIgnore = new Set<string>();\n\t\tconst modViewZoneIdsToIgnore = new Set<string>();\n\t\tlet isUpdatingViewZones = false;\n\t\tconst viewZoneManager = derivedDisposable(this, reader => /** @description ViewZoneManager */\n\t\t\tthis._instantiationService.createInstance(\n\t\t\t\treadHotReloadableExport(DiffEditorViewZones, reader),\n\t\t\t\tgetWindow(this._domElement),\n\t\t\t\tthis._editors,\n\t\t\t\tthis._diffModel,\n\t\t\t\tthis._options,\n\t\t\t\tthis,\n\t\t\t\t() => isUpdatingViewZones || unchangedRangesFeature.get().isUpdatingHiddenAreas,\n\t\t\t\torigViewZoneIdsToIgnore,\n\t\t\t\tmodViewZoneIdsToIgnore\n\t\t\t)\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\n\t\tconst originalViewZones = derived(this, (reader) => { /** @description originalViewZones */\n\t\t\tconst orig = viewZoneManager.read(reader).viewZones.read(reader).orig;\n\t\t\tconst orig2 = unchangedRangesFeature.read(reader).viewZones.read(reader).origViewZones;\n\t\t\treturn orig.concat(orig2);\n\t\t});\n\t\tconst modifiedViewZones = derived(this, (reader) => { /** @description modifiedViewZones */\n\t\t\tconst mod = viewZoneManager.read(reader).viewZones.read(reader).mod;\n\t\t\tconst mod2 = unchangedRangesFeature.read(reader).viewZones.read(reader).modViewZones;\n\t\t\treturn mod.concat(mod2);\n\t\t});\n\t\tthis._register(applyViewZones(this._editors.original, originalViewZones, isUpdatingOrigViewZones => {\n\t\t\tisUpdatingViewZones = isUpdatingOrigViewZones;\n\t\t}, origViewZoneIdsToIgnore));\n\t\tlet scrollState: StableEditorScrollState | undefined;\n\t\tthis._register(applyViewZones(this._editors.modified, modifiedViewZones, isUpdatingModViewZones => {\n\t\t\tisUpdatingViewZones = isUpdatingModViewZones;\n\t\t\tif (isUpdatingViewZones) {\n\t\t\t\tscrollState = StableEditorScrollState.capture(this._editors.modified);\n\t\t\t} else {\n\t\t\t\tscrollState?.restore(this._editors.modified);\n\t\t\t\tscrollState = undefined;\n\t\t\t}\n\t\t}, modViewZoneIdsToIgnore));\n\n\t\tthis._accessibleDiffViewer = derivedDisposable(this, reader =>\n\t\t\tthis._instantiationService.createInstance(\n\t\t\t\treadHotReloadableExport(AccessibleDiffViewer, reader),\n\t\t\t\tthis.elements.accessibleDiffViewer,\n\t\t\t\tthis._accessibleDiffViewerVisible,\n\t\t\t\t(visible, tx) => this._accessibleDiffViewerShouldBeVisible.set(visible, tx),\n\t\t\t\tthis._options.onlyShowAccessibleDiffViewer.map(v => !v),\n\t\t\t\tthis._rootSizeObserver.width,\n\t\t\t\tthis._rootSizeObserver.height,\n\t\t\t\tthis._diffModel.map((m, r) => m?.diff.read(r)?.mappings.map(m => m.lineRangeMapping)),\n\t\t\t\tnew AccessibleDiffViewerModelFromEditors(this._editors),\n\t\t\t)\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\n\t\tconst visibility = this._accessibleDiffViewerVisible.map<CSSStyle['visibility']>(v => v ? 'hidden' : 'visible');\n\t\tthis._register(applyStyle(this.elements.modified, { visibility }));\n\t\tthis._register(applyStyle(this.elements.original, { visibility }));\n\n\t\tthis._createDiffEditorContributions();\n\n\t\tcodeEditorService.addDiffEditor(this);\n\n\t\tthis._register(recomputeInitiallyAndOnChange(this._layoutInfo));\n\n\t\tderivedDisposable(this, reader => /** @description MovedBlocksLinesPart */\n\t\t\tnew (readHotReloadableExport(MovedBlocksLinesFeature, reader))(\n\t\t\t\tthis.elements.root,\n\t\t\t\tthis._diffModel,\n\t\t\t\tthis._layoutInfo.map(i => i.originalEditor),\n\t\t\t\tthis._layoutInfo.map(i => i.modifiedEditor),\n\t\t\t\tthis._editors,\n\t\t\t)\n\t\t).recomputeInitiallyAndOnChange(this._store, value => {\n\t\t\t// This is to break the layout info <-> moved blocks lines part dependency cycle.\n\t\t\tthis._movedBlocksLinesPart.set(value, undefined);\n\t\t});\n\n\t\tthis._register(applyStyle(this.elements.overlay, {\n\t\t\twidth: this._layoutInfo.map((i, r) => i.originalEditor.width + (this._options.renderSideBySide.read(r) ? 0 : i.modifiedEditor.width)),\n\t\t\tvisibility: derived(reader => /** @description visibility */(this._options.hideUnchangedRegions.read(reader) && this._diffModel.read(reader)?.diff.read(reader)?.mappings.length === 0)\n\t\t\t\t? 'visible' : 'hidden'\n\t\t\t),\n\t\t}));\n\n\t\tthis._register(Event.runAndSubscribe(this._editors.modified.onDidChangeCursorPosition, (e) => {\n\t\t\tif (e?.reason === CursorChangeReason.Explicit) {\n\t\t\t\tconst diff = this._diffModel.get()?.diff.get()?.mappings.find(m => m.lineRangeMapping.modified.contains(e.position.lineNumber));\n\t\t\t\tif (diff?.lineRangeMapping.modified.isEmpty) {\n\t\t\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineDeleted, { source: 'diffEditor.cursorPositionChanged' });\n\t\t\t\t} else if (diff?.lineRangeMapping.original.isEmpty) {\n\t\t\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineInserted, { source: 'diffEditor.cursorPositionChanged' });\n\t\t\t\t} else if (diff) {\n\t\t\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineModified, { source: 'diffEditor.cursorPositionChanged' });\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tconst isInitializingDiff = this._diffModel.map(this, (m, reader) => {\n\t\t\t/** @isInitializingDiff isDiffUpToDate */\n\t\t\tif (!m) { return undefined; }\n\t\t\treturn m.diff.read(reader) === undefined && !m.isDiffUpToDate.read(reader);\n\t\t});\n\t\tthis._register(autorunWithStore((reader, store) => {\n\t\t\t/** @description DiffEditorWidgetHelper.ShowProgress */\n\t\t\tif (isInitializingDiff.read(reader) === true) {\n\t\t\t\tconst r = this._editorProgressService.show(true, 1000);\n\t\t\t\tstore.add(toDisposable(() => r.done()));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (this._shouldDisposeDiffModel) {\n\t\t\t\tthis._diffModel.get()?.dispose();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(new RevertButtonsFeature(this._editors, this._diffModel, this._options, this));\n\t}\n\n\tpublic getViewWidth(): number {\n\t\treturn this._rootSizeObserver.width.get();\n\t}\n\n\tpublic getContentHeight() {\n\t\treturn this._editors.modified.getContentHeight();\n\t}\n\n\tprotected _createInnerEditor(instantiationService: IInstantiationService, container: HTMLElement, options: Readonly<IEditorConstructionOptions>, editorWidgetOptions: ICodeEditorWidgetOptions): CodeEditorWidget {\n\t\tconst editor = instantiationService.createInstance(CodeEditorWidget, container, options, editorWidgetOptions);\n\t\treturn editor;\n\t}\n\n\tprivate readonly _layoutInfo = derived(this, reader => {\n\t\tconst width = this._rootSizeObserver.width.read(reader);\n\t\tconst height = this._rootSizeObserver.height.read(reader);\n\t\tconst sashLeft = this._sash.read(reader)?.sashLeft.read(reader);\n\n\t\tconst originalWidth = sashLeft ?? Math.max(5, this._editors.original.getLayoutInfo().decorationsLeft);\n\t\tconst modifiedWidth = width - originalWidth - (this._overviewRulerPart.read(reader)?.width ?? 0);\n\n\t\tconst movedBlocksLinesWidth = this._movedBlocksLinesPart.read(reader)?.width.read(reader) ?? 0;\n\t\tconst originalWidthWithoutMovedBlockLines = originalWidth - movedBlocksLinesWidth;\n\t\tthis.elements.original.style.width = originalWidthWithoutMovedBlockLines + 'px';\n\t\tthis.elements.original.style.left = '0px';\n\n\t\tthis.elements.modified.style.width = modifiedWidth + 'px';\n\t\tthis.elements.modified.style.left = originalWidth + 'px';\n\n\t\tthis._editors.original.layout({ width: originalWidthWithoutMovedBlockLines, height }, true);\n\t\tthis._editors.modified.layout({ width: modifiedWidth, height }, true);\n\n\t\treturn {\n\t\t\tmodifiedEditor: this._editors.modified.getLayoutInfo(),\n\t\t\toriginalEditor: this._editors.original.getLayoutInfo(),\n\t\t};\n\t});\n\n\tprivate _createDiffEditorContributions() {\n\t\tconst contributions: IDiffEditorContributionDescription[] = EditorExtensionsRegistry.getDiffEditorContributions();\n\t\tfor (const desc of contributions) {\n\t\t\ttry {\n\t\t\t\tthis._register(this._instantiationService.createInstance(desc.ctor, this));\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected override get _targetEditor(): CodeEditorWidget { return this._editors.modified; }\n\n\toverride getEditorType(): string { return EditorType.IDiffEditor; }\n\n\toverride onVisible(): void {\n\t\t// TODO: Only compute diffs when diff editor is visible\n\t\tthis._editors.original.onVisible();\n\t\tthis._editors.modified.onVisible();\n\t}\n\n\toverride onHide(): void {\n\t\tthis._editors.original.onHide();\n\t\tthis._editors.modified.onHide();\n\t}\n\n\toverride layout(dimension?: IDimension | undefined): void {\n\t\tthis._rootSizeObserver.observe(dimension);\n\t}\n\n\toverride hasTextFocus(): boolean { return this._editors.original.hasTextFocus() || this._editors.modified.hasTextFocus(); }\n\n\tpublic override saveViewState(): IDiffEditorViewState {\n\t\tconst originalViewState = this._editors.original.saveViewState();\n\t\tconst modifiedViewState = this._editors.modified.saveViewState();\n\t\treturn {\n\t\t\toriginal: originalViewState,\n\t\t\tmodified: modifiedViewState,\n\t\t\tmodelState: this._diffModel.get()?.serializeState(),\n\t\t};\n\t}\n\n\tpublic override restoreViewState(s: IDiffEditorViewState): void {\n\t\tif (s && s.original && s.modified) {\n\t\t\tconst diffEditorState = s as IDiffEditorViewState;\n\t\t\tthis._editors.original.restoreViewState(diffEditorState.original);\n\t\t\tthis._editors.modified.restoreViewState(diffEditorState.modified);\n\t\t\tif (diffEditorState.modelState) {\n\t\t\t\tthis._diffModel.get()?.restoreSerializedState(diffEditorState.modelState as any);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic handleInitialized(): void {\n\t\tthis._editors.original.handleInitialized();\n\t\tthis._editors.modified.handleInitialized();\n\t}\n\n\tpublic createViewModel(model: IDiffEditorModel): IDiffEditorViewModel {\n\t\treturn this._instantiationService.createInstance(DiffEditorViewModel, model, this._options);\n\t}\n\n\toverride getModel(): IDiffEditorModel | null { return this._diffModel.get()?.model ?? null; }\n\n\toverride setModel(model: IDiffEditorModel | null | IDiffEditorViewModel, tx?: ITransaction): void {\n\t\tif (!model && this._diffModel.get()) {\n\t\t\t// Transitioning from a model to no-model\n\t\t\tthis._accessibleDiffViewer.get().close();\n\t\t}\n\n\t\tconst vm = model ? ('model' in model) ? { model, shouldDispose: false } : { model: this.createViewModel(model), shouldDispose: true } : undefined;\n\n\t\tif (this._diffModel.get() !== vm?.model) {\n\t\t\tsubtransaction(tx, tx => {\n\t\t\t\t/** @description DiffEditorWidget.setModel */\n\t\t\t\tobservableFromEvent.batchEventsGlobally(tx, () => {\n\t\t\t\t\tthis._editors.original.setModel(vm ? vm.model.model.original : null);\n\t\t\t\t\tthis._editors.modified.setModel(vm ? vm.model.model.modified : null);\n\t\t\t\t});\n\t\t\t\tconst prevValue = this._diffModel.get();\n\t\t\t\tconst shouldDispose = this._shouldDisposeDiffModel;\n\n\t\t\t\tthis._shouldDisposeDiffModel = vm?.shouldDispose ?? false;\n\t\t\t\tthis._diffModel.set(vm?.model as (DiffEditorViewModel | undefined), tx);\n\n\t\t\t\tif (shouldDispose) {\n\t\t\t\t\tprevValue?.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @param changedOptions Only has values for top-level options that have actually changed.\n\t */\n\toverride updateOptions(changedOptions: IDiffEditorOptions): void {\n\t\tthis._options.updateOptions(changedOptions);\n\t}\n\n\tgetContainerDomNode(): HTMLElement { return this._domElement; }\n\tgetOriginalEditor(): ICodeEditor { return this._editors.original; }\n\tgetModifiedEditor(): ICodeEditor { return this._editors.modified; }\n\n\tsetBoundarySashes(sashes: IBoundarySashes): void {\n\t\tthis._boundarySashes.set(sashes, undefined);\n\t}\n\n\tprivate readonly _diffValue = this._diffModel.map((m, r) => m?.diff.read(r));\n\treadonly onDidUpdateDiff: Event<void> = Event.fromObservableLight(this._diffValue);\n\n\tget ignoreTrimWhitespace(): boolean { return this._options.ignoreTrimWhitespace.get(); }\n\n\tget maxComputationTime(): number { return this._options.maxComputationTimeMs.get(); }\n\n\tget renderSideBySide(): boolean { return this._options.renderSideBySide.get(); }\n\n\t/**\n\t * @deprecated Use `this.getDiffComputationResult().changes2` instead.\n\t */\n\tgetLineChanges(): ILineChange[] | null {\n\t\tconst diffState = this._diffModel.get()?.diff.get();\n\t\tif (!diffState) { return null; }\n\t\treturn toLineChanges(diffState);\n\t}\n\n\tgetDiffComputationResult(): IDiffComputationResult | null {\n\t\tconst diffState = this._diffModel.get()?.diff.get();\n\t\tif (!diffState) { return null; }\n\n\t\treturn {\n\t\t\tchanges: this.getLineChanges()!,\n\t\t\tchanges2: diffState.mappings.map(m => m.lineRangeMapping),\n\t\t\tidentical: diffState.identical,\n\t\t\tquitEarly: diffState.quitEarly,\n\t\t};\n\t}\n\n\trevert(diff: DetailedLineRangeMapping): void {\n\t\tif (diff.innerChanges) {\n\t\t\tthis.revertRangeMappings(diff.innerChanges);\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._diffModel.get();\n\t\tif (!model || !model.isDiffUpToDate.get()) { return; }\n\n\t\tthis._editors.modified.executeEdits('diffEditor', [\n\t\t\t{\n\t\t\t\trange: diff.modified.toExclusiveRange(),\n\t\t\t\ttext: model.model.original.getValueInRange(diff.original.toExclusiveRange())\n\t\t\t}\n\t\t]);\n\t}\n\n\trevertRangeMappings(diffs: RangeMapping[]): void {\n\t\tconst model = this._diffModel.get();\n\t\tif (!model || !model.isDiffUpToDate.get()) { return; }\n\n\t\tconst changes: IIdentifiedSingleEditOperation[] = diffs.map<IIdentifiedSingleEditOperation>(c => ({\n\t\t\trange: c.modifiedRange,\n\t\t\ttext: model.model.original.getValueInRange(c.originalRange)\n\t\t}));\n\n\t\tthis._editors.modified.executeEdits('diffEditor', changes);\n\t}\n\n\tprivate _goTo(diff: DiffMapping): void {\n\t\tthis._editors.modified.setPosition(new Position(diff.lineRangeMapping.modified.startLineNumber, 1));\n\t\tthis._editors.modified.revealRangeInCenter(diff.lineRangeMapping.modified.toExclusiveRange());\n\t}\n\n\tgoToDiff(target: 'previous' | 'next'): void {\n\t\tconst diffs = this._diffModel.get()?.diff.get()?.mappings;\n\t\tif (!diffs || diffs.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst curLineNumber = this._editors.modified.getPosition()!.lineNumber;\n\n\t\tlet diff: DiffMapping | undefined;\n\t\tif (target === 'next') {\n\t\t\tdiff = diffs.find(d => d.lineRangeMapping.modified.startLineNumber > curLineNumber) ?? diffs[0];\n\t\t} else {\n\t\t\tdiff = findLast(diffs, d => d.lineRangeMapping.modified.startLineNumber < curLineNumber) ?? diffs[diffs.length - 1];\n\t\t}\n\t\tthis._goTo(diff);\n\n\t\tif (diff.lineRangeMapping.modified.isEmpty) {\n\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineDeleted, { source: 'diffEditor.goToDiff' });\n\t\t} else if (diff.lineRangeMapping.original.isEmpty) {\n\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineInserted, { source: 'diffEditor.goToDiff' });\n\t\t} else if (diff) {\n\t\t\tthis._accessibilitySignalService.playSignal(AccessibilitySignal.diffLineModified, { source: 'diffEditor.goToDiff' });\n\t\t}\n\t}\n\n\trevealFirstDiff(): void {\n\t\tconst diffModel = this._diffModel.get();\n\t\tif (!diffModel) {\n\t\t\treturn;\n\t\t}\n\t\t// wait for the diff computation to finish\n\t\tthis.waitForDiff().then(() => {\n\t\t\tconst diffs = diffModel.diff.get()?.mappings;\n\t\t\tif (!diffs || diffs.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._goTo(diffs[0]);\n\t\t});\n\t}\n\n\taccessibleDiffViewerNext(): void { this._accessibleDiffViewer.get().next(); }\n\n\taccessibleDiffViewerPrev(): void { this._accessibleDiffViewer.get().prev(); }\n\n\tasync waitForDiff(): Promise<void> {\n\t\tconst diffModel = this._diffModel.get();\n\t\tif (!diffModel) { return; }\n\t\tawait diffModel.waitForDiff();\n\t}\n\n\tmapToOtherSide(): { destination: CodeEditorWidget; destinationSelection: Range | undefined } {\n\t\tconst isModifiedFocus = this._editors.modified.hasWidgetFocus();\n\t\tconst source = isModifiedFocus ? this._editors.modified : this._editors.original;\n\t\tconst destination = isModifiedFocus ? this._editors.original : this._editors.modified;\n\n\t\tlet destinationSelection: Range | undefined;\n\n\t\tconst sourceSelection = source.getSelection();\n\t\tif (sourceSelection) {\n\t\t\tconst mappings = this._diffModel.get()?.diff.get()?.mappings.map(m => isModifiedFocus ? m.lineRangeMapping.flip() : m.lineRangeMapping);\n\t\t\tif (mappings) {\n\t\t\t\tconst newRange1 = translatePosition(sourceSelection.getStartPosition(), mappings);\n\t\t\t\tconst newRange2 = translatePosition(sourceSelection.getEndPosition(), mappings);\n\t\t\t\tdestinationSelection = Range.plusRange(newRange1, newRange2);\n\t\t\t}\n\t\t}\n\t\treturn { destination, destinationSelection };\n\t}\n\n\tswitchSide(): void {\n\t\tconst { destination, destinationSelection } = this.mapToOtherSide();\n\t\tdestination.focus();\n\t\tif (destinationSelection) {\n\t\t\tdestination.setSelection(destinationSelection);\n\t\t}\n\t}\n\n\texitCompareMove(): void {\n\t\tconst model = this._diffModel.get();\n\t\tif (!model) { return; }\n\t\tmodel.movedTextToCompare.set(undefined, undefined);\n\t}\n\n\tcollapseAllUnchangedRegions(): void {\n\t\tconst unchangedRegions = this._diffModel.get()?.unchangedRegions.get();\n\t\tif (!unchangedRegions) { return; }\n\t\ttransaction(tx => {\n\t\t\tfor (const region of unchangedRegions) {\n\t\t\t\tregion.collapseAll(tx);\n\t\t\t}\n\t\t});\n\t}\n\n\tshowAllUnchangedRegions(): void {\n\t\tconst unchangedRegions = this._diffModel.get()?.unchangedRegions.get();\n\t\tif (!unchangedRegions) { return; }\n\t\ttransaction(tx => {\n\t\t\tfor (const region of unchangedRegions) {\n\t\t\t\tregion.showAll(tx);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction toLineChanges(state: DiffState): ILineChange[] {\n\treturn state.mappings.map(x => {\n\t\tconst m = x.lineRangeMapping;\n\t\tlet originalStartLineNumber: number;\n\t\tlet originalEndLineNumber: number;\n\t\tlet modifiedStartLineNumber: number;\n\t\tlet modifiedEndLineNumber: number;\n\t\tlet innerChanges = m.innerChanges;\n\n\t\tif (m.original.isEmpty) {\n\t\t\t// Insertion\n\t\t\toriginalStartLineNumber = m.original.startLineNumber - 1;\n\t\t\toriginalEndLineNumber = 0;\n\t\t\tinnerChanges = undefined;\n\t\t} else {\n\t\t\toriginalStartLineNumber = m.original.startLineNumber;\n\t\t\toriginalEndLineNumber = m.original.endLineNumberExclusive - 1;\n\t\t}\n\n\t\tif (m.modified.isEmpty) {\n\t\t\t// Deletion\n\t\t\tmodifiedStartLineNumber = m.modified.startLineNumber - 1;\n\t\t\tmodifiedEndLineNumber = 0;\n\t\t\tinnerChanges = undefined;\n\t\t} else {\n\t\t\tmodifiedStartLineNumber = m.modified.startLineNumber;\n\t\t\tmodifiedEndLineNumber = m.modified.endLineNumberExclusive - 1;\n\t\t}\n\n\t\treturn {\n\t\t\toriginalStartLineNumber,\n\t\t\toriginalEndLineNumber,\n\t\t\tmodifiedStartLineNumber,\n\t\t\tmodifiedEndLineNumber,\n\t\t\tcharChanges: innerChanges?.map(m => ({\n\t\t\t\toriginalStartLineNumber: m.originalRange.startLineNumber,\n\t\t\t\toriginalStartColumn: m.originalRange.startColumn,\n\t\t\t\toriginalEndLineNumber: m.originalRange.endLineNumber,\n\t\t\t\toriginalEndColumn: m.originalRange.endColumn,\n\t\t\t\tmodifiedStartLineNumber: m.modifiedRange.startLineNumber,\n\t\t\t\tmodifiedStartColumn: m.modifiedRange.startColumn,\n\t\t\t\tmodifiedEndLineNumber: m.modifiedRange.endLineNumber,\n\t\t\t\tmodifiedEndColumn: m.modifiedRange.endColumn,\n\t\t\t}))\n\t\t};\n\t});\n}\n"]}