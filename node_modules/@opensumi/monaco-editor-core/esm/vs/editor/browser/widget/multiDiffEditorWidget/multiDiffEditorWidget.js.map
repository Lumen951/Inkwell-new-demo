{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/browser/widget/multiDiffEditorWidget/multiDiffEditorWidget.ts","vs/editor/browser/widget/multiDiffEditorWidget/multiDiffEditorWidget.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;;;;;;;;;;AAGhG,iEAA+D;AAC/D,mEAA+H;AAC/H,+CAA8D;AAE9D,2EAAuH;AACvH,yEAAsE;AACtE,2FAAgG;AAChG,oBAAkB;AAClB,qEAAkE;AAElE,yDAAsD;AAO/C,IAAM,qBAAqB,GAA3B,MAAM,qBAAsB,SAAQ,sBAAU;IAepD,YACkB,QAAqB,EACrB,0BAAsD,EAChD,qBAA6D;QAEpF,KAAK,EAAE,CAAC;QAJS,aAAQ,GAAR,QAAQ,CAAa;QACrB,+BAA0B,GAA1B,0BAA0B,CAA4B;QAC/B,0BAAqB,GAArB,qBAAqB,CAAuB;QAjBpE,eAAU,GAAG,IAAA,4BAAe,EAAwB,IAAI,EAAE,SAAS,CAAC,CAAC;QACrE,eAAU,GAAG,IAAA,4BAAe,EAAuC,IAAI,EAAE,SAAS,CAAC,CAAC;QAEpF,gBAAW,GAAG,IAAA,6BAAgB,EAAC,IAAI,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACvE,IAAA,+BAAuB,EAAC,+CAAsB,EAAE,MAAM,CAAC,CAAC;YACxD,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAC1D,IAAA,+BAAuB,EAAC,qDAAyB,EAAE,MAAM,CAAC,CAAC,EAC3D,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,0BAA0B,CAC/B,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QA4Bc,mBAAc,GAAG,IAAA,oBAAO,EAAC,IAAI,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAMtG,6BAAwB,GAAG,aAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAzBzF,IAAI,CAAC,SAAS,CAAC,IAAA,0CAA6B,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACjE,CAAC;IAEM,MAAM,CAAC,QAA4B,EAAE,OAAuB;QAClE,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAEM,eAAe,CAAC,KAA4B;QAClD,OAAO,IAAI,mDAAwB,CAAC,KAAK,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACxE,CAAC;IAEM,YAAY,CAAC,SAA+C;QAClE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC3C,CAAC;IAEM,MAAM,CAAC,SAAoB;QACjC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC3C,CAAC;IAIM,gBAAgB;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;IAClC,CAAC;IAIM,YAAY;QAClB,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;IAC9C,CAAC;IAEM,YAAY,CAAC,SAAoC;QACvD,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC;IAEM,gBAAgB,CAAC,QAAa;QACpC,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;CACD,CAAA;AA5DY,sDAAqB;gCAArB,qBAAqB;IAkB/B,WAAA,qCAAqB,CAAA;GAlBX,qBAAqB,CA4DjC","file":"multiDiffEditorWidget.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Dimension } from '../../../../base/browser/dom';\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { derived, derivedWithStore, observableValue, recomputeInitiallyAndOnChange } from '../../../../base/common/observable';\nimport { readHotReloadableExport } from '../diffEditor/utils';\nimport { IMultiDiffEditorModel } from './model';\nimport { IMultiDiffEditorViewState, IMultiDiffResource, MultiDiffEditorWidgetImpl } from './multiDiffEditorWidgetImpl';\nimport { MultiDiffEditorViewModel } from './multiDiffEditorViewModel';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport './colors';\nimport { DiffEditorItemTemplate } from './diffEditorItemTemplate';\nimport { IWorkbenchUIElementFactory } from './workbenchUIElementFactory';\nimport { Event } from '../../../../base/common/event';\nimport { URI } from '../../../../base/common/uri';\nimport { IDiffEditor } from '../../../common/editorCommon';\nimport { ICodeEditor } from '../../editorBrowser';\nimport { DiffEditorWidget } from '../diffEditor/diffEditorWidget';\nimport { Range } from '../../../common/core/range';\n\nexport class MultiDiffEditorWidget extends Disposable {\n\tprivate readonly _dimension = observableValue<Dimension | undefined>(this, undefined);\n\tprivate readonly _viewModel = observableValue<MultiDiffEditorViewModel | undefined>(this, undefined);\n\n\tprivate readonly _widgetImpl = derivedWithStore(this, (reader, store) => {\n\t\treadHotReloadableExport(DiffEditorItemTemplate, reader);\n\t\treturn store.add(this._instantiationService.createInstance((\n\t\t\treadHotReloadableExport(MultiDiffEditorWidgetImpl, reader)),\n\t\t\tthis._element,\n\t\t\tthis._dimension,\n\t\t\tthis._viewModel,\n\t\t\tthis._workbenchUIElementFactory,\n\t\t));\n\t});\n\n\tconstructor(\n\t\tprivate readonly _element: HTMLElement,\n\t\tprivate readonly _workbenchUIElementFactory: IWorkbenchUIElementFactory,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(recomputeInitiallyAndOnChange(this._widgetImpl));\n\t}\n\n\tpublic reveal(resource: IMultiDiffResource, options?: RevealOptions): void {\n\t\tthis._widgetImpl.get().reveal(resource, options);\n\t}\n\n\tpublic createViewModel(model: IMultiDiffEditorModel): MultiDiffEditorViewModel {\n\t\treturn new MultiDiffEditorViewModel(model, this._instantiationService);\n\t}\n\n\tpublic setViewModel(viewModel: MultiDiffEditorViewModel | undefined): void {\n\t\tthis._viewModel.set(viewModel, undefined);\n\t}\n\n\tpublic layout(dimension: Dimension): void {\n\t\tthis._dimension.set(dimension, undefined);\n\t}\n\n\tprivate readonly _activeControl = derived(this, (reader) => this._widgetImpl.read(reader).activeControl.read(reader));\n\n\tpublic getActiveControl(): DiffEditorWidget | undefined {\n\t\treturn this._activeControl.get();\n\t}\n\n\tpublic readonly onDidChangeActiveControl = Event.fromObservableLight(this._activeControl);\n\n\tpublic getViewState(): IMultiDiffEditorViewState {\n\t\treturn this._widgetImpl.get().getViewState();\n\t}\n\n\tpublic setViewState(viewState: IMultiDiffEditorViewState): void {\n\t\tthis._widgetImpl.get().setViewState(viewState);\n\t}\n\n\tpublic tryGetCodeEditor(resource: URI): { diffEditor: IDiffEditor; editor: ICodeEditor } | undefined {\n\t\treturn this._widgetImpl.get().tryGetCodeEditor(resource);\n\t}\n}\n\nexport interface RevealOptions {\n\trange?: Range;\n\thighlight: boolean;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Dimension } from '../../../../base/browser/dom';\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { derived, derivedWithStore, observableValue, recomputeInitiallyAndOnChange } from '../../../../base/common/observable';\nimport { readHotReloadableExport } from '../diffEditor/utils';\nimport { IMultiDiffEditorModel } from './model';\nimport { IMultiDiffEditorViewState, IMultiDiffResource, MultiDiffEditorWidgetImpl } from './multiDiffEditorWidgetImpl';\nimport { MultiDiffEditorViewModel } from './multiDiffEditorViewModel';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport './colors';\nimport { DiffEditorItemTemplate } from './diffEditorItemTemplate';\nimport { IWorkbenchUIElementFactory } from './workbenchUIElementFactory';\nimport { Event } from '../../../../base/common/event';\nimport { URI } from '../../../../base/common/uri';\nimport { IDiffEditor } from '../../../common/editorCommon';\nimport { ICodeEditor } from '../../editorBrowser';\nimport { DiffEditorWidget } from '../diffEditor/diffEditorWidget';\nimport { Range } from '../../../common/core/range';\n\nexport class MultiDiffEditorWidget extends Disposable {\n\tprivate readonly _dimension = observableValue<Dimension | undefined>(this, undefined);\n\tprivate readonly _viewModel = observableValue<MultiDiffEditorViewModel | undefined>(this, undefined);\n\n\tprivate readonly _widgetImpl = derivedWithStore(this, (reader, store) => {\n\t\treadHotReloadableExport(DiffEditorItemTemplate, reader);\n\t\treturn store.add(this._instantiationService.createInstance((\n\t\t\treadHotReloadableExport(MultiDiffEditorWidgetImpl, reader)),\n\t\t\tthis._element,\n\t\t\tthis._dimension,\n\t\t\tthis._viewModel,\n\t\t\tthis._workbenchUIElementFactory,\n\t\t));\n\t});\n\n\tconstructor(\n\t\tprivate readonly _element: HTMLElement,\n\t\tprivate readonly _workbenchUIElementFactory: IWorkbenchUIElementFactory,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(recomputeInitiallyAndOnChange(this._widgetImpl));\n\t}\n\n\tpublic reveal(resource: IMultiDiffResource, options?: RevealOptions): void {\n\t\tthis._widgetImpl.get().reveal(resource, options);\n\t}\n\n\tpublic createViewModel(model: IMultiDiffEditorModel): MultiDiffEditorViewModel {\n\t\treturn new MultiDiffEditorViewModel(model, this._instantiationService);\n\t}\n\n\tpublic setViewModel(viewModel: MultiDiffEditorViewModel | undefined): void {\n\t\tthis._viewModel.set(viewModel, undefined);\n\t}\n\n\tpublic layout(dimension: Dimension): void {\n\t\tthis._dimension.set(dimension, undefined);\n\t}\n\n\tprivate readonly _activeControl = derived(this, (reader) => this._widgetImpl.read(reader).activeControl.read(reader));\n\n\tpublic getActiveControl(): DiffEditorWidget | undefined {\n\t\treturn this._activeControl.get();\n\t}\n\n\tpublic readonly onDidChangeActiveControl = Event.fromObservableLight(this._activeControl);\n\n\tpublic getViewState(): IMultiDiffEditorViewState {\n\t\treturn this._widgetImpl.get().getViewState();\n\t}\n\n\tpublic setViewState(viewState: IMultiDiffEditorViewState): void {\n\t\tthis._widgetImpl.get().setViewState(viewState);\n\t}\n\n\tpublic tryGetCodeEditor(resource: URI): { diffEditor: IDiffEditor; editor: ICodeEditor } | undefined {\n\t\treturn this._widgetImpl.get().tryGetCodeEditor(resource);\n\t}\n}\n\nexport interface RevealOptions {\n\trange?: Range;\n\thighlight: boolean;\n}\n"]}