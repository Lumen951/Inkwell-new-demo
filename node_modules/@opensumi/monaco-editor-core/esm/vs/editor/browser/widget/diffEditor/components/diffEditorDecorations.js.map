{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/browser/widget/diffEditor/components/diffEditorDecorations.ts","vs/editor/browser/widget/diffEditor/components/diffEditorDecorations.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,oEAAkE;AAClE,sEAA6E;AAK7E,iFAA8E;AAC9E,8EAA0W;AAC1W,oCAAsD;AAGtD,MAAa,qBAAsB,SAAQ,sBAAU;IACpD,YACkB,QAA2B,EAC3B,UAAwD,EACxD,QAA2B,EAC5C,MAAwB;QAExB,KAAK,EAAE,CAAC;QALS,aAAQ,GAAR,QAAQ,CAAmB;QAC3B,eAAU,GAAV,UAAU,CAA8C;QACxD,aAAQ,GAAR,QAAQ,CAAmB;QAS5B,iBAAY,GAAG,IAAA,oBAAO,EAAC,IAAI,EAAE,CAAC,MAAM,EAAE,EAAE;;YACxD,MAAM,IAAI,GAAG,MAAA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,0CAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7D,IAAI,CAAC,IAAI,EAAE,CAAC;gBACX,OAAO,IAAI,CAAC;YACb,CAAC;YAED,MAAM,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzF,MAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrE,MAAM,oBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAE7E,MAAM,mBAAmB,GAA4B,EAAE,CAAC;YACxD,MAAM,mBAAmB,GAA4B,EAAE,CAAC;YACxD,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBACzB,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAC/B,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;wBAC1C,mBAAmB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,gBAAgB,EAAG,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC,CAAC,4EAA+C,CAAC,CAAC,CAAC,+DAAkC,EAAE,CAAC,CAAC;oBACxM,CAAC;oBACD,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;wBAC1C,mBAAmB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,gBAAgB,EAAG,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC,CAAC,yEAA4C,CAAC,CAAC,CAAC,4DAA+B,EAAE,CAAC,CAAC;oBAClM,CAAC;oBAED,IAAI,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,IAAI,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;wBAChF,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;4BAC1C,mBAAmB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,gBAAgB,EAAG,EAAE,OAAO,EAAE,0DAA6B,EAAE,CAAC,CAAC;wBAC9H,CAAC;wBACD,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;4BAC1C,mBAAmB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,gBAAgB,EAAG,EAAE,OAAO,EAAE,uDAA0B,EAAE,CAAC,CAAC;wBAC3H,CAAC;oBACF,CAAC;yBAAM,CAAC;wBACP,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC,gBAAgB,CAAC,YAAY,IAAI,EAAE,EAAE,CAAC;4BACvD,kDAAkD;4BAClD,IAAI,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,eAAe,CAAC,EAAE,CAAC;gCAC3E,mBAAmB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,oBAAoB,CAAC,CAAC,CAAC,CAAC,sDAAyB,CAAC,CAAC,CAAC,iDAAoB,EAAE,CAAC,CAAC;4BACvK,CAAC;4BACD,IAAI,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,eAAe,CAAC,EAAE,CAAC;gCAC3E,mBAAmB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,oBAAoB,CAAC,CAAC,CAAC,CAAC,mDAAsB,CAAC,CAAC,CAAC,8CAAiB,EAAE,CAAC,CAAC;4BACjK,CAAC;wBACF,CAAC;oBACF,CAAC;gBACF,CAAC;YACF,CAAC;YAED,IAAI,kBAAkB,EAAE,CAAC;gBACxB,KAAK,MAAM,CAAC,IAAI,kBAAkB,CAAC,OAAO,EAAE,CAAC;oBAC5C,MAAM,iBAAiB,GAAG,CAAC,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;oBACxD,IAAI,iBAAiB,EAAE,CAAC;wBACvB,mBAAmB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC,CAAC,4EAA+C,CAAC,CAAC,CAAC,+DAAkC,EAAE,CAAC,CAAC;oBAC1K,CAAC;oBACD,MAAM,iBAAiB,GAAG,CAAC,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;oBACxD,IAAI,iBAAiB,EAAE,CAAC;wBACvB,mBAAmB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC,CAAC,yEAA4C,CAAC,CAAC,CAAC,4DAA+B,EAAE,CAAC,CAAC;oBACpK,CAAC;oBAED,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC,YAAY,IAAI,EAAE,EAAE,CAAC;wBACtC,mBAAmB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,aAAa,EAAE,OAAO,EAAE,iDAAoB,EAAE,CAAC,CAAC;wBACpF,mBAAmB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,aAAa,EAAE,OAAO,EAAE,8CAAiB,EAAE,CAAC,CAAC;oBAClF,CAAC;gBACF,CAAC;YACF,CAAC;YACD,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAE,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEnF,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;gBACjC,mBAAmB,CAAC,IAAI,CAAC;oBACxB,KAAK,EAAE,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,gBAAgB,EAAG,EAAE,OAAO,EAAE;wBAChE,WAAW,EAAE,OAAO;wBACpB,cAAc,EAAE,eAAe,GAAG,CAAC,CAAC,KAAK,eAAe,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;wBAC/E,YAAY,EAAE,CAAC,iDAAuB,CAAC,qBAAqB,EAAE,CAAC,EAAE,iDAAuB,CAAC,qBAAqB,EAAE,iDAAuB,CAAC,qBAAqB,CAAC;qBAC9J;iBACD,CAAC,CAAC;gBAEH,mBAAmB,CAAC,IAAI,CAAC;oBACxB,KAAK,EAAE,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,gBAAgB,EAAG,EAAE,OAAO,EAAE;wBAChE,WAAW,EAAE,OAAO;wBACpB,cAAc,EAAE,eAAe,GAAG,CAAC,CAAC,KAAK,eAAe,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;wBAC/E,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;qBAC1B;iBACD,CAAC,CAAC;YACJ,CAAC;YAED,OAAO,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,CAAC;QACrD,CAAC,CAAC,CAAC;QApFF,IAAI,CAAC,SAAS,CAAC,IAAA,kCAA0B,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,mBAAmB,KAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7H,IAAI,CAAC,SAAS,CAAC,IAAA,kCAA0B,EAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,mBAAmB,KAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9H,CAAC;CAmFD;AA9FD,sDA8FC","file":"diffEditorDecorations.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../base/common/lifecycle';\nimport { IObservable, derived } from '../../../../../base/common/observable';\nimport { DiffEditorEditors } from './diffEditorEditors';\nimport { DiffEditorOptions } from '../diffEditorOptions';\nimport { DiffEditorViewModel } from '../diffEditorViewModel';\nimport { DiffEditorWidget } from '../diffEditorWidget';\nimport { MovedBlocksLinesFeature } from '../features/movedBlocksLinesFeature';\nimport { diffAddDecoration, diffAddDecorationEmpty, diffDeleteDecoration, diffDeleteDecorationEmpty, diffLineAddDecorationBackground, diffLineAddDecorationBackgroundWithIndicator, diffLineDeleteDecorationBackground, diffLineDeleteDecorationBackgroundWithIndicator, diffWholeLineAddDecoration, diffWholeLineDeleteDecoration } from '../registrations.contribution';\nimport { applyObservableDecorations } from '../utils';\nimport { IModelDeltaDecoration } from '../../../../common/model';\n\nexport class DiffEditorDecorations extends Disposable {\n\tconstructor(\n\t\tprivate readonly _editors: DiffEditorEditors,\n\t\tprivate readonly _diffModel: IObservable<DiffEditorViewModel | undefined>,\n\t\tprivate readonly _options: DiffEditorOptions,\n\t\twidget: DiffEditorWidget,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(applyObservableDecorations(this._editors.original, this._decorations.map(d => d?.originalDecorations || [])));\n\t\tthis._register(applyObservableDecorations(this._editors.modified, this._decorations.map(d => d?.modifiedDecorations || [])));\n\t}\n\n\tprivate readonly _decorations = derived(this, (reader) => {\n\t\tconst diff = this._diffModel.read(reader)?.diff.read(reader);\n\t\tif (!diff) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst movedTextToCompare = this._diffModel.read(reader)!.movedTextToCompare.read(reader);\n\t\tconst renderIndicators = this._options.renderIndicators.read(reader);\n\t\tconst showEmptyDecorations = this._options.showEmptyDecorations.read(reader);\n\n\t\tconst originalDecorations: IModelDeltaDecoration[] = [];\n\t\tconst modifiedDecorations: IModelDeltaDecoration[] = [];\n\t\tif (!movedTextToCompare) {\n\t\t\tfor (const m of diff.mappings) {\n\t\t\t\tif (!m.lineRangeMapping.original.isEmpty) {\n\t\t\t\t\toriginalDecorations.push({ range: m.lineRangeMapping.original.toInclusiveRange()!, options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground });\n\t\t\t\t}\n\t\t\t\tif (!m.lineRangeMapping.modified.isEmpty) {\n\t\t\t\t\tmodifiedDecorations.push({ range: m.lineRangeMapping.modified.toInclusiveRange()!, options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground });\n\t\t\t\t}\n\n\t\t\t\tif (m.lineRangeMapping.modified.isEmpty || m.lineRangeMapping.original.isEmpty) {\n\t\t\t\t\tif (!m.lineRangeMapping.original.isEmpty) {\n\t\t\t\t\t\toriginalDecorations.push({ range: m.lineRangeMapping.original.toInclusiveRange()!, options: diffWholeLineDeleteDecoration });\n\t\t\t\t\t}\n\t\t\t\t\tif (!m.lineRangeMapping.modified.isEmpty) {\n\t\t\t\t\t\tmodifiedDecorations.push({ range: m.lineRangeMapping.modified.toInclusiveRange()!, options: diffWholeLineAddDecoration });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const i of m.lineRangeMapping.innerChanges || []) {\n\t\t\t\t\t\t// Don't show empty markers outside the line range\n\t\t\t\t\t\tif (m.lineRangeMapping.original.contains(i.originalRange.startLineNumber)) {\n\t\t\t\t\t\t\toriginalDecorations.push({ range: i.originalRange, options: (i.originalRange.isEmpty() && showEmptyDecorations) ? diffDeleteDecorationEmpty : diffDeleteDecoration });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m.lineRangeMapping.modified.contains(i.modifiedRange.startLineNumber)) {\n\t\t\t\t\t\t\tmodifiedDecorations.push({ range: i.modifiedRange, options: (i.modifiedRange.isEmpty() && showEmptyDecorations) ? diffAddDecorationEmpty : diffAddDecoration });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (movedTextToCompare) {\n\t\t\tfor (const m of movedTextToCompare.changes) {\n\t\t\t\tconst fullRangeOriginal = m.original.toInclusiveRange();\n\t\t\t\tif (fullRangeOriginal) {\n\t\t\t\t\toriginalDecorations.push({ range: fullRangeOriginal, options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground });\n\t\t\t\t}\n\t\t\t\tconst fullRangeModified = m.modified.toInclusiveRange();\n\t\t\t\tif (fullRangeModified) {\n\t\t\t\t\tmodifiedDecorations.push({ range: fullRangeModified, options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground });\n\t\t\t\t}\n\n\t\t\t\tfor (const i of m.innerChanges || []) {\n\t\t\t\t\toriginalDecorations.push({ range: i.originalRange, options: diffDeleteDecoration });\n\t\t\t\t\tmodifiedDecorations.push({ range: i.modifiedRange, options: diffAddDecoration });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst activeMovedText = this._diffModel.read(reader)!.activeMovedText.read(reader);\n\n\t\tfor (const m of diff.movedTexts) {\n\t\t\toriginalDecorations.push({\n\t\t\t\trange: m.lineRangeMapping.original.toInclusiveRange()!, options: {\n\t\t\t\t\tdescription: 'moved',\n\t\t\t\t\tblockClassName: 'movedOriginal' + (m === activeMovedText ? ' currentMove' : ''),\n\t\t\t\t\tblockPadding: [MovedBlocksLinesFeature.movedCodeBlockPadding, 0, MovedBlocksLinesFeature.movedCodeBlockPadding, MovedBlocksLinesFeature.movedCodeBlockPadding],\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmodifiedDecorations.push({\n\t\t\t\trange: m.lineRangeMapping.modified.toInclusiveRange()!, options: {\n\t\t\t\t\tdescription: 'moved',\n\t\t\t\t\tblockClassName: 'movedModified' + (m === activeMovedText ? ' currentMove' : ''),\n\t\t\t\t\tblockPadding: [4, 0, 4, 4],\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn { originalDecorations, modifiedDecorations };\n\t});\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../base/common/lifecycle';\nimport { IObservable, derived } from '../../../../../base/common/observable';\nimport { DiffEditorEditors } from './diffEditorEditors';\nimport { DiffEditorOptions } from '../diffEditorOptions';\nimport { DiffEditorViewModel } from '../diffEditorViewModel';\nimport { DiffEditorWidget } from '../diffEditorWidget';\nimport { MovedBlocksLinesFeature } from '../features/movedBlocksLinesFeature';\nimport { diffAddDecoration, diffAddDecorationEmpty, diffDeleteDecoration, diffDeleteDecorationEmpty, diffLineAddDecorationBackground, diffLineAddDecorationBackgroundWithIndicator, diffLineDeleteDecorationBackground, diffLineDeleteDecorationBackgroundWithIndicator, diffWholeLineAddDecoration, diffWholeLineDeleteDecoration } from '../registrations.contribution';\nimport { applyObservableDecorations } from '../utils';\nimport { IModelDeltaDecoration } from '../../../../common/model';\n\nexport class DiffEditorDecorations extends Disposable {\n\tconstructor(\n\t\tprivate readonly _editors: DiffEditorEditors,\n\t\tprivate readonly _diffModel: IObservable<DiffEditorViewModel | undefined>,\n\t\tprivate readonly _options: DiffEditorOptions,\n\t\twidget: DiffEditorWidget,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(applyObservableDecorations(this._editors.original, this._decorations.map(d => d?.originalDecorations || [])));\n\t\tthis._register(applyObservableDecorations(this._editors.modified, this._decorations.map(d => d?.modifiedDecorations || [])));\n\t}\n\n\tprivate readonly _decorations = derived(this, (reader) => {\n\t\tconst diff = this._diffModel.read(reader)?.diff.read(reader);\n\t\tif (!diff) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst movedTextToCompare = this._diffModel.read(reader)!.movedTextToCompare.read(reader);\n\t\tconst renderIndicators = this._options.renderIndicators.read(reader);\n\t\tconst showEmptyDecorations = this._options.showEmptyDecorations.read(reader);\n\n\t\tconst originalDecorations: IModelDeltaDecoration[] = [];\n\t\tconst modifiedDecorations: IModelDeltaDecoration[] = [];\n\t\tif (!movedTextToCompare) {\n\t\t\tfor (const m of diff.mappings) {\n\t\t\t\tif (!m.lineRangeMapping.original.isEmpty) {\n\t\t\t\t\toriginalDecorations.push({ range: m.lineRangeMapping.original.toInclusiveRange()!, options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground });\n\t\t\t\t}\n\t\t\t\tif (!m.lineRangeMapping.modified.isEmpty) {\n\t\t\t\t\tmodifiedDecorations.push({ range: m.lineRangeMapping.modified.toInclusiveRange()!, options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground });\n\t\t\t\t}\n\n\t\t\t\tif (m.lineRangeMapping.modified.isEmpty || m.lineRangeMapping.original.isEmpty) {\n\t\t\t\t\tif (!m.lineRangeMapping.original.isEmpty) {\n\t\t\t\t\t\toriginalDecorations.push({ range: m.lineRangeMapping.original.toInclusiveRange()!, options: diffWholeLineDeleteDecoration });\n\t\t\t\t\t}\n\t\t\t\t\tif (!m.lineRangeMapping.modified.isEmpty) {\n\t\t\t\t\t\tmodifiedDecorations.push({ range: m.lineRangeMapping.modified.toInclusiveRange()!, options: diffWholeLineAddDecoration });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const i of m.lineRangeMapping.innerChanges || []) {\n\t\t\t\t\t\t// Don't show empty markers outside the line range\n\t\t\t\t\t\tif (m.lineRangeMapping.original.contains(i.originalRange.startLineNumber)) {\n\t\t\t\t\t\t\toriginalDecorations.push({ range: i.originalRange, options: (i.originalRange.isEmpty() && showEmptyDecorations) ? diffDeleteDecorationEmpty : diffDeleteDecoration });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m.lineRangeMapping.modified.contains(i.modifiedRange.startLineNumber)) {\n\t\t\t\t\t\t\tmodifiedDecorations.push({ range: i.modifiedRange, options: (i.modifiedRange.isEmpty() && showEmptyDecorations) ? diffAddDecorationEmpty : diffAddDecoration });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (movedTextToCompare) {\n\t\t\tfor (const m of movedTextToCompare.changes) {\n\t\t\t\tconst fullRangeOriginal = m.original.toInclusiveRange();\n\t\t\t\tif (fullRangeOriginal) {\n\t\t\t\t\toriginalDecorations.push({ range: fullRangeOriginal, options: renderIndicators ? diffLineDeleteDecorationBackgroundWithIndicator : diffLineDeleteDecorationBackground });\n\t\t\t\t}\n\t\t\t\tconst fullRangeModified = m.modified.toInclusiveRange();\n\t\t\t\tif (fullRangeModified) {\n\t\t\t\t\tmodifiedDecorations.push({ range: fullRangeModified, options: renderIndicators ? diffLineAddDecorationBackgroundWithIndicator : diffLineAddDecorationBackground });\n\t\t\t\t}\n\n\t\t\t\tfor (const i of m.innerChanges || []) {\n\t\t\t\t\toriginalDecorations.push({ range: i.originalRange, options: diffDeleteDecoration });\n\t\t\t\t\tmodifiedDecorations.push({ range: i.modifiedRange, options: diffAddDecoration });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst activeMovedText = this._diffModel.read(reader)!.activeMovedText.read(reader);\n\n\t\tfor (const m of diff.movedTexts) {\n\t\t\toriginalDecorations.push({\n\t\t\t\trange: m.lineRangeMapping.original.toInclusiveRange()!, options: {\n\t\t\t\t\tdescription: 'moved',\n\t\t\t\t\tblockClassName: 'movedOriginal' + (m === activeMovedText ? ' currentMove' : ''),\n\t\t\t\t\tblockPadding: [MovedBlocksLinesFeature.movedCodeBlockPadding, 0, MovedBlocksLinesFeature.movedCodeBlockPadding, MovedBlocksLinesFeature.movedCodeBlockPadding],\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmodifiedDecorations.push({\n\t\t\t\trange: m.lineRangeMapping.modified.toInclusiveRange()!, options: {\n\t\t\t\t\tdescription: 'moved',\n\t\t\t\t\tblockClassName: 'movedModified' + (m === activeMovedText ? ' currentMove' : ''),\n\t\t\t\t\tblockPadding: [4, 0, 4, 4],\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn { originalDecorations, modifiedDecorations };\n\t});\n}\n"]}