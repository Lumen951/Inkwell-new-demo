import { Dimension } from '../../../../base/browser/dom';
import { Disposable } from '../../../../base/common/lifecycle';
import { IMultiDiffEditorModel } from './model';
import { IMultiDiffEditorViewState, IMultiDiffResource } from './multiDiffEditorWidgetImpl';
import { MultiDiffEditorViewModel } from './multiDiffEditorViewModel';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import './colors';
import { IWorkbenchUIElementFactory } from './workbenchUIElementFactory';
import { Event } from '../../../../base/common/event';
import { URI } from '../../../../base/common/uri';
import { IDiffEditor } from '../../../common/editorCommon';
import { ICodeEditor } from '../../editorBrowser';
import { DiffEditorWidget } from '../diffEditor/diffEditorWidget';
import { Range } from '../../../common/core/range';
export declare class MultiDiffEditorWidget extends Disposable {
    private readonly _element;
    private readonly _workbenchUIElementFactory;
    private readonly _instantiationService;
    private readonly _dimension;
    private readonly _viewModel;
    private readonly _widgetImpl;
    constructor(_element: HTMLElement, _workbenchUIElementFactory: IWorkbenchUIElementFactory, _instantiationService: IInstantiationService);
    reveal(resource: IMultiDiffResource, options?: RevealOptions): void;
    createViewModel(model: IMultiDiffEditorModel): MultiDiffEditorViewModel;
    setViewModel(viewModel: MultiDiffEditorViewModel | undefined): void;
    layout(dimension: Dimension): void;
    private readonly _activeControl;
    getActiveControl(): DiffEditorWidget | undefined;
    readonly onDidChangeActiveControl: Event<void>;
    getViewState(): IMultiDiffEditorViewState;
    setViewState(viewState: IMultiDiffEditorViewState): void;
    tryGetCodeEditor(resource: URI): {
        diffEditor: IDiffEditor;
        editor: ICodeEditor;
    } | undefined;
}
export interface RevealOptions {
    range?: Range;
    highlight: boolean;
}
