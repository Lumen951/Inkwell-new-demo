import { Disposable } from '../../../../base/common/lifecycle';
import { IDocumentDiffItem, IMultiDiffEditorModel, LazyPromise } from './model';
import { Selection } from '../../../common/core/selection';
import { IDiffEditorViewModel } from '../../../common/editorCommon';
import { IModelService } from '../../../common/services/model';
import { ContextKeyValue } from '../../../../platform/contextkey/common/contextkey';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { URI } from '../../../../base/common/uri';
export declare class MultiDiffEditorViewModel extends Disposable {
    readonly model: IMultiDiffEditorModel;
    private readonly _instantiationService;
    private readonly _documents;
    readonly items: import("../../../../base/common/observable").IObservable<readonly DocumentDiffItemViewModel[], unknown>;
    readonly activeDiffItem: import("../../../../base/common/observable").ISettableObservable<DocumentDiffItemViewModel | undefined, void>;
    waitForDiffs(): Promise<void>;
    collapseAll(): void;
    expandAll(): void;
    get contextKeys(): Record<string, ContextKeyValue> | undefined;
    constructor(model: IMultiDiffEditorModel, _instantiationService: IInstantiationService);
}
export declare class DocumentDiffItemViewModel extends Disposable {
    readonly entry: LazyPromise<IDocumentDiffItem>;
    private readonly _instantiationService;
    private readonly _modelService;
    readonly diffEditorViewModel: IDiffEditorViewModel;
    readonly collapsed: import("../../../../base/common/observable").ISettableObservable<boolean, void>;
    readonly lastTemplateData: import("../../../../base/common/observable").ISettableObservable<{
        contentHeight: number;
        selections: Selection[] | undefined;
    }, void>;
    get originalUri(): URI | undefined;
    get modifiedUri(): URI | undefined;
    constructor(entry: LazyPromise<IDocumentDiffItem>, _instantiationService: IInstantiationService, _modelService: IModelService);
    getKey(): string;
}
