{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/browser/widget/multiDiffEditorWidget/model.ts","vs/editor/browser/widget/multiDiffEditorWidget/model.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,yDAAsD;AAiBtD,MAAa,gBAAgB;IAG5B,YACkB,MAAS;QAAT,WAAM,GAAN,MAAM,CAAG;QAHX,wBAAmB,GAAG,aAAK,CAAC,IAAI,CAAC;IAI7C,CAAC;IAEE,OAAO;QACb,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;IAED,IAAW,KAAK;QACf,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;CACD;AAdD,4CAcC","file":"model.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event';\nimport { IDiffEditorOptions } from '../../../common/config/editorOptions';\nimport { ITextModel } from '../../../common/model';\nimport { ContextKeyValue } from '../../../../platform/contextkey/common/contextkey';\n\nexport interface IMultiDiffEditorModel {\n\treadonly documents: readonly LazyPromise<IDocumentDiffItem>[];\n\treadonly onDidChange: Event<void>;\n\treadonly contextKeys?: Record<string, ContextKeyValue>;\n}\n\nexport interface LazyPromise<T> {\n\trequest(): Promise<T>;\n\treadonly value: T | undefined;\n\treadonly onHasValueDidChange: Event<void>;\n}\n\nexport class ConstLazyPromise<T> implements LazyPromise<T> {\n\tpublic readonly onHasValueDidChange = Event.None;\n\n\tconstructor(\n\t\tprivate readonly _value: T\n\t) { }\n\n\tpublic request(): Promise<T> {\n\t\treturn Promise.resolve(this._value);\n\t}\n\n\tpublic get value(): T {\n\t\treturn this._value;\n\t}\n}\n\nexport interface IDocumentDiffItem {\n\t/**\n\t * undefined if the file was created.\n\t */\n\treadonly original: ITextModel | undefined;\n\n\t/**\n\t * undefined if the file was deleted.\n\t */\n\treadonly modified: ITextModel | undefined;\n\treadonly options?: IDiffEditorOptions;\n\treadonly onOptionsDidChange?: Event<void>;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../base/common/event';\nimport { IDiffEditorOptions } from '../../../common/config/editorOptions';\nimport { ITextModel } from '../../../common/model';\nimport { ContextKeyValue } from '../../../../platform/contextkey/common/contextkey';\n\nexport interface IMultiDiffEditorModel {\n\treadonly documents: readonly LazyPromise<IDocumentDiffItem>[];\n\treadonly onDidChange: Event<void>;\n\treadonly contextKeys?: Record<string, ContextKeyValue>;\n}\n\nexport interface LazyPromise<T> {\n\trequest(): Promise<T>;\n\treadonly value: T | undefined;\n\treadonly onHasValueDidChange: Event<void>;\n}\n\nexport class ConstLazyPromise<T> implements LazyPromise<T> {\n\tpublic readonly onHasValueDidChange = Event.None;\n\n\tconstructor(\n\t\tprivate readonly _value: T\n\t) { }\n\n\tpublic request(): Promise<T> {\n\t\treturn Promise.resolve(this._value);\n\t}\n\n\tpublic get value(): T {\n\t\treturn this._value;\n\t}\n}\n\nexport interface IDocumentDiffItem {\n\t/**\n\t * undefined if the file was created.\n\t */\n\treadonly original: ITextModel | undefined;\n\n\t/**\n\t * undefined if the file was deleted.\n\t */\n\treadonly modified: ITextModel | undefined;\n\treadonly options?: IDiffEditorOptions;\n\treadonly onOptionsDidChange?: Event<void>;\n}\n"]}