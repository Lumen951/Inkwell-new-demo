import { Event } from '../../../../base/common/event';
import { IDiffEditorOptions } from '../../../common/config/editorOptions';
import { ITextModel } from '../../../common/model';
import { ContextKeyValue } from '../../../../platform/contextkey/common/contextkey';
export interface IMultiDiffEditorModel {
    readonly documents: readonly LazyPromise<IDocumentDiffItem>[];
    readonly onDidChange: Event<void>;
    readonly contextKeys?: Record<string, ContextKeyValue>;
}
export interface LazyPromise<T> {
    request(): Promise<T>;
    readonly value: T | undefined;
    readonly onHasValueDidChange: Event<void>;
}
export declare class ConstLazyPromise<T> implements LazyPromise<T> {
    private readonly _value;
    readonly onHasValueDidChange: Event<any>;
    constructor(_value: T);
    request(): Promise<T>;
    get value(): T;
}
export interface IDocumentDiffItem {
    /**
     * undefined if the file was created.
     */
    readonly original: ITextModel | undefined;
    /**
     * undefined if the file was deleted.
     */
    readonly modified: ITextModel | undefined;
    readonly options?: IDiffEditorOptions;
    readonly onOptionsDidChange?: Event<void>;
}
