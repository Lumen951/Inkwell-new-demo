{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/browser/widget/diffEditor/features/overviewRulerFeature.ts","vs/editor/browser/widget/diffEditor/features/overviewRulerFeature.ts"],"names":[],"mappings":"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","file":"overviewRulerFeature.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EventType, addDisposableListener, addStandardDisposableListener, h } from '../../../../../base/browser/dom';\nimport { createFastDomNode } from '../../../../../base/browser/fastDomNode';\nimport { IMouseWheelEvent } from '../../../../../base/browser/mouseEvent';\nimport { ScrollbarState } from '../../../../../base/browser/ui/scrollbar/scrollbarState';\nimport { Color } from '../../../../../base/common/color';\nimport { Disposable } from '../../../../../base/common/lifecycle';\nimport { IObservable, autorun, autorunWithStore, derived, observableFromEvent, observableSignalFromEvent } from '../../../../../base/common/observable';\nimport { CodeEditorWidget } from '../../codeEditorWidget';\nimport { DiffEditorEditors } from '../components/diffEditorEditors';\nimport { DiffEditorViewModel } from '../diffEditorViewModel';\nimport { appendRemoveOnDispose } from '../utils';\nimport { EditorLayoutInfo, EditorOption } from '../../../../common/config/editorOptions';\nimport { LineRange } from '../../../../common/core/lineRange';\nimport { Position } from '../../../../common/core/position';\nimport { OverviewRulerZone } from '../../../../common/viewModel/overviewZoneManager';\nimport { defaultInsertColor, defaultRemoveColor, diffInserted, diffOverviewRulerInserted, diffOverviewRulerRemoved, diffRemoved } from '../../../../../platform/theme/common/colorRegistry';\nimport { IThemeService } from '../../../../../platform/theme/common/themeService';\n\nexport class OverviewRulerFeature extends Disposable {\n\tprivate static readonly ONE_OVERVIEW_WIDTH = 15;\n\tpublic static readonly ENTIRE_DIFF_OVERVIEW_WIDTH = OverviewRulerFeature.ONE_OVERVIEW_WIDTH * 2;\n\tpublic readonly width = OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH;\n\n\tconstructor(\n\t\tprivate readonly _editors: DiffEditorEditors,\n\t\tprivate readonly _rootElement: HTMLElement,\n\t\tprivate readonly _diffModel: IObservable<DiffEditorViewModel | undefined>,\n\t\tprivate readonly _rootWidth: IObservable<number>,\n\t\tprivate readonly _rootHeight: IObservable<number>,\n\t\tprivate readonly _modifiedEditorLayoutInfo: IObservable<EditorLayoutInfo | null>,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) {\n\t\tsuper();\n\n\t\tconst currentColorTheme = observableFromEvent(this._themeService.onDidColorThemeChange, () => this._themeService.getColorTheme());\n\n\t\tconst currentColors = derived(reader => {\n\t\t\t/** @description colors */\n\t\t\tconst theme = currentColorTheme.read(reader);\n\t\t\tconst insertColor = theme.getColor(diffOverviewRulerInserted) || (theme.getColor(diffInserted) || defaultInsertColor).transparent(2);\n\t\t\tconst removeColor = theme.getColor(diffOverviewRulerRemoved) || (theme.getColor(diffRemoved) || defaultRemoveColor).transparent(2);\n\t\t\treturn { insertColor, removeColor };\n\t\t});\n\n\t\tconst viewportDomElement = createFastDomNode(document.createElement('div'));\n\t\tviewportDomElement.setClassName('diffViewport');\n\t\tviewportDomElement.setPosition('absolute');\n\n\t\tconst diffOverviewRoot = h('div.diffOverview', {\n\t\t\tstyle: { position: 'absolute', top: '0px', width: OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px' }\n\t\t}).root;\n\t\tthis._register(appendRemoveOnDispose(diffOverviewRoot, viewportDomElement.domNode));\n\t\tthis._register(addStandardDisposableListener(diffOverviewRoot, EventType.POINTER_DOWN, (e) => {\n\t\t\tthis._editors.modified.delegateVerticalScrollbarPointerDown(e);\n\t\t}));\n\t\tthis._register(addDisposableListener(diffOverviewRoot, EventType.MOUSE_WHEEL, (e: IMouseWheelEvent) => {\n\t\t\tthis._editors.modified.delegateScrollFromMouseWheelEvent(e);\n\t\t}, { passive: false }));\n\t\tthis._register(appendRemoveOnDispose(this._rootElement, diffOverviewRoot));\n\n\t\tthis._register(autorunWithStore((reader, store) => {\n\t\t\t/** @description recreate overview rules when model changes */\n\t\t\tconst m = this._diffModel.read(reader);\n\n\t\t\tconst originalOverviewRuler = this._editors.original.createOverviewRuler('original diffOverviewRuler');\n\t\t\tif (originalOverviewRuler) {\n\t\t\t\tstore.add(originalOverviewRuler);\n\t\t\t\tstore.add(appendRemoveOnDispose(diffOverviewRoot, originalOverviewRuler.getDomNode()));\n\t\t\t}\n\n\t\t\tconst modifiedOverviewRuler = this._editors.modified.createOverviewRuler('modified diffOverviewRuler');\n\t\t\tif (modifiedOverviewRuler) {\n\t\t\t\tstore.add(modifiedOverviewRuler);\n\t\t\t\tstore.add(appendRemoveOnDispose(diffOverviewRoot, modifiedOverviewRuler.getDomNode()));\n\t\t\t}\n\n\t\t\tif (!originalOverviewRuler || !modifiedOverviewRuler) {\n\t\t\t\t// probably no model\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst origViewZonesChanged = observableSignalFromEvent('viewZoneChanged', this._editors.original.onDidChangeViewZones);\n\t\t\tconst modViewZonesChanged = observableSignalFromEvent('viewZoneChanged', this._editors.modified.onDidChangeViewZones);\n\t\t\tconst origHiddenRangesChanged = observableSignalFromEvent('hiddenRangesChanged', this._editors.original.onDidChangeHiddenAreas);\n\t\t\tconst modHiddenRangesChanged = observableSignalFromEvent('hiddenRangesChanged', this._editors.modified.onDidChangeHiddenAreas);\n\n\t\t\tstore.add(autorun(reader => {\n\t\t\t\t/** @description set overview ruler zones */\n\t\t\t\torigViewZonesChanged.read(reader);\n\t\t\t\tmodViewZonesChanged.read(reader);\n\t\t\t\torigHiddenRangesChanged.read(reader);\n\t\t\t\tmodHiddenRangesChanged.read(reader);\n\n\t\t\t\tconst colors = currentColors.read(reader);\n\t\t\t\tconst diff = m?.diff.read(reader)?.mappings;\n\n\t\t\t\tfunction createZones(ranges: LineRange[], color: Color, editor: CodeEditorWidget) {\n\t\t\t\t\tconst vm = editor._getViewModel();\n\t\t\t\t\tif (!vm) {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t\treturn ranges\n\t\t\t\t\t\t.filter(d => d.length > 0)\n\t\t\t\t\t\t.map(r => {\n\t\t\t\t\t\t\tconst start = vm.coordinatesConverter.convertModelPositionToViewPosition(new Position(r.startLineNumber, 1));\n\t\t\t\t\t\t\tconst end = vm.coordinatesConverter.convertModelPositionToViewPosition(new Position(r.endLineNumberExclusive, 1));\n\t\t\t\t\t\t\t// By computing the lineCount, we won't ask the view model later for the bottom vertical position.\n\t\t\t\t\t\t\t// (The view model will take into account the alignment viewzones, which will give\n\t\t\t\t\t\t\t// modifications and deletetions always the same height.)\n\t\t\t\t\t\t\tconst lineCount = end.lineNumber - start.lineNumber;\n\t\t\t\t\t\t\treturn new OverviewRulerZone(start.lineNumber, end.lineNumber, lineCount, color.toString());\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst originalZones = createZones((diff || []).map(d => d.lineRangeMapping.original), colors.removeColor, this._editors.original);\n\t\t\t\tconst modifiedZones = createZones((diff || []).map(d => d.lineRangeMapping.modified), colors.insertColor, this._editors.modified);\n\t\t\t\toriginalOverviewRuler?.setZones(originalZones);\n\t\t\t\tmodifiedOverviewRuler?.setZones(modifiedZones);\n\t\t\t}));\n\n\t\t\tstore.add(autorun(reader => {\n\t\t\t\t/** @description layout overview ruler */\n\t\t\t\tconst height = this._rootHeight.read(reader);\n\t\t\t\tconst width = this._rootWidth.read(reader);\n\t\t\t\tconst layoutInfo = this._modifiedEditorLayoutInfo.read(reader);\n\t\t\t\tif (layoutInfo) {\n\t\t\t\t\tconst freeSpace = OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH - 2 * OverviewRulerFeature.ONE_OVERVIEW_WIDTH;\n\t\t\t\t\toriginalOverviewRuler.setLayout({\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\theight: height,\n\t\t\t\t\t\tright: freeSpace + OverviewRulerFeature.ONE_OVERVIEW_WIDTH,\n\t\t\t\t\t\twidth: OverviewRulerFeature.ONE_OVERVIEW_WIDTH,\n\t\t\t\t\t});\n\t\t\t\t\tmodifiedOverviewRuler.setLayout({\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\theight: height,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\twidth: OverviewRulerFeature.ONE_OVERVIEW_WIDTH,\n\t\t\t\t\t});\n\t\t\t\t\tconst scrollTop = this._editors.modifiedScrollTop.read(reader);\n\t\t\t\t\tconst scrollHeight = this._editors.modifiedScrollHeight.read(reader);\n\n\t\t\t\t\tconst scrollBarOptions = this._editors.modified.getOption(EditorOption.scrollbar);\n\t\t\t\t\tconst state = new ScrollbarState(\n\t\t\t\t\t\tscrollBarOptions.verticalHasArrows ? scrollBarOptions.arrowSize : 0,\n\t\t\t\t\t\tscrollBarOptions.verticalScrollbarSize,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tlayoutInfo.height,\n\t\t\t\t\t\tscrollHeight,\n\t\t\t\t\t\tscrollTop\n\t\t\t\t\t);\n\n\t\t\t\t\tviewportDomElement.setTop(state.getSliderPosition());\n\t\t\t\t\tviewportDomElement.setHeight(state.getSliderSize());\n\t\t\t\t} else {\n\t\t\t\t\tviewportDomElement.setTop(0);\n\t\t\t\t\tviewportDomElement.setHeight(0);\n\t\t\t\t}\n\n\t\t\t\tdiffOverviewRoot.style.height = height + 'px';\n\t\t\t\tdiffOverviewRoot.style.left = (width - OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH) + 'px';\n\t\t\t\tviewportDomElement.setWidth(OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH);\n\t\t\t}));\n\t\t}));\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EventType, addDisposableListener, addStandardDisposableListener, h } from '../../../../../base/browser/dom';\nimport { createFastDomNode } from '../../../../../base/browser/fastDomNode';\nimport { IMouseWheelEvent } from '../../../../../base/browser/mouseEvent';\nimport { ScrollbarState } from '../../../../../base/browser/ui/scrollbar/scrollbarState';\nimport { Color } from '../../../../../base/common/color';\nimport { Disposable } from '../../../../../base/common/lifecycle';\nimport { IObservable, autorun, autorunWithStore, derived, observableFromEvent, observableSignalFromEvent } from '../../../../../base/common/observable';\nimport { CodeEditorWidget } from '../../codeEditorWidget';\nimport { DiffEditorEditors } from '../components/diffEditorEditors';\nimport { DiffEditorViewModel } from '../diffEditorViewModel';\nimport { appendRemoveOnDispose } from '../utils';\nimport { EditorLayoutInfo, EditorOption } from '../../../../common/config/editorOptions';\nimport { LineRange } from '../../../../common/core/lineRange';\nimport { Position } from '../../../../common/core/position';\nimport { OverviewRulerZone } from '../../../../common/viewModel/overviewZoneManager';\nimport { defaultInsertColor, defaultRemoveColor, diffInserted, diffOverviewRulerInserted, diffOverviewRulerRemoved, diffRemoved } from '../../../../../platform/theme/common/colorRegistry';\nimport { IThemeService } from '../../../../../platform/theme/common/themeService';\n\nexport class OverviewRulerFeature extends Disposable {\n\tprivate static readonly ONE_OVERVIEW_WIDTH = 15;\n\tpublic static readonly ENTIRE_DIFF_OVERVIEW_WIDTH = OverviewRulerFeature.ONE_OVERVIEW_WIDTH * 2;\n\tpublic readonly width = OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH;\n\n\tconstructor(\n\t\tprivate readonly _editors: DiffEditorEditors,\n\t\tprivate readonly _rootElement: HTMLElement,\n\t\tprivate readonly _diffModel: IObservable<DiffEditorViewModel | undefined>,\n\t\tprivate readonly _rootWidth: IObservable<number>,\n\t\tprivate readonly _rootHeight: IObservable<number>,\n\t\tprivate readonly _modifiedEditorLayoutInfo: IObservable<EditorLayoutInfo | null>,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) {\n\t\tsuper();\n\n\t\tconst currentColorTheme = observableFromEvent(this._themeService.onDidColorThemeChange, () => this._themeService.getColorTheme());\n\n\t\tconst currentColors = derived(reader => {\n\t\t\t/** @description colors */\n\t\t\tconst theme = currentColorTheme.read(reader);\n\t\t\tconst insertColor = theme.getColor(diffOverviewRulerInserted) || (theme.getColor(diffInserted) || defaultInsertColor).transparent(2);\n\t\t\tconst removeColor = theme.getColor(diffOverviewRulerRemoved) || (theme.getColor(diffRemoved) || defaultRemoveColor).transparent(2);\n\t\t\treturn { insertColor, removeColor };\n\t\t});\n\n\t\tconst viewportDomElement = createFastDomNode(document.createElement('div'));\n\t\tviewportDomElement.setClassName('diffViewport');\n\t\tviewportDomElement.setPosition('absolute');\n\n\t\tconst diffOverviewRoot = h('div.diffOverview', {\n\t\t\tstyle: { position: 'absolute', top: '0px', width: OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px' }\n\t\t}).root;\n\t\tthis._register(appendRemoveOnDispose(diffOverviewRoot, viewportDomElement.domNode));\n\t\tthis._register(addStandardDisposableListener(diffOverviewRoot, EventType.POINTER_DOWN, (e) => {\n\t\t\tthis._editors.modified.delegateVerticalScrollbarPointerDown(e);\n\t\t}));\n\t\tthis._register(addDisposableListener(diffOverviewRoot, EventType.MOUSE_WHEEL, (e: IMouseWheelEvent) => {\n\t\t\tthis._editors.modified.delegateScrollFromMouseWheelEvent(e);\n\t\t}, { passive: false }));\n\t\tthis._register(appendRemoveOnDispose(this._rootElement, diffOverviewRoot));\n\n\t\tthis._register(autorunWithStore((reader, store) => {\n\t\t\t/** @description recreate overview rules when model changes */\n\t\t\tconst m = this._diffModel.read(reader);\n\n\t\t\tconst originalOverviewRuler = this._editors.original.createOverviewRuler('original diffOverviewRuler');\n\t\t\tif (originalOverviewRuler) {\n\t\t\t\tstore.add(originalOverviewRuler);\n\t\t\t\tstore.add(appendRemoveOnDispose(diffOverviewRoot, originalOverviewRuler.getDomNode()));\n\t\t\t}\n\n\t\t\tconst modifiedOverviewRuler = this._editors.modified.createOverviewRuler('modified diffOverviewRuler');\n\t\t\tif (modifiedOverviewRuler) {\n\t\t\t\tstore.add(modifiedOverviewRuler);\n\t\t\t\tstore.add(appendRemoveOnDispose(diffOverviewRoot, modifiedOverviewRuler.getDomNode()));\n\t\t\t}\n\n\t\t\tif (!originalOverviewRuler || !modifiedOverviewRuler) {\n\t\t\t\t// probably no model\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst origViewZonesChanged = observableSignalFromEvent('viewZoneChanged', this._editors.original.onDidChangeViewZones);\n\t\t\tconst modViewZonesChanged = observableSignalFromEvent('viewZoneChanged', this._editors.modified.onDidChangeViewZones);\n\t\t\tconst origHiddenRangesChanged = observableSignalFromEvent('hiddenRangesChanged', this._editors.original.onDidChangeHiddenAreas);\n\t\t\tconst modHiddenRangesChanged = observableSignalFromEvent('hiddenRangesChanged', this._editors.modified.onDidChangeHiddenAreas);\n\n\t\t\tstore.add(autorun(reader => {\n\t\t\t\t/** @description set overview ruler zones */\n\t\t\t\torigViewZonesChanged.read(reader);\n\t\t\t\tmodViewZonesChanged.read(reader);\n\t\t\t\torigHiddenRangesChanged.read(reader);\n\t\t\t\tmodHiddenRangesChanged.read(reader);\n\n\t\t\t\tconst colors = currentColors.read(reader);\n\t\t\t\tconst diff = m?.diff.read(reader)?.mappings;\n\n\t\t\t\tfunction createZones(ranges: LineRange[], color: Color, editor: CodeEditorWidget) {\n\t\t\t\t\tconst vm = editor._getViewModel();\n\t\t\t\t\tif (!vm) {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t\treturn ranges\n\t\t\t\t\t\t.filter(d => d.length > 0)\n\t\t\t\t\t\t.map(r => {\n\t\t\t\t\t\t\tconst start = vm.coordinatesConverter.convertModelPositionToViewPosition(new Position(r.startLineNumber, 1));\n\t\t\t\t\t\t\tconst end = vm.coordinatesConverter.convertModelPositionToViewPosition(new Position(r.endLineNumberExclusive, 1));\n\t\t\t\t\t\t\t// By computing the lineCount, we won't ask the view model later for the bottom vertical position.\n\t\t\t\t\t\t\t// (The view model will take into account the alignment viewzones, which will give\n\t\t\t\t\t\t\t// modifications and deletetions always the same height.)\n\t\t\t\t\t\t\tconst lineCount = end.lineNumber - start.lineNumber;\n\t\t\t\t\t\t\treturn new OverviewRulerZone(start.lineNumber, end.lineNumber, lineCount, color.toString());\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst originalZones = createZones((diff || []).map(d => d.lineRangeMapping.original), colors.removeColor, this._editors.original);\n\t\t\t\tconst modifiedZones = createZones((diff || []).map(d => d.lineRangeMapping.modified), colors.insertColor, this._editors.modified);\n\t\t\t\toriginalOverviewRuler?.setZones(originalZones);\n\t\t\t\tmodifiedOverviewRuler?.setZones(modifiedZones);\n\t\t\t}));\n\n\t\t\tstore.add(autorun(reader => {\n\t\t\t\t/** @description layout overview ruler */\n\t\t\t\tconst height = this._rootHeight.read(reader);\n\t\t\t\tconst width = this._rootWidth.read(reader);\n\t\t\t\tconst layoutInfo = this._modifiedEditorLayoutInfo.read(reader);\n\t\t\t\tif (layoutInfo) {\n\t\t\t\t\tconst freeSpace = OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH - 2 * OverviewRulerFeature.ONE_OVERVIEW_WIDTH;\n\t\t\t\t\toriginalOverviewRuler.setLayout({\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\theight: height,\n\t\t\t\t\t\tright: freeSpace + OverviewRulerFeature.ONE_OVERVIEW_WIDTH,\n\t\t\t\t\t\twidth: OverviewRulerFeature.ONE_OVERVIEW_WIDTH,\n\t\t\t\t\t});\n\t\t\t\t\tmodifiedOverviewRuler.setLayout({\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\theight: height,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\twidth: OverviewRulerFeature.ONE_OVERVIEW_WIDTH,\n\t\t\t\t\t});\n\t\t\t\t\tconst scrollTop = this._editors.modifiedScrollTop.read(reader);\n\t\t\t\t\tconst scrollHeight = this._editors.modifiedScrollHeight.read(reader);\n\n\t\t\t\t\tconst scrollBarOptions = this._editors.modified.getOption(EditorOption.scrollbar);\n\t\t\t\t\tconst state = new ScrollbarState(\n\t\t\t\t\t\tscrollBarOptions.verticalHasArrows ? scrollBarOptions.arrowSize : 0,\n\t\t\t\t\t\tscrollBarOptions.verticalScrollbarSize,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\tlayoutInfo.height,\n\t\t\t\t\t\tscrollHeight,\n\t\t\t\t\t\tscrollTop\n\t\t\t\t\t);\n\n\t\t\t\t\tviewportDomElement.setTop(state.getSliderPosition());\n\t\t\t\t\tviewportDomElement.setHeight(state.getSliderSize());\n\t\t\t\t} else {\n\t\t\t\t\tviewportDomElement.setTop(0);\n\t\t\t\t\tviewportDomElement.setHeight(0);\n\t\t\t\t}\n\n\t\t\t\tdiffOverviewRoot.style.height = height + 'px';\n\t\t\t\tdiffOverviewRoot.style.left = (width - OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH) + 'px';\n\t\t\t\tviewportDomElement.setWidth(OverviewRulerFeature.ENTIRE_DIFF_OVERVIEW_WIDTH);\n\t\t\t}));\n\t\t}));\n\t}\n}\n"]}