import { Disposable } from '../../../../base/common/lifecycle';
import { IObservable } from '../../../../base/common/observableInternal/base';
import { DiffEditorWidget } from '../diffEditor/diffEditorWidget';
import { DocumentDiffItemViewModel } from './multiDiffEditorViewModel';
import { IWorkbenchUIElementFactory } from './workbenchUIElementFactory';
import { OffsetRange } from '../../../common/core/offsetRange';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { IObjectData, IPooledObject } from './objectPool';
export declare class TemplateData implements IObjectData {
    readonly viewModel: DocumentDiffItemViewModel;
    readonly deltaScrollVertical: (delta: number) => void;
    constructor(viewModel: DocumentDiffItemViewModel, deltaScrollVertical: (delta: number) => void);
    getId(): unknown;
}
export declare class DiffEditorItemTemplate extends Disposable implements IPooledObject<TemplateData> {
    private readonly _container;
    private readonly _overflowWidgetsDomNode;
    private readonly _workbenchUIElementFactory;
    private readonly _instantiationService;
    private readonly _viewModel;
    private readonly _collapsed;
    private readonly _editorContentHeight;
    readonly contentHeight: IObservable<number, unknown>;
    private readonly _modifiedContentWidth;
    private readonly _modifiedWidth;
    private readonly _originalContentWidth;
    private readonly _originalWidth;
    readonly maxScroll: IObservable<{
        maxScroll: number;
        width: number;
    }, unknown>;
    private readonly _elements;
    readonly editor: DiffEditorWidget;
    private readonly isModifedFocused;
    private readonly isOriginalFocused;
    readonly isFocused: IObservable<boolean, unknown>;
    private readonly _resourceLabel;
    private readonly _resourceLabel2;
    private readonly _outerEditorHeight;
    constructor(_container: HTMLElement, _overflowWidgetsDomNode: HTMLElement, _workbenchUIElementFactory: IWorkbenchUIElementFactory, _instantiationService: IInstantiationService);
    setScrollLeft(left: number): void;
    private readonly _dataStore;
    private _data;
    setData(data: TemplateData): void;
    private readonly _headerHeight;
    private _lastScrollTop;
    private _isSettingScrollTop;
    render(verticalRange: OffsetRange, width: number, editorScroll: number, viewPort: OffsetRange): void;
    hide(): void;
}
