import { Disposable } from '../../../../../base/common/lifecycle';
import { IObservable } from '../../../../../base/common/observable';
import { CodeEditorWidget, ICodeEditorWidgetOptions } from '../../codeEditorWidget';
import { IEditorOptions } from '../../../../common/config/editorOptions';
import { IContentSizeChangedEvent } from '../../../../common/editorCommon';
import { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation';
import { IKeybindingService } from '../../../../../platform/keybinding/common/keybinding';
import { DiffEditorOptions } from '../diffEditorOptions';
import { ITextModel } from '../../../../common/model';
import { IDiffCodeEditorWidgetOptions } from '../diffEditorWidget';
import { Selection } from '../../../../common/core/selection';
import { Position } from '../../../../common/core/position';
export declare class DiffEditorEditors extends Disposable {
    private readonly originalEditorElement;
    private readonly modifiedEditorElement;
    private readonly _options;
    private readonly _createInnerEditor;
    private readonly _instantiationService;
    private readonly _keybindingService;
    readonly modified: CodeEditorWidget;
    readonly original: CodeEditorWidget;
    private readonly _onDidContentSizeChange;
    get onDidContentSizeChange(): import("../../../../../base/common/event").Event<IContentSizeChangedEvent>;
    readonly modifiedScrollTop: IObservable<number>;
    readonly modifiedScrollHeight: IObservable<number>;
    readonly modifiedModel: IObservable<ITextModel | null>;
    readonly modifiedSelections: IObservable<Selection[]>;
    readonly modifiedCursor: IObservable<Position>;
    readonly originalCursor: IObservable<Position>;
    constructor(originalEditorElement: HTMLElement, modifiedEditorElement: HTMLElement, _options: DiffEditorOptions, codeEditorWidgetOptions: IDiffCodeEditorWidgetOptions, _createInnerEditor: (instantiationService: IInstantiationService, container: HTMLElement, options: Readonly<IEditorOptions>, editorWidgetOptions: ICodeEditorWidgetOptions) => CodeEditorWidget, _instantiationService: IInstantiationService, _keybindingService: IKeybindingService);
    private _createLeftHandSideEditor;
    private _createRightHandSideEditor;
    private _constructInnerEditor;
    private _adjustOptionsForLeftHandSide;
    private _adjustOptionsForRightHandSide;
    private _adjustOptionsForSubEditor;
    private _updateAriaLabel;
}
