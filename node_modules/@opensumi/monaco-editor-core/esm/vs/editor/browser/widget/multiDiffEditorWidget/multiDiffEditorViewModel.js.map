{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/browser/widget/multiDiffEditorWidget/multiDiffEditorViewModel.ts","vs/editor/browser/widget/multiDiffEditorWidget/multiDiffEditorViewModel.ts"],"names":[],"mappings":"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","file":"multiDiffEditorViewModel.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { observableFromEvent, observableValue, transaction } from '../../../../base/common/observable';\nimport { mapObservableArrayCached } from '../../../../base/common/observableInternal/utils';\nimport { DiffEditorOptions } from '../diffEditor/diffEditorOptions';\nimport { DiffEditorViewModel } from '../diffEditor/diffEditorViewModel';\nimport { IDocumentDiffItem, IMultiDiffEditorModel, LazyPromise } from './model';\nimport { IDiffEditorOptions } from '../../../common/config/editorOptions';\nimport { Selection } from '../../../common/core/selection';\nimport { IDiffEditorViewModel } from '../../../common/editorCommon';\nimport { IModelService } from '../../../common/services/model';\nimport { ContextKeyValue } from '../../../../platform/contextkey/common/contextkey';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { URI } from '../../../../base/common/uri';\n\nexport class MultiDiffEditorViewModel extends Disposable {\n\tprivate readonly _documents = observableFromEvent(this.model.onDidChange, /** @description MultiDiffEditorViewModel.documents */() => this.model.documents);\n\n\tpublic readonly items = mapObservableArrayCached(this, this._documents, (d, store) => store.add(this._instantiationService.createInstance(DocumentDiffItemViewModel, d)))\n\t\t.recomputeInitiallyAndOnChange(this._store);\n\n\tpublic readonly activeDiffItem = observableValue<DocumentDiffItemViewModel | undefined>(this, undefined);\n\n\tpublic async waitForDiffs(): Promise<void> {\n\t\tfor (const d of this.items.get()) {\n\t\t\tawait d.diffEditorViewModel.waitForDiff();\n\t\t}\n\t}\n\n\tpublic collapseAll(): void {\n\t\ttransaction(tx => {\n\t\t\tfor (const d of this.items.get()) {\n\t\t\t\td.collapsed.set(true, tx);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic expandAll(): void {\n\t\ttransaction(tx => {\n\t\t\tfor (const d of this.items.get()) {\n\t\t\t\td.collapsed.set(false, tx);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic get contextKeys(): Record<string, ContextKeyValue> | undefined {\n\t\treturn this.model.contextKeys;\n\t}\n\n\tconstructor(\n\t\tpublic readonly model: IMultiDiffEditorModel,\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n}\n\nexport class DocumentDiffItemViewModel extends Disposable {\n\tpublic readonly diffEditorViewModel: IDiffEditorViewModel;\n\tpublic readonly collapsed = observableValue<boolean>(this, false);\n\n\tpublic readonly lastTemplateData = observableValue<{ contentHeight: number; selections: Selection[] | undefined }>(\n\t\tthis,\n\t\t{ contentHeight: 500, selections: undefined, }\n\t);\n\n\tpublic get originalUri(): URI | undefined { return this.entry.value!.original?.uri; }\n\tpublic get modifiedUri(): URI | undefined { return this.entry.value!.modified?.uri; }\n\n\tconstructor(\n\t\tpublic readonly entry: LazyPromise<IDocumentDiffItem>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t) {\n\t\tsuper();\n\n\t\tfunction updateOptions(options: IDiffEditorOptions): IDiffEditorOptions {\n\t\t\treturn {\n\t\t\t\t...options,\n\t\t\t\thideUnchangedRegions: {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst options = new DiffEditorOptions(updateOptions(this.entry.value!.options || {}));\n\t\tif (this.entry.value!.onOptionsDidChange) {\n\t\t\tthis._register(this.entry.value!.onOptionsDidChange(() => {\n\t\t\t\toptions.updateOptions(updateOptions(this.entry.value!.options || {}));\n\t\t\t}));\n\t\t}\n\n\t\tconst originalTextModel = this.entry.value!.original ?? this._register(this._modelService.createModel('', null));\n\t\tconst modifiedTextModel = this.entry.value!.modified ?? this._register(this._modelService.createModel('', null));\n\n\t\tthis.diffEditorViewModel = this._register(this._instantiationService.createInstance(DiffEditorViewModel, {\n\t\t\toriginal: originalTextModel,\n\t\t\tmodified: modifiedTextModel,\n\t\t}, options));\n\t}\n\n\tpublic getKey(): string {\n\t\treturn JSON.stringify([\n\t\t\tthis.originalUri?.toString(),\n\t\t\tthis.modifiedUri?.toString()\n\t\t]);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle';\nimport { observableFromEvent, observableValue, transaction } from '../../../../base/common/observable';\nimport { mapObservableArrayCached } from '../../../../base/common/observableInternal/utils';\nimport { DiffEditorOptions } from '../diffEditor/diffEditorOptions';\nimport { DiffEditorViewModel } from '../diffEditor/diffEditorViewModel';\nimport { IDocumentDiffItem, IMultiDiffEditorModel, LazyPromise } from './model';\nimport { IDiffEditorOptions } from '../../../common/config/editorOptions';\nimport { Selection } from '../../../common/core/selection';\nimport { IDiffEditorViewModel } from '../../../common/editorCommon';\nimport { IModelService } from '../../../common/services/model';\nimport { ContextKeyValue } from '../../../../platform/contextkey/common/contextkey';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';\nimport { URI } from '../../../../base/common/uri';\n\nexport class MultiDiffEditorViewModel extends Disposable {\n\tprivate readonly _documents = observableFromEvent(this.model.onDidChange, /** @description MultiDiffEditorViewModel.documents */() => this.model.documents);\n\n\tpublic readonly items = mapObservableArrayCached(this, this._documents, (d, store) => store.add(this._instantiationService.createInstance(DocumentDiffItemViewModel, d)))\n\t\t.recomputeInitiallyAndOnChange(this._store);\n\n\tpublic readonly activeDiffItem = observableValue<DocumentDiffItemViewModel | undefined>(this, undefined);\n\n\tpublic async waitForDiffs(): Promise<void> {\n\t\tfor (const d of this.items.get()) {\n\t\t\tawait d.diffEditorViewModel.waitForDiff();\n\t\t}\n\t}\n\n\tpublic collapseAll(): void {\n\t\ttransaction(tx => {\n\t\t\tfor (const d of this.items.get()) {\n\t\t\t\td.collapsed.set(true, tx);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic expandAll(): void {\n\t\ttransaction(tx => {\n\t\t\tfor (const d of this.items.get()) {\n\t\t\t\td.collapsed.set(false, tx);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic get contextKeys(): Record<string, ContextKeyValue> | undefined {\n\t\treturn this.model.contextKeys;\n\t}\n\n\tconstructor(\n\t\tpublic readonly model: IMultiDiffEditorModel,\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n}\n\nexport class DocumentDiffItemViewModel extends Disposable {\n\tpublic readonly diffEditorViewModel: IDiffEditorViewModel;\n\tpublic readonly collapsed = observableValue<boolean>(this, false);\n\n\tpublic readonly lastTemplateData = observableValue<{ contentHeight: number; selections: Selection[] | undefined }>(\n\t\tthis,\n\t\t{ contentHeight: 500, selections: undefined, }\n\t);\n\n\tpublic get originalUri(): URI | undefined { return this.entry.value!.original?.uri; }\n\tpublic get modifiedUri(): URI | undefined { return this.entry.value!.modified?.uri; }\n\n\tconstructor(\n\t\tpublic readonly entry: LazyPromise<IDocumentDiffItem>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t) {\n\t\tsuper();\n\n\t\tfunction updateOptions(options: IDiffEditorOptions): IDiffEditorOptions {\n\t\t\treturn {\n\t\t\t\t...options,\n\t\t\t\thideUnchangedRegions: {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst options = new DiffEditorOptions(updateOptions(this.entry.value!.options || {}));\n\t\tif (this.entry.value!.onOptionsDidChange) {\n\t\t\tthis._register(this.entry.value!.onOptionsDidChange(() => {\n\t\t\t\toptions.updateOptions(updateOptions(this.entry.value!.options || {}));\n\t\t\t}));\n\t\t}\n\n\t\tconst originalTextModel = this.entry.value!.original ?? this._register(this._modelService.createModel('', null));\n\t\tconst modifiedTextModel = this.entry.value!.modified ?? this._register(this._modelService.createModel('', null));\n\n\t\tthis.diffEditorViewModel = this._register(this._instantiationService.createInstance(DiffEditorViewModel, {\n\t\t\toriginal: originalTextModel,\n\t\t\tmodified: modifiedTextModel,\n\t\t}, options));\n\t}\n\n\tpublic getKey(): string {\n\t\treturn JSON.stringify([\n\t\t\tthis.originalUri?.toString(),\n\t\t\tthis.modifiedUri?.toString()\n\t\t]);\n\t}\n}\n"]}