{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/editor/browser/services/abstractCodeEditorService.ts","vs/editor/browser/services/abstractCodeEditorService.ts"],"names":[],"mappings":"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","file":"abstractCodeEditorService.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../base/browser/dom';\nimport { Emitter, Event } from '../../../base/common/event';\nimport { IDisposable, DisposableStore, Disposable, toDisposable } from '../../../base/common/lifecycle';\nimport { LinkedList } from '../../../base/common/linkedList';\nimport * as strings from '../../../base/common/strings';\nimport { URI } from '../../../base/common/uri';\nimport { ICodeEditor, IDiffEditor } from '../editorBrowser';\nimport { ICodeEditorOpenHandler, ICodeEditorService } from './codeEditorService';\nimport { IContentDecorationRenderOptions, IDecorationRenderOptions, IThemeDecorationRenderOptions, isThemeColor } from '../../common/editorCommon';\nimport { IModelDecorationOptions, IModelDecorationOverviewRulerOptions, InjectedTextOptions, ITextModel, OverviewRulerLane, TrackedRangeStickiness } from '../../common/model';\nimport { IResourceEditorInput } from '../../../platform/editor/common/editor';\nimport { IColorTheme, IThemeService } from '../../../platform/theme/common/themeService';\nimport { ThemeColor } from '../../../base/common/themables';\n\nexport abstract class AbstractCodeEditorService extends Disposable implements ICodeEditorService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onWillCreateCodeEditor = this._register(new Emitter<void>());\n\tpublic readonly onWillCreateCodeEditor = this._onWillCreateCodeEditor.event;\n\n\tprivate readonly _onCodeEditorAdd: Emitter<ICodeEditor> = this._register(new Emitter<ICodeEditor>());\n\tpublic readonly onCodeEditorAdd: Event<ICodeEditor> = this._onCodeEditorAdd.event;\n\n\tprivate readonly _onCodeEditorRemove: Emitter<ICodeEditor> = this._register(new Emitter<ICodeEditor>());\n\tpublic readonly onCodeEditorRemove: Event<ICodeEditor> = this._onCodeEditorRemove.event;\n\n\tprivate readonly _onWillCreateDiffEditor = this._register(new Emitter<void>());\n\tpublic readonly onWillCreateDiffEditor = this._onWillCreateDiffEditor.event;\n\n\tprivate readonly _onDiffEditorAdd: Emitter<IDiffEditor> = this._register(new Emitter<IDiffEditor>());\n\tpublic readonly onDiffEditorAdd: Event<IDiffEditor> = this._onDiffEditorAdd.event;\n\n\tprivate readonly _onDiffEditorRemove: Emitter<IDiffEditor> = this._register(new Emitter<IDiffEditor>());\n\tpublic readonly onDiffEditorRemove: Event<IDiffEditor> = this._onDiffEditorRemove.event;\n\n\tprivate readonly _onDidChangeTransientModelProperty: Emitter<ITextModel> = this._register(new Emitter<ITextModel>());\n\tpublic readonly onDidChangeTransientModelProperty: Event<ITextModel> = this._onDidChangeTransientModelProperty.event;\n\n\tprotected readonly _onDecorationTypeRegistered: Emitter<string> = this._register(new Emitter<string>());\n\tpublic onDecorationTypeRegistered: Event<string> = this._onDecorationTypeRegistered.event;\n\n\tprivate readonly _codeEditors: { [editorId: string]: ICodeEditor };\n\tprivate readonly _diffEditors: { [editorId: string]: IDiffEditor };\n\tprotected _globalStyleSheet: GlobalStyleSheet | null;\n\tprivate readonly _decorationOptionProviders = new Map<string, IModelDecorationOptionsProvider>();\n\tprivate readonly _editorStyleSheets = new Map<string, RefCountedStyleSheet>();\n\tprivate readonly _codeEditorOpenHandlers = new LinkedList<ICodeEditorOpenHandler>();\n\n\tconstructor(\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) {\n\t\tsuper();\n\t\tthis._codeEditors = Object.create(null);\n\t\tthis._diffEditors = Object.create(null);\n\t\tthis._globalStyleSheet = null;\n\t}\n\n\twillCreateCodeEditor(): void {\n\t\tthis._onWillCreateCodeEditor.fire();\n\t}\n\n\taddCodeEditor(editor: ICodeEditor): void {\n\t\tthis._codeEditors[editor.getId()] = editor;\n\t\tthis._onCodeEditorAdd.fire(editor);\n\t}\n\n\tremoveCodeEditor(editor: ICodeEditor): void {\n\t\tif (delete this._codeEditors[editor.getId()]) {\n\t\t\tthis._onCodeEditorRemove.fire(editor);\n\t\t}\n\t}\n\n\tlistCodeEditors(): ICodeEditor[] {\n\t\treturn Object.keys(this._codeEditors).map(id => this._codeEditors[id]);\n\t}\n\n\twillCreateDiffEditor(): void {\n\t\tthis._onWillCreateDiffEditor.fire();\n\t}\n\n\taddDiffEditor(editor: IDiffEditor): void {\n\t\tthis._diffEditors[editor.getId()] = editor;\n\t\tthis._onDiffEditorAdd.fire(editor);\n\t}\n\n\tremoveDiffEditor(editor: IDiffEditor): void {\n\t\tif (delete this._diffEditors[editor.getId()]) {\n\t\t\tthis._onDiffEditorRemove.fire(editor);\n\t\t}\n\t}\n\n\tlistDiffEditors(): IDiffEditor[] {\n\t\treturn Object.keys(this._diffEditors).map(id => this._diffEditors[id]);\n\t}\n\n\tgetFocusedCodeEditor(): ICodeEditor | null {\n\t\tlet editorWithWidgetFocus: ICodeEditor | null = null;\n\n\t\tconst editors = this.listCodeEditors();\n\t\tfor (const editor of editors) {\n\n\t\t\tif (editor.hasTextFocus()) {\n\t\t\t\t// bingo!\n\t\t\t\treturn editor;\n\t\t\t}\n\n\t\t\tif (editor.hasWidgetFocus()) {\n\t\t\t\teditorWithWidgetFocus = editor;\n\t\t\t}\n\t\t}\n\n\t\treturn editorWithWidgetFocus;\n\t}\n\n\n\tprivate _getOrCreateGlobalStyleSheet(): GlobalStyleSheet {\n\t\tif (!this._globalStyleSheet) {\n\t\t\tthis._globalStyleSheet = this._createGlobalStyleSheet();\n\t\t}\n\t\treturn this._globalStyleSheet;\n\t}\n\n\tprotected _createGlobalStyleSheet(): GlobalStyleSheet {\n\t\treturn new GlobalStyleSheet(dom.createStyleSheet());\n\t}\n\n\tprivate _getOrCreateStyleSheet(editor: ICodeEditor | undefined): GlobalStyleSheet | RefCountedStyleSheet {\n\t\tif (!editor) {\n\t\t\treturn this._getOrCreateGlobalStyleSheet();\n\t\t}\n\t\tconst domNode = editor.getContainerDomNode();\n\t\tif (!dom.isInShadowDOM(domNode)) {\n\t\t\treturn this._getOrCreateGlobalStyleSheet();\n\t\t}\n\t\tconst editorId = editor.getId();\n\t\tif (!this._editorStyleSheets.has(editorId)) {\n\t\t\tconst refCountedStyleSheet = new RefCountedStyleSheet(this, editorId, dom.createStyleSheet(domNode));\n\t\t\tthis._editorStyleSheets.set(editorId, refCountedStyleSheet);\n\t\t}\n\t\treturn this._editorStyleSheets.get(editorId)!;\n\t}\n\n\t_removeEditorStyleSheets(editorId: string): void {\n\t\tthis._editorStyleSheets.delete(editorId);\n\t}\n\n\tpublic registerDecorationType(description: string, key: string, options: IDecorationRenderOptions, parentTypeKey?: string, editor?: ICodeEditor): IDisposable {\n\t\tlet provider = this._decorationOptionProviders.get(key);\n\t\tif (!provider) {\n\t\t\tconst styleSheet = this._getOrCreateStyleSheet(editor);\n\t\t\tconst providerArgs: ProviderArguments = {\n\t\t\t\tstyleSheet: styleSheet,\n\t\t\t\tkey: key,\n\t\t\t\tparentTypeKey: parentTypeKey,\n\t\t\t\toptions: options || Object.create(null)\n\t\t\t};\n\t\t\tif (!parentTypeKey) {\n\t\t\t\tprovider = new DecorationTypeOptionsProvider(description, this._themeService, styleSheet, providerArgs);\n\t\t\t} else {\n\t\t\t\tprovider = new DecorationSubTypeOptionsProvider(this._themeService, styleSheet, providerArgs);\n\t\t\t}\n\t\t\tthis._decorationOptionProviders.set(key, provider);\n\t\t\tthis._onDecorationTypeRegistered.fire(key);\n\t\t}\n\t\tprovider.refCount++;\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.removeDecorationType(key);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic listDecorationTypes(): string[] {\n\t\treturn Array.from(this._decorationOptionProviders.keys());\n\t}\n\n\tpublic removeDecorationType(key: string): void {\n\t\tconst provider = this._decorationOptionProviders.get(key);\n\t\tif (provider) {\n\t\t\tprovider.refCount--;\n\t\t\tif (provider.refCount <= 0) {\n\t\t\t\tthis._decorationOptionProviders.delete(key);\n\t\t\t\tprovider.dispose();\n\t\t\t\tthis.listCodeEditors().forEach((ed) => ed.removeDecorationsByType(key));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic resolveDecorationOptions(decorationTypeKey: string, writable: boolean): IModelDecorationOptions {\n\t\tconst provider = this._decorationOptionProviders.get(decorationTypeKey);\n\t\tif (!provider) {\n\t\t\tthrow new Error('Unknown decoration type key: ' + decorationTypeKey);\n\t\t}\n\t\treturn provider.getOptions(this, writable);\n\t}\n\n\tpublic resolveDecorationCSSRules(decorationTypeKey: string) {\n\t\tconst provider = this._decorationOptionProviders.get(decorationTypeKey);\n\t\tif (!provider) {\n\t\t\treturn null;\n\t\t}\n\t\treturn provider.resolveDecorationCSSRules();\n\t}\n\n\tprivate readonly _transientWatchers: { [uri: string]: ModelTransientSettingWatcher } = {};\n\tprivate readonly _modelProperties = new Map<string, Map<string, any>>();\n\n\tpublic setModelProperty(resource: URI, key: string, value: any): void {\n\t\tconst key1 = resource.toString();\n\t\tlet dest: Map<string, any>;\n\t\tif (this._modelProperties.has(key1)) {\n\t\t\tdest = this._modelProperties.get(key1)!;\n\t\t} else {\n\t\t\tdest = new Map<string, any>();\n\t\t\tthis._modelProperties.set(key1, dest);\n\t\t}\n\n\t\tdest.set(key, value);\n\t}\n\n\tpublic getModelProperty(resource: URI, key: string): any {\n\t\tconst key1 = resource.toString();\n\t\tif (this._modelProperties.has(key1)) {\n\t\t\tconst innerMap = this._modelProperties.get(key1)!;\n\t\t\treturn innerMap.get(key);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic setTransientModelProperty(model: ITextModel, key: string, value: any): void {\n\t\tconst uri = model.uri.toString();\n\n\t\tlet w: ModelTransientSettingWatcher;\n\t\tif (this._transientWatchers.hasOwnProperty(uri)) {\n\t\t\tw = this._transientWatchers[uri];\n\t\t} else {\n\t\t\tw = new ModelTransientSettingWatcher(uri, model, this);\n\t\t\tthis._transientWatchers[uri] = w;\n\t\t}\n\n\t\tconst previousValue = w.get(key);\n\t\tif (previousValue !== value) {\n\t\t\tw.set(key, value);\n\t\t\tthis._onDidChangeTransientModelProperty.fire(model);\n\t\t}\n\t}\n\n\tpublic getTransientModelProperty(model: ITextModel, key: string): any {\n\t\tconst uri = model.uri.toString();\n\n\t\tif (!this._transientWatchers.hasOwnProperty(uri)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._transientWatchers[uri].get(key);\n\t}\n\n\tpublic getTransientModelProperties(model: ITextModel): [string, any][] | undefined {\n\t\tconst uri = model.uri.toString();\n\n\t\tif (!this._transientWatchers.hasOwnProperty(uri)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._transientWatchers[uri].keys().map(key => [key, this._transientWatchers[uri].get(key)]);\n\t}\n\n\t_removeWatcher(w: ModelTransientSettingWatcher): void {\n\t\tdelete this._transientWatchers[w.uri];\n\t}\n\n\tabstract getActiveCodeEditor(): ICodeEditor | null;\n\n\tasync openCodeEditor(input: IResourceEditorInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null> {\n\t\tfor (const handler of this._codeEditorOpenHandlers) {\n\t\t\tconst candidate = await handler(input, source, sideBySide);\n\t\t\tif (candidate !== null) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tregisterCodeEditorOpenHandler(handler: ICodeEditorOpenHandler): IDisposable {\n\t\tconst rm = this._codeEditorOpenHandlers.unshift(handler);\n\t\treturn toDisposable(rm);\n\t}\n}\n\nexport class ModelTransientSettingWatcher {\n\tpublic readonly uri: string;\n\tprivate readonly _values: { [key: string]: any };\n\n\tconstructor(uri: string, model: ITextModel, owner: AbstractCodeEditorService) {\n\t\tthis.uri = uri;\n\t\tthis._values = {};\n\t\tmodel.onWillDispose(() => owner._removeWatcher(this));\n\t}\n\n\tpublic set(key: string, value: any): void {\n\t\tthis._values[key] = value;\n\t}\n\n\tpublic get(key: string): any {\n\t\treturn this._values[key];\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn Object.keys(this._values);\n\t}\n}\n\nclass RefCountedStyleSheet {\n\n\tprivate readonly _parent: AbstractCodeEditorService;\n\tprivate readonly _editorId: string;\n\tprivate readonly _styleSheet: HTMLStyleElement;\n\tprivate _refCount: number;\n\n\tpublic get sheet() {\n\t\treturn this._styleSheet.sheet as CSSStyleSheet;\n\t}\n\n\tconstructor(parent: AbstractCodeEditorService, editorId: string, styleSheet: HTMLStyleElement) {\n\t\tthis._parent = parent;\n\t\tthis._editorId = editorId;\n\t\tthis._styleSheet = styleSheet;\n\t\tthis._refCount = 0;\n\t}\n\n\tpublic ref(): void {\n\t\tthis._refCount++;\n\t}\n\n\tpublic unref(): void {\n\t\tthis._refCount--;\n\t\tif (this._refCount === 0) {\n\t\t\tthis._styleSheet.parentNode?.removeChild(this._styleSheet);\n\t\t\tthis._parent._removeEditorStyleSheets(this._editorId);\n\t\t}\n\t}\n\n\tpublic insertRule(selector: string, rule: string): void {\n\t\tdom.createCSSRule(selector, rule, this._styleSheet);\n\t}\n\n\tpublic removeRulesContainingSelector(ruleName: string): void {\n\t\tdom.removeCSSRulesContainingSelector(ruleName, this._styleSheet);\n\t}\n}\n\nexport class GlobalStyleSheet {\n\tprivate readonly _styleSheet: HTMLStyleElement;\n\n\tpublic get sheet() {\n\t\treturn this._styleSheet.sheet as CSSStyleSheet;\n\t}\n\n\tconstructor(styleSheet: HTMLStyleElement) {\n\t\tthis._styleSheet = styleSheet;\n\t}\n\n\tpublic ref(): void {\n\t}\n\n\tpublic unref(): void {\n\t}\n\n\tpublic insertRule(selector: string, rule: string): void {\n\t\tdom.createCSSRule(selector, rule, this._styleSheet);\n\t}\n\n\tpublic removeRulesContainingSelector(ruleName: string): void {\n\t\tdom.removeCSSRulesContainingSelector(ruleName, this._styleSheet);\n\t}\n}\n\ninterface IModelDecorationOptionsProvider extends IDisposable {\n\trefCount: number;\n\tgetOptions(codeEditorService: AbstractCodeEditorService, writable: boolean): IModelDecorationOptions;\n\tresolveDecorationCSSRules(): CSSRuleList;\n}\n\nclass DecorationSubTypeOptionsProvider implements IModelDecorationOptionsProvider {\n\n\tprivate readonly _styleSheet: GlobalStyleSheet | RefCountedStyleSheet;\n\tpublic refCount: number;\n\n\tprivate readonly _parentTypeKey: string;\n\tprivate _beforeContentRules: DecorationCSSRules | null;\n\tprivate _afterContentRules: DecorationCSSRules | null;\n\n\tconstructor(themeService: IThemeService, styleSheet: GlobalStyleSheet | RefCountedStyleSheet, providerArgs: ProviderArguments) {\n\t\tthis._styleSheet = styleSheet;\n\t\tthis._styleSheet.ref();\n\t\tthis._parentTypeKey = providerArgs.parentTypeKey!;\n\t\tthis.refCount = 0;\n\n\t\tthis._beforeContentRules = new DecorationCSSRules(ModelDecorationCSSRuleType.BeforeContentClassName, providerArgs, themeService);\n\t\tthis._afterContentRules = new DecorationCSSRules(ModelDecorationCSSRuleType.AfterContentClassName, providerArgs, themeService);\n\t}\n\n\tpublic getOptions(codeEditorService: AbstractCodeEditorService, writable: boolean): IModelDecorationOptions {\n\t\tconst options = codeEditorService.resolveDecorationOptions(this._parentTypeKey, true);\n\t\tif (this._beforeContentRules) {\n\t\t\toptions.beforeContentClassName = this._beforeContentRules.className;\n\t\t}\n\t\tif (this._afterContentRules) {\n\t\t\toptions.afterContentClassName = this._afterContentRules.className;\n\t\t}\n\t\treturn options;\n\t}\n\n\tpublic resolveDecorationCSSRules(): CSSRuleList {\n\t\treturn this._styleSheet.sheet.cssRules;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._beforeContentRules) {\n\t\t\tthis._beforeContentRules.dispose();\n\t\t\tthis._beforeContentRules = null;\n\t\t}\n\t\tif (this._afterContentRules) {\n\t\t\tthis._afterContentRules.dispose();\n\t\t\tthis._afterContentRules = null;\n\t\t}\n\t\tthis._styleSheet.unref();\n\t}\n}\n\ninterface ProviderArguments {\n\tstyleSheet: GlobalStyleSheet | RefCountedStyleSheet;\n\tkey: string;\n\tparentTypeKey?: string;\n\toptions: IDecorationRenderOptions;\n}\n\n\nclass DecorationTypeOptionsProvider implements IModelDecorationOptionsProvider {\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate readonly _styleSheet: GlobalStyleSheet | RefCountedStyleSheet;\n\tpublic refCount: number;\n\n\tpublic description: string;\n\tpublic className: string | undefined;\n\tpublic inlineClassName: string | undefined;\n\tpublic inlineClassNameAffectsLetterSpacing: boolean | undefined;\n\tpublic beforeContentClassName: string | undefined;\n\tpublic afterContentClassName: string | undefined;\n\tpublic glyphMarginClassName: string | undefined;\n\tpublic isWholeLine: boolean;\n\tpublic overviewRuler: IModelDecorationOverviewRulerOptions | undefined;\n\tpublic stickiness: TrackedRangeStickiness | undefined;\n\tpublic beforeInjectedText: InjectedTextOptions | undefined;\n\tpublic afterInjectedText: InjectedTextOptions | undefined;\n\n\tconstructor(description: string, themeService: IThemeService, styleSheet: GlobalStyleSheet | RefCountedStyleSheet, providerArgs: ProviderArguments) {\n\t\tthis.description = description;\n\n\t\tthis._styleSheet = styleSheet;\n\t\tthis._styleSheet.ref();\n\t\tthis.refCount = 0;\n\n\t\tconst createCSSRules = (type: ModelDecorationCSSRuleType) => {\n\t\t\tconst rules = new DecorationCSSRules(type, providerArgs, themeService);\n\t\t\tthis._disposables.add(rules);\n\t\t\tif (rules.hasContent) {\n\t\t\t\treturn rules.className;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t\tconst createInlineCSSRules = (type: ModelDecorationCSSRuleType) => {\n\t\t\tconst rules = new DecorationCSSRules(type, providerArgs, themeService);\n\t\t\tthis._disposables.add(rules);\n\t\t\tif (rules.hasContent) {\n\t\t\t\treturn { className: rules.className, hasLetterSpacing: rules.hasLetterSpacing };\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\tthis.className = createCSSRules(ModelDecorationCSSRuleType.ClassName);\n\t\tconst inlineData = createInlineCSSRules(ModelDecorationCSSRuleType.InlineClassName);\n\t\tif (inlineData) {\n\t\t\tthis.inlineClassName = inlineData.className;\n\t\t\tthis.inlineClassNameAffectsLetterSpacing = inlineData.hasLetterSpacing;\n\t\t}\n\t\tthis.beforeContentClassName = createCSSRules(ModelDecorationCSSRuleType.BeforeContentClassName);\n\t\tthis.afterContentClassName = createCSSRules(ModelDecorationCSSRuleType.AfterContentClassName);\n\n\t\tif (providerArgs.options.beforeInjectedText && providerArgs.options.beforeInjectedText.contentText) {\n\t\t\tconst beforeInlineData = createInlineCSSRules(ModelDecorationCSSRuleType.BeforeInjectedTextClassName);\n\t\t\tthis.beforeInjectedText = {\n\t\t\t\tcontent: providerArgs.options.beforeInjectedText.contentText,\n\t\t\t\tinlineClassName: beforeInlineData?.className,\n\t\t\t\tinlineClassNameAffectsLetterSpacing: beforeInlineData?.hasLetterSpacing || providerArgs.options.beforeInjectedText.affectsLetterSpacing\n\t\t\t};\n\t\t}\n\n\t\tif (providerArgs.options.afterInjectedText && providerArgs.options.afterInjectedText.contentText) {\n\t\t\tconst afterInlineData = createInlineCSSRules(ModelDecorationCSSRuleType.AfterInjectedTextClassName);\n\t\t\tthis.afterInjectedText = {\n\t\t\t\tcontent: providerArgs.options.afterInjectedText.contentText,\n\t\t\t\tinlineClassName: afterInlineData?.className,\n\t\t\t\tinlineClassNameAffectsLetterSpacing: afterInlineData?.hasLetterSpacing || providerArgs.options.afterInjectedText.affectsLetterSpacing\n\t\t\t};\n\t\t}\n\n\t\tthis.glyphMarginClassName = createCSSRules(ModelDecorationCSSRuleType.GlyphMarginClassName);\n\n\t\tconst options = providerArgs.options;\n\t\tthis.isWholeLine = Boolean(options.isWholeLine);\n\t\tthis.stickiness = options.rangeBehavior;\n\n\t\tconst lightOverviewRulerColor = options.light && options.light.overviewRulerColor || options.overviewRulerColor;\n\t\tconst darkOverviewRulerColor = options.dark && options.dark.overviewRulerColor || options.overviewRulerColor;\n\t\tif (\n\t\t\ttypeof lightOverviewRulerColor !== 'undefined'\n\t\t\t|| typeof darkOverviewRulerColor !== 'undefined'\n\t\t) {\n\t\t\tthis.overviewRuler = {\n\t\t\t\tcolor: lightOverviewRulerColor || darkOverviewRulerColor,\n\t\t\t\tdarkColor: darkOverviewRulerColor || lightOverviewRulerColor,\n\t\t\t\tposition: options.overviewRulerLane || OverviewRulerLane.Center\n\t\t\t};\n\t\t}\n\t}\n\n\tpublic getOptions(codeEditorService: AbstractCodeEditorService, writable: boolean): IModelDecorationOptions {\n\t\tif (!writable) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn {\n\t\t\tdescription: this.description,\n\t\t\tinlineClassName: this.inlineClassName,\n\t\t\tbeforeContentClassName: this.beforeContentClassName,\n\t\t\tafterContentClassName: this.afterContentClassName,\n\t\t\tclassName: this.className,\n\t\t\tglyphMarginClassName: this.glyphMarginClassName,\n\t\t\tisWholeLine: this.isWholeLine,\n\t\t\toverviewRuler: this.overviewRuler,\n\t\t\tstickiness: this.stickiness,\n\t\t\tbefore: this.beforeInjectedText,\n\t\t\tafter: this.afterInjectedText\n\t\t};\n\t}\n\n\tpublic resolveDecorationCSSRules(): CSSRuleList {\n\t\treturn this._styleSheet.sheet.rules;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._styleSheet.unref();\n\t}\n}\n\n\nexport const _CSS_MAP: { [prop: string]: string } = {\n\tcolor: 'color:{0} !important;',\n\topacity: 'opacity:{0};',\n\tbackgroundColor: 'background-color:{0};',\n\n\toutline: 'outline:{0};',\n\toutlineColor: 'outline-color:{0};',\n\toutlineStyle: 'outline-style:{0};',\n\toutlineWidth: 'outline-width:{0};',\n\n\tborder: 'border:{0};',\n\tborderColor: 'border-color:{0};',\n\tborderRadius: 'border-radius:{0};',\n\tborderSpacing: 'border-spacing:{0};',\n\tborderStyle: 'border-style:{0};',\n\tborderWidth: 'border-width:{0};',\n\n\tfontStyle: 'font-style:{0};',\n\tfontWeight: 'font-weight:{0};',\n\tfontSize: 'font-size:{0};',\n\tfontFamily: 'font-family:{0};',\n\ttextDecoration: 'text-decoration:{0};',\n\tcursor: 'cursor:{0};',\n\tletterSpacing: 'letter-spacing:{0};',\n\n\tgutterIconPath: 'background:{0} center center no-repeat;',\n\tgutterIconSize: 'background-size:{0};',\n\n\tcontentText: 'content:\\'{0}\\';',\n\tcontentIconPath: 'content:{0};',\n\tmargin: 'margin:{0};',\n\tpadding: 'padding:{0};',\n\twidth: 'width:{0};',\n\theight: 'height:{0};',\n\n\tverticalAlign: 'vertical-align:{0};',\n};\n\n\nclass DecorationCSSRules {\n\n\tprivate _theme: IColorTheme;\n\tprivate readonly _className: string;\n\tprivate readonly _unThemedSelector: string;\n\tprivate _hasContent: boolean;\n\tprivate _hasLetterSpacing: boolean;\n\tprivate readonly _ruleType: ModelDecorationCSSRuleType;\n\tprivate _themeListener: IDisposable | null;\n\tprivate readonly _providerArgs: ProviderArguments;\n\tprivate _usesThemeColors: boolean;\n\n\tconstructor(ruleType: ModelDecorationCSSRuleType, providerArgs: ProviderArguments, themeService: IThemeService) {\n\t\tthis._theme = themeService.getColorTheme();\n\t\tthis._ruleType = ruleType;\n\t\tthis._providerArgs = providerArgs;\n\t\tthis._usesThemeColors = false;\n\t\tthis._hasContent = false;\n\t\tthis._hasLetterSpacing = false;\n\n\t\tlet className = CSSNameHelper.getClassName(this._providerArgs.key, ruleType);\n\t\tif (this._providerArgs.parentTypeKey) {\n\t\t\tclassName = className + ' ' + CSSNameHelper.getClassName(this._providerArgs.parentTypeKey, ruleType);\n\t\t}\n\t\tthis._className = className;\n\n\t\tthis._unThemedSelector = CSSNameHelper.getSelector(this._providerArgs.key, this._providerArgs.parentTypeKey, ruleType);\n\n\t\tthis._buildCSS();\n\n\t\tif (this._usesThemeColors) {\n\t\t\tthis._themeListener = themeService.onDidColorThemeChange(theme => {\n\t\t\t\tthis._theme = themeService.getColorTheme();\n\t\t\t\tthis._removeCSS();\n\t\t\t\tthis._buildCSS();\n\t\t\t});\n\t\t} else {\n\t\t\tthis._themeListener = null;\n\t\t}\n\t}\n\n\tpublic dispose() {\n\t\tif (this._hasContent) {\n\t\t\tthis._removeCSS();\n\t\t\tthis._hasContent = false;\n\t\t}\n\t\tif (this._themeListener) {\n\t\t\tthis._themeListener.dispose();\n\t\t\tthis._themeListener = null;\n\t\t}\n\t}\n\n\tpublic get hasContent(): boolean {\n\t\treturn this._hasContent;\n\t}\n\n\tpublic get hasLetterSpacing(): boolean {\n\t\treturn this._hasLetterSpacing;\n\t}\n\n\tpublic get className(): string {\n\t\treturn this._className;\n\t}\n\n\tprivate _buildCSS(): void {\n\t\tconst options = this._providerArgs.options;\n\t\tlet unthemedCSS: string, lightCSS: string, darkCSS: string;\n\t\tswitch (this._ruleType) {\n\t\t\tcase ModelDecorationCSSRuleType.ClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationClassName(options);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationClassName(options.light);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationClassName(options.dark);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.InlineClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationInlineClassName(options);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationInlineClassName(options.light);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationInlineClassName(options.dark);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.GlyphMarginClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.light);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.dark);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.BeforeContentClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.before);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.before);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.before);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.AfterContentClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.after);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.after);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.after);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.BeforeInjectedTextClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.beforeInjectedText);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.beforeInjectedText);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.beforeInjectedText);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.AfterInjectedTextClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.afterInjectedText);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.afterInjectedText);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.afterInjectedText);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown rule type: ' + this._ruleType);\n\t\t}\n\t\tconst sheet = this._providerArgs.styleSheet;\n\n\t\tlet hasContent = false;\n\t\tif (unthemedCSS.length > 0) {\n\t\t\tsheet.insertRule(this._unThemedSelector, unthemedCSS);\n\t\t\thasContent = true;\n\t\t}\n\t\tif (lightCSS.length > 0) {\n\t\t\tsheet.insertRule(`.vs${this._unThemedSelector}, .hc-light${this._unThemedSelector}`, lightCSS);\n\t\t\thasContent = true;\n\t\t}\n\t\tif (darkCSS.length > 0) {\n\t\t\tsheet.insertRule(`.vs-dark${this._unThemedSelector}, .hc-black${this._unThemedSelector}`, darkCSS);\n\t\t\thasContent = true;\n\t\t}\n\t\tthis._hasContent = hasContent;\n\t}\n\n\tprivate _removeCSS(): void {\n\t\tthis._providerArgs.styleSheet.removeRulesContainingSelector(this._unThemedSelector);\n\t}\n\n\t/**\n\t * Build the CSS for decorations styled via `className`.\n\t */\n\tprivate getCSSTextForModelDecorationClassName(opts: IThemeDecorationRenderOptions | undefined): string {\n\t\tif (!opts) {\n\t\t\treturn '';\n\t\t}\n\t\tconst cssTextArr: string[] = [];\n\t\tthis.collectCSSText(opts, ['backgroundColor'], cssTextArr);\n\t\tthis.collectCSSText(opts, ['outline', 'outlineColor', 'outlineStyle', 'outlineWidth'], cssTextArr);\n\t\tthis.collectBorderSettingsCSSText(opts, cssTextArr);\n\t\treturn cssTextArr.join('');\n\t}\n\n\t/**\n\t * Build the CSS for decorations styled via `inlineClassName`.\n\t */\n\tprivate getCSSTextForModelDecorationInlineClassName(opts: IThemeDecorationRenderOptions | undefined): string {\n\t\tif (!opts) {\n\t\t\treturn '';\n\t\t}\n\t\tconst cssTextArr: string[] = [];\n\t\tthis.collectCSSText(opts, ['fontStyle', 'fontWeight', 'textDecoration', 'cursor', 'color', 'opacity', 'letterSpacing'], cssTextArr);\n\t\tif (opts.letterSpacing) {\n\t\t\tthis._hasLetterSpacing = true;\n\t\t}\n\t\treturn cssTextArr.join('');\n\t}\n\n\t/**\n\t * Build the CSS for decorations styled before or after content.\n\t */\n\tprivate getCSSTextForModelDecorationContentClassName(opts: IContentDecorationRenderOptions | undefined): string {\n\t\tif (!opts) {\n\t\t\treturn '';\n\t\t}\n\t\tconst cssTextArr: string[] = [];\n\n\t\tif (typeof opts !== 'undefined') {\n\t\t\tthis.collectBorderSettingsCSSText(opts, cssTextArr);\n\t\t\tif (typeof opts.contentIconPath !== 'undefined') {\n\t\t\t\tcssTextArr.push(strings.format(_CSS_MAP.contentIconPath, dom.asCSSUrl(URI.revive(opts.contentIconPath))));\n\t\t\t}\n\t\t\tif (typeof opts.contentText === 'string') {\n\t\t\t\tconst truncated = opts.contentText.match(/^.*$/m)![0]; // only take first line\n\t\t\t\tconst escaped = truncated.replace(/['\\\\]/g, '\\\\$&');\n\n\t\t\t\tcssTextArr.push(strings.format(_CSS_MAP.contentText, escaped));\n\t\t\t}\n\t\t\tthis.collectCSSText(opts, ['verticalAlign', 'fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'textDecoration', 'color', 'opacity', 'backgroundColor', 'margin', 'padding'], cssTextArr);\n\t\t\tif (this.collectCSSText(opts, ['width', 'height'], cssTextArr)) {\n\t\t\t\tcssTextArr.push('display:inline-block;');\n\t\t\t}\n\t\t}\n\n\t\treturn cssTextArr.join('');\n\t}\n\n\t/**\n\t * Build the CSS for decorations styled via `glyphMarginClassName`.\n\t */\n\tprivate getCSSTextForModelDecorationGlyphMarginClassName(opts: IThemeDecorationRenderOptions | undefined): string {\n\t\tif (!opts) {\n\t\t\treturn '';\n\t\t}\n\t\tconst cssTextArr: string[] = [];\n\n\t\tif (typeof opts.gutterIconPath !== 'undefined') {\n\t\t\tcssTextArr.push(strings.format(_CSS_MAP.gutterIconPath, dom.asCSSUrl(URI.revive(opts.gutterIconPath))));\n\t\t\tif (typeof opts.gutterIconSize !== 'undefined') {\n\t\t\t\tcssTextArr.push(strings.format(_CSS_MAP.gutterIconSize, opts.gutterIconSize));\n\t\t\t}\n\t\t}\n\n\t\treturn cssTextArr.join('');\n\t}\n\n\tprivate collectBorderSettingsCSSText(opts: any, cssTextArr: string[]): boolean {\n\t\tif (this.collectCSSText(opts, ['border', 'borderColor', 'borderRadius', 'borderSpacing', 'borderStyle', 'borderWidth'], cssTextArr)) {\n\t\t\tcssTextArr.push(strings.format('box-sizing: border-box;'));\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate collectCSSText(opts: any, properties: string[], cssTextArr: string[]): boolean {\n\t\tconst lenBefore = cssTextArr.length;\n\t\tfor (const property of properties) {\n\t\t\tconst value = this.resolveValue(opts[property]);\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tcssTextArr.push(strings.format(_CSS_MAP[property], value));\n\t\t\t}\n\t\t}\n\t\treturn cssTextArr.length !== lenBefore;\n\t}\n\n\tprivate resolveValue(value: string | ThemeColor): string {\n\t\tif (isThemeColor(value)) {\n\t\t\tthis._usesThemeColors = true;\n\t\t\tconst color = this._theme.getColor(value.id);\n\t\t\tif (color) {\n\t\t\t\treturn color.toString();\n\t\t\t}\n\t\t\treturn 'transparent';\n\t\t}\n\t\treturn value;\n\t}\n}\n\nconst enum ModelDecorationCSSRuleType {\n\tClassName = 0,\n\tInlineClassName = 1,\n\tGlyphMarginClassName = 2,\n\tBeforeContentClassName = 3,\n\tAfterContentClassName = 4,\n\tBeforeInjectedTextClassName = 5,\n\tAfterInjectedTextClassName = 6,\n}\n\nclass CSSNameHelper {\n\n\tpublic static getClassName(key: string, type: ModelDecorationCSSRuleType): string {\n\t\treturn 'ced-' + key + '-' + type;\n\t}\n\n\tpublic static getSelector(key: string, parentKey: string | undefined, ruleType: ModelDecorationCSSRuleType): string {\n\t\tlet selector = '.monaco-editor .' + this.getClassName(key, ruleType);\n\t\tif (parentKey) {\n\t\t\tselector = selector + '.' + this.getClassName(parentKey, ruleType);\n\t\t}\n\t\tif (ruleType === ModelDecorationCSSRuleType.BeforeContentClassName) {\n\t\t\tselector += '::before';\n\t\t} else if (ruleType === ModelDecorationCSSRuleType.AfterContentClassName) {\n\t\t\tselector += '::after';\n\t\t}\n\t\treturn selector;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../base/browser/dom';\nimport { Emitter, Event } from '../../../base/common/event';\nimport { IDisposable, DisposableStore, Disposable, toDisposable } from '../../../base/common/lifecycle';\nimport { LinkedList } from '../../../base/common/linkedList';\nimport * as strings from '../../../base/common/strings';\nimport { URI } from '../../../base/common/uri';\nimport { ICodeEditor, IDiffEditor } from '../editorBrowser';\nimport { ICodeEditorOpenHandler, ICodeEditorService } from './codeEditorService';\nimport { IContentDecorationRenderOptions, IDecorationRenderOptions, IThemeDecorationRenderOptions, isThemeColor } from '../../common/editorCommon';\nimport { IModelDecorationOptions, IModelDecorationOverviewRulerOptions, InjectedTextOptions, ITextModel, OverviewRulerLane, TrackedRangeStickiness } from '../../common/model';\nimport { IResourceEditorInput } from '../../../platform/editor/common/editor';\nimport { IColorTheme, IThemeService } from '../../../platform/theme/common/themeService';\nimport { ThemeColor } from '../../../base/common/themables';\n\nexport abstract class AbstractCodeEditorService extends Disposable implements ICodeEditorService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onWillCreateCodeEditor = this._register(new Emitter<void>());\n\tpublic readonly onWillCreateCodeEditor = this._onWillCreateCodeEditor.event;\n\n\tprivate readonly _onCodeEditorAdd: Emitter<ICodeEditor> = this._register(new Emitter<ICodeEditor>());\n\tpublic readonly onCodeEditorAdd: Event<ICodeEditor> = this._onCodeEditorAdd.event;\n\n\tprivate readonly _onCodeEditorRemove: Emitter<ICodeEditor> = this._register(new Emitter<ICodeEditor>());\n\tpublic readonly onCodeEditorRemove: Event<ICodeEditor> = this._onCodeEditorRemove.event;\n\n\tprivate readonly _onWillCreateDiffEditor = this._register(new Emitter<void>());\n\tpublic readonly onWillCreateDiffEditor = this._onWillCreateDiffEditor.event;\n\n\tprivate readonly _onDiffEditorAdd: Emitter<IDiffEditor> = this._register(new Emitter<IDiffEditor>());\n\tpublic readonly onDiffEditorAdd: Event<IDiffEditor> = this._onDiffEditorAdd.event;\n\n\tprivate readonly _onDiffEditorRemove: Emitter<IDiffEditor> = this._register(new Emitter<IDiffEditor>());\n\tpublic readonly onDiffEditorRemove: Event<IDiffEditor> = this._onDiffEditorRemove.event;\n\n\tprivate readonly _onDidChangeTransientModelProperty: Emitter<ITextModel> = this._register(new Emitter<ITextModel>());\n\tpublic readonly onDidChangeTransientModelProperty: Event<ITextModel> = this._onDidChangeTransientModelProperty.event;\n\n\tprotected readonly _onDecorationTypeRegistered: Emitter<string> = this._register(new Emitter<string>());\n\tpublic onDecorationTypeRegistered: Event<string> = this._onDecorationTypeRegistered.event;\n\n\tprivate readonly _codeEditors: { [editorId: string]: ICodeEditor };\n\tprivate readonly _diffEditors: { [editorId: string]: IDiffEditor };\n\tprotected _globalStyleSheet: GlobalStyleSheet | null;\n\tprivate readonly _decorationOptionProviders = new Map<string, IModelDecorationOptionsProvider>();\n\tprivate readonly _editorStyleSheets = new Map<string, RefCountedStyleSheet>();\n\tprivate readonly _codeEditorOpenHandlers = new LinkedList<ICodeEditorOpenHandler>();\n\n\tconstructor(\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) {\n\t\tsuper();\n\t\tthis._codeEditors = Object.create(null);\n\t\tthis._diffEditors = Object.create(null);\n\t\tthis._globalStyleSheet = null;\n\t}\n\n\twillCreateCodeEditor(): void {\n\t\tthis._onWillCreateCodeEditor.fire();\n\t}\n\n\taddCodeEditor(editor: ICodeEditor): void {\n\t\tthis._codeEditors[editor.getId()] = editor;\n\t\tthis._onCodeEditorAdd.fire(editor);\n\t}\n\n\tremoveCodeEditor(editor: ICodeEditor): void {\n\t\tif (delete this._codeEditors[editor.getId()]) {\n\t\t\tthis._onCodeEditorRemove.fire(editor);\n\t\t}\n\t}\n\n\tlistCodeEditors(): ICodeEditor[] {\n\t\treturn Object.keys(this._codeEditors).map(id => this._codeEditors[id]);\n\t}\n\n\twillCreateDiffEditor(): void {\n\t\tthis._onWillCreateDiffEditor.fire();\n\t}\n\n\taddDiffEditor(editor: IDiffEditor): void {\n\t\tthis._diffEditors[editor.getId()] = editor;\n\t\tthis._onDiffEditorAdd.fire(editor);\n\t}\n\n\tremoveDiffEditor(editor: IDiffEditor): void {\n\t\tif (delete this._diffEditors[editor.getId()]) {\n\t\t\tthis._onDiffEditorRemove.fire(editor);\n\t\t}\n\t}\n\n\tlistDiffEditors(): IDiffEditor[] {\n\t\treturn Object.keys(this._diffEditors).map(id => this._diffEditors[id]);\n\t}\n\n\tgetFocusedCodeEditor(): ICodeEditor | null {\n\t\tlet editorWithWidgetFocus: ICodeEditor | null = null;\n\n\t\tconst editors = this.listCodeEditors();\n\t\tfor (const editor of editors) {\n\n\t\t\tif (editor.hasTextFocus()) {\n\t\t\t\t// bingo!\n\t\t\t\treturn editor;\n\t\t\t}\n\n\t\t\tif (editor.hasWidgetFocus()) {\n\t\t\t\teditorWithWidgetFocus = editor;\n\t\t\t}\n\t\t}\n\n\t\treturn editorWithWidgetFocus;\n\t}\n\n\n\tprivate _getOrCreateGlobalStyleSheet(): GlobalStyleSheet {\n\t\tif (!this._globalStyleSheet) {\n\t\t\tthis._globalStyleSheet = this._createGlobalStyleSheet();\n\t\t}\n\t\treturn this._globalStyleSheet;\n\t}\n\n\tprotected _createGlobalStyleSheet(): GlobalStyleSheet {\n\t\treturn new GlobalStyleSheet(dom.createStyleSheet());\n\t}\n\n\tprivate _getOrCreateStyleSheet(editor: ICodeEditor | undefined): GlobalStyleSheet | RefCountedStyleSheet {\n\t\tif (!editor) {\n\t\t\treturn this._getOrCreateGlobalStyleSheet();\n\t\t}\n\t\tconst domNode = editor.getContainerDomNode();\n\t\tif (!dom.isInShadowDOM(domNode)) {\n\t\t\treturn this._getOrCreateGlobalStyleSheet();\n\t\t}\n\t\tconst editorId = editor.getId();\n\t\tif (!this._editorStyleSheets.has(editorId)) {\n\t\t\tconst refCountedStyleSheet = new RefCountedStyleSheet(this, editorId, dom.createStyleSheet(domNode));\n\t\t\tthis._editorStyleSheets.set(editorId, refCountedStyleSheet);\n\t\t}\n\t\treturn this._editorStyleSheets.get(editorId)!;\n\t}\n\n\t_removeEditorStyleSheets(editorId: string): void {\n\t\tthis._editorStyleSheets.delete(editorId);\n\t}\n\n\tpublic registerDecorationType(description: string, key: string, options: IDecorationRenderOptions, parentTypeKey?: string, editor?: ICodeEditor): IDisposable {\n\t\tlet provider = this._decorationOptionProviders.get(key);\n\t\tif (!provider) {\n\t\t\tconst styleSheet = this._getOrCreateStyleSheet(editor);\n\t\t\tconst providerArgs: ProviderArguments = {\n\t\t\t\tstyleSheet: styleSheet,\n\t\t\t\tkey: key,\n\t\t\t\tparentTypeKey: parentTypeKey,\n\t\t\t\toptions: options || Object.create(null)\n\t\t\t};\n\t\t\tif (!parentTypeKey) {\n\t\t\t\tprovider = new DecorationTypeOptionsProvider(description, this._themeService, styleSheet, providerArgs);\n\t\t\t} else {\n\t\t\t\tprovider = new DecorationSubTypeOptionsProvider(this._themeService, styleSheet, providerArgs);\n\t\t\t}\n\t\t\tthis._decorationOptionProviders.set(key, provider);\n\t\t\tthis._onDecorationTypeRegistered.fire(key);\n\t\t}\n\t\tprovider.refCount++;\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.removeDecorationType(key);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic listDecorationTypes(): string[] {\n\t\treturn Array.from(this._decorationOptionProviders.keys());\n\t}\n\n\tpublic removeDecorationType(key: string): void {\n\t\tconst provider = this._decorationOptionProviders.get(key);\n\t\tif (provider) {\n\t\t\tprovider.refCount--;\n\t\t\tif (provider.refCount <= 0) {\n\t\t\t\tthis._decorationOptionProviders.delete(key);\n\t\t\t\tprovider.dispose();\n\t\t\t\tthis.listCodeEditors().forEach((ed) => ed.removeDecorationsByType(key));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic resolveDecorationOptions(decorationTypeKey: string, writable: boolean): IModelDecorationOptions {\n\t\tconst provider = this._decorationOptionProviders.get(decorationTypeKey);\n\t\tif (!provider) {\n\t\t\tthrow new Error('Unknown decoration type key: ' + decorationTypeKey);\n\t\t}\n\t\treturn provider.getOptions(this, writable);\n\t}\n\n\tpublic resolveDecorationCSSRules(decorationTypeKey: string) {\n\t\tconst provider = this._decorationOptionProviders.get(decorationTypeKey);\n\t\tif (!provider) {\n\t\t\treturn null;\n\t\t}\n\t\treturn provider.resolveDecorationCSSRules();\n\t}\n\n\tprivate readonly _transientWatchers: { [uri: string]: ModelTransientSettingWatcher } = {};\n\tprivate readonly _modelProperties = new Map<string, Map<string, any>>();\n\n\tpublic setModelProperty(resource: URI, key: string, value: any): void {\n\t\tconst key1 = resource.toString();\n\t\tlet dest: Map<string, any>;\n\t\tif (this._modelProperties.has(key1)) {\n\t\t\tdest = this._modelProperties.get(key1)!;\n\t\t} else {\n\t\t\tdest = new Map<string, any>();\n\t\t\tthis._modelProperties.set(key1, dest);\n\t\t}\n\n\t\tdest.set(key, value);\n\t}\n\n\tpublic getModelProperty(resource: URI, key: string): any {\n\t\tconst key1 = resource.toString();\n\t\tif (this._modelProperties.has(key1)) {\n\t\t\tconst innerMap = this._modelProperties.get(key1)!;\n\t\t\treturn innerMap.get(key);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic setTransientModelProperty(model: ITextModel, key: string, value: any): void {\n\t\tconst uri = model.uri.toString();\n\n\t\tlet w: ModelTransientSettingWatcher;\n\t\tif (this._transientWatchers.hasOwnProperty(uri)) {\n\t\t\tw = this._transientWatchers[uri];\n\t\t} else {\n\t\t\tw = new ModelTransientSettingWatcher(uri, model, this);\n\t\t\tthis._transientWatchers[uri] = w;\n\t\t}\n\n\t\tconst previousValue = w.get(key);\n\t\tif (previousValue !== value) {\n\t\t\tw.set(key, value);\n\t\t\tthis._onDidChangeTransientModelProperty.fire(model);\n\t\t}\n\t}\n\n\tpublic getTransientModelProperty(model: ITextModel, key: string): any {\n\t\tconst uri = model.uri.toString();\n\n\t\tif (!this._transientWatchers.hasOwnProperty(uri)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._transientWatchers[uri].get(key);\n\t}\n\n\tpublic getTransientModelProperties(model: ITextModel): [string, any][] | undefined {\n\t\tconst uri = model.uri.toString();\n\n\t\tif (!this._transientWatchers.hasOwnProperty(uri)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._transientWatchers[uri].keys().map(key => [key, this._transientWatchers[uri].get(key)]);\n\t}\n\n\t_removeWatcher(w: ModelTransientSettingWatcher): void {\n\t\tdelete this._transientWatchers[w.uri];\n\t}\n\n\tabstract getActiveCodeEditor(): ICodeEditor | null;\n\n\tasync openCodeEditor(input: IResourceEditorInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null> {\n\t\tfor (const handler of this._codeEditorOpenHandlers) {\n\t\t\tconst candidate = await handler(input, source, sideBySide);\n\t\t\tif (candidate !== null) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tregisterCodeEditorOpenHandler(handler: ICodeEditorOpenHandler): IDisposable {\n\t\tconst rm = this._codeEditorOpenHandlers.unshift(handler);\n\t\treturn toDisposable(rm);\n\t}\n}\n\nexport class ModelTransientSettingWatcher {\n\tpublic readonly uri: string;\n\tprivate readonly _values: { [key: string]: any };\n\n\tconstructor(uri: string, model: ITextModel, owner: AbstractCodeEditorService) {\n\t\tthis.uri = uri;\n\t\tthis._values = {};\n\t\tmodel.onWillDispose(() => owner._removeWatcher(this));\n\t}\n\n\tpublic set(key: string, value: any): void {\n\t\tthis._values[key] = value;\n\t}\n\n\tpublic get(key: string): any {\n\t\treturn this._values[key];\n\t}\n\n\tpublic keys(): string[] {\n\t\treturn Object.keys(this._values);\n\t}\n}\n\nclass RefCountedStyleSheet {\n\n\tprivate readonly _parent: AbstractCodeEditorService;\n\tprivate readonly _editorId: string;\n\tprivate readonly _styleSheet: HTMLStyleElement;\n\tprivate _refCount: number;\n\n\tpublic get sheet() {\n\t\treturn this._styleSheet.sheet as CSSStyleSheet;\n\t}\n\n\tconstructor(parent: AbstractCodeEditorService, editorId: string, styleSheet: HTMLStyleElement) {\n\t\tthis._parent = parent;\n\t\tthis._editorId = editorId;\n\t\tthis._styleSheet = styleSheet;\n\t\tthis._refCount = 0;\n\t}\n\n\tpublic ref(): void {\n\t\tthis._refCount++;\n\t}\n\n\tpublic unref(): void {\n\t\tthis._refCount--;\n\t\tif (this._refCount === 0) {\n\t\t\tthis._styleSheet.parentNode?.removeChild(this._styleSheet);\n\t\t\tthis._parent._removeEditorStyleSheets(this._editorId);\n\t\t}\n\t}\n\n\tpublic insertRule(selector: string, rule: string): void {\n\t\tdom.createCSSRule(selector, rule, this._styleSheet);\n\t}\n\n\tpublic removeRulesContainingSelector(ruleName: string): void {\n\t\tdom.removeCSSRulesContainingSelector(ruleName, this._styleSheet);\n\t}\n}\n\nexport class GlobalStyleSheet {\n\tprivate readonly _styleSheet: HTMLStyleElement;\n\n\tpublic get sheet() {\n\t\treturn this._styleSheet.sheet as CSSStyleSheet;\n\t}\n\n\tconstructor(styleSheet: HTMLStyleElement) {\n\t\tthis._styleSheet = styleSheet;\n\t}\n\n\tpublic ref(): void {\n\t}\n\n\tpublic unref(): void {\n\t}\n\n\tpublic insertRule(selector: string, rule: string): void {\n\t\tdom.createCSSRule(selector, rule, this._styleSheet);\n\t}\n\n\tpublic removeRulesContainingSelector(ruleName: string): void {\n\t\tdom.removeCSSRulesContainingSelector(ruleName, this._styleSheet);\n\t}\n}\n\ninterface IModelDecorationOptionsProvider extends IDisposable {\n\trefCount: number;\n\tgetOptions(codeEditorService: AbstractCodeEditorService, writable: boolean): IModelDecorationOptions;\n\tresolveDecorationCSSRules(): CSSRuleList;\n}\n\nclass DecorationSubTypeOptionsProvider implements IModelDecorationOptionsProvider {\n\n\tprivate readonly _styleSheet: GlobalStyleSheet | RefCountedStyleSheet;\n\tpublic refCount: number;\n\n\tprivate readonly _parentTypeKey: string;\n\tprivate _beforeContentRules: DecorationCSSRules | null;\n\tprivate _afterContentRules: DecorationCSSRules | null;\n\n\tconstructor(themeService: IThemeService, styleSheet: GlobalStyleSheet | RefCountedStyleSheet, providerArgs: ProviderArguments) {\n\t\tthis._styleSheet = styleSheet;\n\t\tthis._styleSheet.ref();\n\t\tthis._parentTypeKey = providerArgs.parentTypeKey!;\n\t\tthis.refCount = 0;\n\n\t\tthis._beforeContentRules = new DecorationCSSRules(ModelDecorationCSSRuleType.BeforeContentClassName, providerArgs, themeService);\n\t\tthis._afterContentRules = new DecorationCSSRules(ModelDecorationCSSRuleType.AfterContentClassName, providerArgs, themeService);\n\t}\n\n\tpublic getOptions(codeEditorService: AbstractCodeEditorService, writable: boolean): IModelDecorationOptions {\n\t\tconst options = codeEditorService.resolveDecorationOptions(this._parentTypeKey, true);\n\t\tif (this._beforeContentRules) {\n\t\t\toptions.beforeContentClassName = this._beforeContentRules.className;\n\t\t}\n\t\tif (this._afterContentRules) {\n\t\t\toptions.afterContentClassName = this._afterContentRules.className;\n\t\t}\n\t\treturn options;\n\t}\n\n\tpublic resolveDecorationCSSRules(): CSSRuleList {\n\t\treturn this._styleSheet.sheet.cssRules;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._beforeContentRules) {\n\t\t\tthis._beforeContentRules.dispose();\n\t\t\tthis._beforeContentRules = null;\n\t\t}\n\t\tif (this._afterContentRules) {\n\t\t\tthis._afterContentRules.dispose();\n\t\t\tthis._afterContentRules = null;\n\t\t}\n\t\tthis._styleSheet.unref();\n\t}\n}\n\ninterface ProviderArguments {\n\tstyleSheet: GlobalStyleSheet | RefCountedStyleSheet;\n\tkey: string;\n\tparentTypeKey?: string;\n\toptions: IDecorationRenderOptions;\n}\n\n\nclass DecorationTypeOptionsProvider implements IModelDecorationOptionsProvider {\n\n\tprivate readonly _disposables = new DisposableStore();\n\tprivate readonly _styleSheet: GlobalStyleSheet | RefCountedStyleSheet;\n\tpublic refCount: number;\n\n\tpublic description: string;\n\tpublic className: string | undefined;\n\tpublic inlineClassName: string | undefined;\n\tpublic inlineClassNameAffectsLetterSpacing: boolean | undefined;\n\tpublic beforeContentClassName: string | undefined;\n\tpublic afterContentClassName: string | undefined;\n\tpublic glyphMarginClassName: string | undefined;\n\tpublic isWholeLine: boolean;\n\tpublic overviewRuler: IModelDecorationOverviewRulerOptions | undefined;\n\tpublic stickiness: TrackedRangeStickiness | undefined;\n\tpublic beforeInjectedText: InjectedTextOptions | undefined;\n\tpublic afterInjectedText: InjectedTextOptions | undefined;\n\n\tconstructor(description: string, themeService: IThemeService, styleSheet: GlobalStyleSheet | RefCountedStyleSheet, providerArgs: ProviderArguments) {\n\t\tthis.description = description;\n\n\t\tthis._styleSheet = styleSheet;\n\t\tthis._styleSheet.ref();\n\t\tthis.refCount = 0;\n\n\t\tconst createCSSRules = (type: ModelDecorationCSSRuleType) => {\n\t\t\tconst rules = new DecorationCSSRules(type, providerArgs, themeService);\n\t\t\tthis._disposables.add(rules);\n\t\t\tif (rules.hasContent) {\n\t\t\t\treturn rules.className;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t\tconst createInlineCSSRules = (type: ModelDecorationCSSRuleType) => {\n\t\t\tconst rules = new DecorationCSSRules(type, providerArgs, themeService);\n\t\t\tthis._disposables.add(rules);\n\t\t\tif (rules.hasContent) {\n\t\t\t\treturn { className: rules.className, hasLetterSpacing: rules.hasLetterSpacing };\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\tthis.className = createCSSRules(ModelDecorationCSSRuleType.ClassName);\n\t\tconst inlineData = createInlineCSSRules(ModelDecorationCSSRuleType.InlineClassName);\n\t\tif (inlineData) {\n\t\t\tthis.inlineClassName = inlineData.className;\n\t\t\tthis.inlineClassNameAffectsLetterSpacing = inlineData.hasLetterSpacing;\n\t\t}\n\t\tthis.beforeContentClassName = createCSSRules(ModelDecorationCSSRuleType.BeforeContentClassName);\n\t\tthis.afterContentClassName = createCSSRules(ModelDecorationCSSRuleType.AfterContentClassName);\n\n\t\tif (providerArgs.options.beforeInjectedText && providerArgs.options.beforeInjectedText.contentText) {\n\t\t\tconst beforeInlineData = createInlineCSSRules(ModelDecorationCSSRuleType.BeforeInjectedTextClassName);\n\t\t\tthis.beforeInjectedText = {\n\t\t\t\tcontent: providerArgs.options.beforeInjectedText.contentText,\n\t\t\t\tinlineClassName: beforeInlineData?.className,\n\t\t\t\tinlineClassNameAffectsLetterSpacing: beforeInlineData?.hasLetterSpacing || providerArgs.options.beforeInjectedText.affectsLetterSpacing\n\t\t\t};\n\t\t}\n\n\t\tif (providerArgs.options.afterInjectedText && providerArgs.options.afterInjectedText.contentText) {\n\t\t\tconst afterInlineData = createInlineCSSRules(ModelDecorationCSSRuleType.AfterInjectedTextClassName);\n\t\t\tthis.afterInjectedText = {\n\t\t\t\tcontent: providerArgs.options.afterInjectedText.contentText,\n\t\t\t\tinlineClassName: afterInlineData?.className,\n\t\t\t\tinlineClassNameAffectsLetterSpacing: afterInlineData?.hasLetterSpacing || providerArgs.options.afterInjectedText.affectsLetterSpacing\n\t\t\t};\n\t\t}\n\n\t\tthis.glyphMarginClassName = createCSSRules(ModelDecorationCSSRuleType.GlyphMarginClassName);\n\n\t\tconst options = providerArgs.options;\n\t\tthis.isWholeLine = Boolean(options.isWholeLine);\n\t\tthis.stickiness = options.rangeBehavior;\n\n\t\tconst lightOverviewRulerColor = options.light && options.light.overviewRulerColor || options.overviewRulerColor;\n\t\tconst darkOverviewRulerColor = options.dark && options.dark.overviewRulerColor || options.overviewRulerColor;\n\t\tif (\n\t\t\ttypeof lightOverviewRulerColor !== 'undefined'\n\t\t\t|| typeof darkOverviewRulerColor !== 'undefined'\n\t\t) {\n\t\t\tthis.overviewRuler = {\n\t\t\t\tcolor: lightOverviewRulerColor || darkOverviewRulerColor,\n\t\t\t\tdarkColor: darkOverviewRulerColor || lightOverviewRulerColor,\n\t\t\t\tposition: options.overviewRulerLane || OverviewRulerLane.Center\n\t\t\t};\n\t\t}\n\t}\n\n\tpublic getOptions(codeEditorService: AbstractCodeEditorService, writable: boolean): IModelDecorationOptions {\n\t\tif (!writable) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn {\n\t\t\tdescription: this.description,\n\t\t\tinlineClassName: this.inlineClassName,\n\t\t\tbeforeContentClassName: this.beforeContentClassName,\n\t\t\tafterContentClassName: this.afterContentClassName,\n\t\t\tclassName: this.className,\n\t\t\tglyphMarginClassName: this.glyphMarginClassName,\n\t\t\tisWholeLine: this.isWholeLine,\n\t\t\toverviewRuler: this.overviewRuler,\n\t\t\tstickiness: this.stickiness,\n\t\t\tbefore: this.beforeInjectedText,\n\t\t\tafter: this.afterInjectedText\n\t\t};\n\t}\n\n\tpublic resolveDecorationCSSRules(): CSSRuleList {\n\t\treturn this._styleSheet.sheet.rules;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._styleSheet.unref();\n\t}\n}\n\n\nexport const _CSS_MAP: { [prop: string]: string } = {\n\tcolor: 'color:{0} !important;',\n\topacity: 'opacity:{0};',\n\tbackgroundColor: 'background-color:{0};',\n\n\toutline: 'outline:{0};',\n\toutlineColor: 'outline-color:{0};',\n\toutlineStyle: 'outline-style:{0};',\n\toutlineWidth: 'outline-width:{0};',\n\n\tborder: 'border:{0};',\n\tborderColor: 'border-color:{0};',\n\tborderRadius: 'border-radius:{0};',\n\tborderSpacing: 'border-spacing:{0};',\n\tborderStyle: 'border-style:{0};',\n\tborderWidth: 'border-width:{0};',\n\n\tfontStyle: 'font-style:{0};',\n\tfontWeight: 'font-weight:{0};',\n\tfontSize: 'font-size:{0};',\n\tfontFamily: 'font-family:{0};',\n\ttextDecoration: 'text-decoration:{0};',\n\tcursor: 'cursor:{0};',\n\tletterSpacing: 'letter-spacing:{0};',\n\n\tgutterIconPath: 'background:{0} center center no-repeat;',\n\tgutterIconSize: 'background-size:{0};',\n\n\tcontentText: 'content:\\'{0}\\';',\n\tcontentIconPath: 'content:{0};',\n\tmargin: 'margin:{0};',\n\tpadding: 'padding:{0};',\n\twidth: 'width:{0};',\n\theight: 'height:{0};',\n\n\tverticalAlign: 'vertical-align:{0};',\n};\n\n\nclass DecorationCSSRules {\n\n\tprivate _theme: IColorTheme;\n\tprivate readonly _className: string;\n\tprivate readonly _unThemedSelector: string;\n\tprivate _hasContent: boolean;\n\tprivate _hasLetterSpacing: boolean;\n\tprivate readonly _ruleType: ModelDecorationCSSRuleType;\n\tprivate _themeListener: IDisposable | null;\n\tprivate readonly _providerArgs: ProviderArguments;\n\tprivate _usesThemeColors: boolean;\n\n\tconstructor(ruleType: ModelDecorationCSSRuleType, providerArgs: ProviderArguments, themeService: IThemeService) {\n\t\tthis._theme = themeService.getColorTheme();\n\t\tthis._ruleType = ruleType;\n\t\tthis._providerArgs = providerArgs;\n\t\tthis._usesThemeColors = false;\n\t\tthis._hasContent = false;\n\t\tthis._hasLetterSpacing = false;\n\n\t\tlet className = CSSNameHelper.getClassName(this._providerArgs.key, ruleType);\n\t\tif (this._providerArgs.parentTypeKey) {\n\t\t\tclassName = className + ' ' + CSSNameHelper.getClassName(this._providerArgs.parentTypeKey, ruleType);\n\t\t}\n\t\tthis._className = className;\n\n\t\tthis._unThemedSelector = CSSNameHelper.getSelector(this._providerArgs.key, this._providerArgs.parentTypeKey, ruleType);\n\n\t\tthis._buildCSS();\n\n\t\tif (this._usesThemeColors) {\n\t\t\tthis._themeListener = themeService.onDidColorThemeChange(theme => {\n\t\t\t\tthis._theme = themeService.getColorTheme();\n\t\t\t\tthis._removeCSS();\n\t\t\t\tthis._buildCSS();\n\t\t\t});\n\t\t} else {\n\t\t\tthis._themeListener = null;\n\t\t}\n\t}\n\n\tpublic dispose() {\n\t\tif (this._hasContent) {\n\t\t\tthis._removeCSS();\n\t\t\tthis._hasContent = false;\n\t\t}\n\t\tif (this._themeListener) {\n\t\t\tthis._themeListener.dispose();\n\t\t\tthis._themeListener = null;\n\t\t}\n\t}\n\n\tpublic get hasContent(): boolean {\n\t\treturn this._hasContent;\n\t}\n\n\tpublic get hasLetterSpacing(): boolean {\n\t\treturn this._hasLetterSpacing;\n\t}\n\n\tpublic get className(): string {\n\t\treturn this._className;\n\t}\n\n\tprivate _buildCSS(): void {\n\t\tconst options = this._providerArgs.options;\n\t\tlet unthemedCSS: string, lightCSS: string, darkCSS: string;\n\t\tswitch (this._ruleType) {\n\t\t\tcase ModelDecorationCSSRuleType.ClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationClassName(options);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationClassName(options.light);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationClassName(options.dark);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.InlineClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationInlineClassName(options);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationInlineClassName(options.light);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationInlineClassName(options.dark);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.GlyphMarginClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.light);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.dark);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.BeforeContentClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.before);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.before);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.before);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.AfterContentClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.after);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.after);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.after);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.BeforeInjectedTextClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.beforeInjectedText);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.beforeInjectedText);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.beforeInjectedText);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.AfterInjectedTextClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.afterInjectedText);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.afterInjectedText);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.afterInjectedText);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown rule type: ' + this._ruleType);\n\t\t}\n\t\tconst sheet = this._providerArgs.styleSheet;\n\n\t\tlet hasContent = false;\n\t\tif (unthemedCSS.length > 0) {\n\t\t\tsheet.insertRule(this._unThemedSelector, unthemedCSS);\n\t\t\thasContent = true;\n\t\t}\n\t\tif (lightCSS.length > 0) {\n\t\t\tsheet.insertRule(`.vs${this._unThemedSelector}, .hc-light${this._unThemedSelector}`, lightCSS);\n\t\t\thasContent = true;\n\t\t}\n\t\tif (darkCSS.length > 0) {\n\t\t\tsheet.insertRule(`.vs-dark${this._unThemedSelector}, .hc-black${this._unThemedSelector}`, darkCSS);\n\t\t\thasContent = true;\n\t\t}\n\t\tthis._hasContent = hasContent;\n\t}\n\n\tprivate _removeCSS(): void {\n\t\tthis._providerArgs.styleSheet.removeRulesContainingSelector(this._unThemedSelector);\n\t}\n\n\t/**\n\t * Build the CSS for decorations styled via `className`.\n\t */\n\tprivate getCSSTextForModelDecorationClassName(opts: IThemeDecorationRenderOptions | undefined): string {\n\t\tif (!opts) {\n\t\t\treturn '';\n\t\t}\n\t\tconst cssTextArr: string[] = [];\n\t\tthis.collectCSSText(opts, ['backgroundColor'], cssTextArr);\n\t\tthis.collectCSSText(opts, ['outline', 'outlineColor', 'outlineStyle', 'outlineWidth'], cssTextArr);\n\t\tthis.collectBorderSettingsCSSText(opts, cssTextArr);\n\t\treturn cssTextArr.join('');\n\t}\n\n\t/**\n\t * Build the CSS for decorations styled via `inlineClassName`.\n\t */\n\tprivate getCSSTextForModelDecorationInlineClassName(opts: IThemeDecorationRenderOptions | undefined): string {\n\t\tif (!opts) {\n\t\t\treturn '';\n\t\t}\n\t\tconst cssTextArr: string[] = [];\n\t\tthis.collectCSSText(opts, ['fontStyle', 'fontWeight', 'textDecoration', 'cursor', 'color', 'opacity', 'letterSpacing'], cssTextArr);\n\t\tif (opts.letterSpacing) {\n\t\t\tthis._hasLetterSpacing = true;\n\t\t}\n\t\treturn cssTextArr.join('');\n\t}\n\n\t/**\n\t * Build the CSS for decorations styled before or after content.\n\t */\n\tprivate getCSSTextForModelDecorationContentClassName(opts: IContentDecorationRenderOptions | undefined): string {\n\t\tif (!opts) {\n\t\t\treturn '';\n\t\t}\n\t\tconst cssTextArr: string[] = [];\n\n\t\tif (typeof opts !== 'undefined') {\n\t\t\tthis.collectBorderSettingsCSSText(opts, cssTextArr);\n\t\t\tif (typeof opts.contentIconPath !== 'undefined') {\n\t\t\t\tcssTextArr.push(strings.format(_CSS_MAP.contentIconPath, dom.asCSSUrl(URI.revive(opts.contentIconPath))));\n\t\t\t}\n\t\t\tif (typeof opts.contentText === 'string') {\n\t\t\t\tconst truncated = opts.contentText.match(/^.*$/m)![0]; // only take first line\n\t\t\t\tconst escaped = truncated.replace(/['\\\\]/g, '\\\\$&');\n\n\t\t\t\tcssTextArr.push(strings.format(_CSS_MAP.contentText, escaped));\n\t\t\t}\n\t\t\tthis.collectCSSText(opts, ['verticalAlign', 'fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'textDecoration', 'color', 'opacity', 'backgroundColor', 'margin', 'padding'], cssTextArr);\n\t\t\tif (this.collectCSSText(opts, ['width', 'height'], cssTextArr)) {\n\t\t\t\tcssTextArr.push('display:inline-block;');\n\t\t\t}\n\t\t}\n\n\t\treturn cssTextArr.join('');\n\t}\n\n\t/**\n\t * Build the CSS for decorations styled via `glyphMarginClassName`.\n\t */\n\tprivate getCSSTextForModelDecorationGlyphMarginClassName(opts: IThemeDecorationRenderOptions | undefined): string {\n\t\tif (!opts) {\n\t\t\treturn '';\n\t\t}\n\t\tconst cssTextArr: string[] = [];\n\n\t\tif (typeof opts.gutterIconPath !== 'undefined') {\n\t\t\tcssTextArr.push(strings.format(_CSS_MAP.gutterIconPath, dom.asCSSUrl(URI.revive(opts.gutterIconPath))));\n\t\t\tif (typeof opts.gutterIconSize !== 'undefined') {\n\t\t\t\tcssTextArr.push(strings.format(_CSS_MAP.gutterIconSize, opts.gutterIconSize));\n\t\t\t}\n\t\t}\n\n\t\treturn cssTextArr.join('');\n\t}\n\n\tprivate collectBorderSettingsCSSText(opts: any, cssTextArr: string[]): boolean {\n\t\tif (this.collectCSSText(opts, ['border', 'borderColor', 'borderRadius', 'borderSpacing', 'borderStyle', 'borderWidth'], cssTextArr)) {\n\t\t\tcssTextArr.push(strings.format('box-sizing: border-box;'));\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate collectCSSText(opts: any, properties: string[], cssTextArr: string[]): boolean {\n\t\tconst lenBefore = cssTextArr.length;\n\t\tfor (const property of properties) {\n\t\t\tconst value = this.resolveValue(opts[property]);\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tcssTextArr.push(strings.format(_CSS_MAP[property], value));\n\t\t\t}\n\t\t}\n\t\treturn cssTextArr.length !== lenBefore;\n\t}\n\n\tprivate resolveValue(value: string | ThemeColor): string {\n\t\tif (isThemeColor(value)) {\n\t\t\tthis._usesThemeColors = true;\n\t\t\tconst color = this._theme.getColor(value.id);\n\t\t\tif (color) {\n\t\t\t\treturn color.toString();\n\t\t\t}\n\t\t\treturn 'transparent';\n\t\t}\n\t\treturn value;\n\t}\n}\n\nconst enum ModelDecorationCSSRuleType {\n\tClassName = 0,\n\tInlineClassName = 1,\n\tGlyphMarginClassName = 2,\n\tBeforeContentClassName = 3,\n\tAfterContentClassName = 4,\n\tBeforeInjectedTextClassName = 5,\n\tAfterInjectedTextClassName = 6,\n}\n\nclass CSSNameHelper {\n\n\tpublic static getClassName(key: string, type: ModelDecorationCSSRuleType): string {\n\t\treturn 'ced-' + key + '-' + type;\n\t}\n\n\tpublic static getSelector(key: string, parentKey: string | undefined, ruleType: ModelDecorationCSSRuleType): string {\n\t\tlet selector = '.monaco-editor .' + this.getClassName(key, ruleType);\n\t\tif (parentKey) {\n\t\t\tselector = selector + '.' + this.getClassName(parentKey, ruleType);\n\t\t}\n\t\tif (ruleType === ModelDecorationCSSRuleType.BeforeContentClassName) {\n\t\t\tselector += '::before';\n\t\t} else if (ruleType === ModelDecorationCSSRuleType.AfterContentClassName) {\n\t\t\tselector += '::after';\n\t\t}\n\t\treturn selector;\n\t}\n}\n"]}