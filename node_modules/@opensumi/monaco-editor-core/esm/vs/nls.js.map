{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/nls.ts","vs/nls.ts"],"names":[],"mappings":"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","file":"nls.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// @ts-ignore\nconst zhCnBundle = require('../../dev/vs/editor/editor.main.nls.zh-cn.json');\n\nexport interface ILocalizeInfo {\n\tkey: string;\n\tcomment: string[];\n}\n\nexport interface ILocalizedString {\n\toriginal: string;\n\tvalue: string;\n}\n\nfunction _format(message: string, args: any[]): string {\n\tlet result: string;\n\tif (args.length === 0) {\n\t\tresult = message;\n\t} else {\n\t\tresult = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n\t\t\tconst index = rest[0];\n\t\t\treturn typeof args[index] !== 'undefined' ? args[index] : match;\n\t\t});\n\t}\n\treturn result;\n}\n\nlet defaultLocale: string | undefined;\nlet initialized = false;\nlet CURRENT_LOCALE_DATA: { [prop: string]: string[] } | null = null;\nlet localeFactory: () => string;\n\nexport type LocaleType = 'zh-CN' | 'en-US';\n\nexport function setLocale(locale: LocaleType): void {\n\tdefaultLocale = locale;\n}\n\nexport function loadLocaleBundle(bundle: { [prop: string]: string[] }) {\n\tCURRENT_LOCALE_DATA = bundle;\n}\n\nexport function configureLocaleFactory(factory: () => string): void {\n\tlocaleFactory = factory;\n}\n\nexport function localize(data: ILocalizeInfo | string, message: string, ...args: any[]): string {\n\t// allow-any-unicode-next-line\n\t// 第一次调用 localize 时如果没有默认语言，或语言包尚未初始化，则走初始化逻辑\n\tif (!defaultLocale || !initialized) {\n\t\tconst factory = localeFactory || defaultInitialLocaleBundle;\n\t\tif (factory) {\n\t\t\tdefaultLocale = factory();\n\t\t\t// allow-any-unicode-next-line\n\t\t\t// 由于目前仅支持中/英文，所以如果 locale 为 'zh-cn'，则表示已经设置了中文，locale 不设置的话，直接用传入的默认值\n\t\t\tif (defaultLocale?.toLowerCase() === 'zh-cn') {\n\t\t\t\tCURRENT_LOCALE_DATA = zhCnBundle;\n\t\t\t}\n\t\t\tinitialized = true;\n\t\t}\n\t}\n\n\tif (typeof data === 'string') {\n\t\tlet template: string | undefined;\n\t\tif (CURRENT_LOCALE_DATA && CURRENT_LOCALE_DATA[data]) {\n\t\t\ttemplate = CURRENT_LOCALE_DATA[data][message as unknown as number];\n\t\t}\n\n\t\tconst [defaultMessage, ...otherArgs] = args;\n\t\treturn _format(template || defaultMessage, otherArgs);\n\t}\n\n\treturn _format(message, args);\n}\n\nexport function localize2(data: ILocalizeInfo | string, message: string, ...args: any[]): ILocalizedString {\n\t// eslint-disable-next-line local/code-no-unexternalized-strings\n\tconst res = localize(data, message, ...args);\n\treturn {\n\t\toriginal: res,\n\t\tvalue: res\n\t};\n}\n\nexport function getConfiguredDefaultLocale(_: string) {\n\treturn undefined;\n}\n\nexport enum PreferenceScope {\n\tDefault,\n\tUser,\n}\n\nconst KAITIAN_LANGUAGE_KEY = 'general.language';\n\n\nfunction defaultInitialLocaleBundle() {\n\t// @ts-ignore\n\tif (!global.localStorage || !self.localStorage) {\n\t\treturn;\n\n\t}\n\tlet _locale = defaultLocale;\n\n\tif (!_locale) {\n\t\tif (localStorage[`${PreferenceScope.User}:${KAITIAN_LANGUAGE_KEY}`]) {\n\t\t\t_locale = localStorage[`${PreferenceScope.User}:${KAITIAN_LANGUAGE_KEY}`];\n\t\t} else if (localStorage[`${PreferenceScope.Default}:${KAITIAN_LANGUAGE_KEY}`]) {\n\t\t\t_locale = localStorage[`${PreferenceScope.Default}:${KAITIAN_LANGUAGE_KEY}`];\n\t\t} else {\n\t\t\t_locale = 'zh-CN';\n\t\t}\n\t}\n\n\treturn _locale;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// @ts-ignore\nconst zhCnBundle = require('../../dev/vs/editor/editor.main.nls.zh-cn.json');\n\nexport interface ILocalizeInfo {\n\tkey: string;\n\tcomment: string[];\n}\n\nexport interface ILocalizedString {\n\toriginal: string;\n\tvalue: string;\n}\n\nfunction _format(message: string, args: any[]): string {\n\tlet result: string;\n\tif (args.length === 0) {\n\t\tresult = message;\n\t} else {\n\t\tresult = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n\t\t\tconst index = rest[0];\n\t\t\treturn typeof args[index] !== 'undefined' ? args[index] : match;\n\t\t});\n\t}\n\treturn result;\n}\n\nlet defaultLocale: string | undefined;\nlet initialized = false;\nlet CURRENT_LOCALE_DATA: { [prop: string]: string[] } | null = null;\nlet localeFactory: () => string;\n\nexport type LocaleType = 'zh-CN' | 'en-US';\n\nexport function setLocale(locale: LocaleType): void {\n\tdefaultLocale = locale;\n}\n\nexport function loadLocaleBundle(bundle: { [prop: string]: string[] }) {\n\tCURRENT_LOCALE_DATA = bundle;\n}\n\nexport function configureLocaleFactory(factory: () => string): void {\n\tlocaleFactory = factory;\n}\n\nexport function localize(data: ILocalizeInfo | string, message: string, ...args: any[]): string {\n\t// allow-any-unicode-next-line\n\t// 第一次调用 localize 时如果没有默认语言，或语言包尚未初始化，则走初始化逻辑\n\tif (!defaultLocale || !initialized) {\n\t\tconst factory = localeFactory || defaultInitialLocaleBundle;\n\t\tif (factory) {\n\t\t\tdefaultLocale = factory();\n\t\t\t// allow-any-unicode-next-line\n\t\t\t// 由于目前仅支持中/英文，所以如果 locale 为 'zh-cn'，则表示已经设置了中文，locale 不设置的话，直接用传入的默认值\n\t\t\tif (defaultLocale?.toLowerCase() === 'zh-cn') {\n\t\t\t\tCURRENT_LOCALE_DATA = zhCnBundle;\n\t\t\t}\n\t\t\tinitialized = true;\n\t\t}\n\t}\n\n\tif (typeof data === 'string') {\n\t\tlet template: string | undefined;\n\t\tif (CURRENT_LOCALE_DATA && CURRENT_LOCALE_DATA[data]) {\n\t\t\ttemplate = CURRENT_LOCALE_DATA[data][message as unknown as number];\n\t\t}\n\n\t\tconst [defaultMessage, ...otherArgs] = args;\n\t\treturn _format(template || defaultMessage, otherArgs);\n\t}\n\n\treturn _format(message, args);\n}\n\nexport function localize2(data: ILocalizeInfo | string, message: string, ...args: any[]): ILocalizedString {\n\t// eslint-disable-next-line local/code-no-unexternalized-strings\n\tconst res = localize(data, message, ...args);\n\treturn {\n\t\toriginal: res,\n\t\tvalue: res\n\t};\n}\n\nexport function getConfiguredDefaultLocale(_: string) {\n\treturn undefined;\n}\n\nexport enum PreferenceScope {\n\tDefault,\n\tUser,\n}\n\nconst KAITIAN_LANGUAGE_KEY = 'general.language';\n\n\nfunction defaultInitialLocaleBundle() {\n\t// @ts-ignore\n\tif (!global.localStorage || !self.localStorage) {\n\t\treturn;\n\n\t}\n\tlet _locale = defaultLocale;\n\n\tif (!_locale) {\n\t\tif (localStorage[`${PreferenceScope.User}:${KAITIAN_LANGUAGE_KEY}`]) {\n\t\t\t_locale = localStorage[`${PreferenceScope.User}:${KAITIAN_LANGUAGE_KEY}`];\n\t\t} else if (localStorage[`${PreferenceScope.Default}:${KAITIAN_LANGUAGE_KEY}`]) {\n\t\t\t_locale = localStorage[`${PreferenceScope.Default}:${KAITIAN_LANGUAGE_KEY}`];\n\t\t} else {\n\t\t\t_locale = 'zh-CN';\n\t\t}\n\t}\n\n\treturn _locale;\n}\n"]}