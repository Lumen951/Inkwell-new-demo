"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nativeHoverDelegate = exports.WorkbenchHoverDelegate = exports.IHoverService = void 0;
const instantiation_1 = require("../../instantiation/common/instantiation");
const lifecycle_1 = require("../../../base/common/lifecycle");
const configuration_1 = require("../../configuration/common/configuration");
const dom_1 = require("../../../base/browser/dom");
exports.IHoverService = (0, instantiation_1.createDecorator)('hoverService');
let WorkbenchHoverDelegate = class WorkbenchHoverDelegate extends lifecycle_1.Disposable {
    get delay() {
        if (this.instantHover && Date.now() - this.lastHoverHideTime < this.timeLimit) {
            return 0; // show instantly when a hover was recently shown
        }
        return this._delay;
    }
    constructor(placement, instantHover, overrideOptions = {}, configurationService, hoverService) {
        super();
        this.placement = placement;
        this.instantHover = instantHover;
        this.overrideOptions = overrideOptions;
        this.configurationService = configurationService;
        this.hoverService = hoverService;
        this.lastHoverHideTime = Number.MAX_VALUE;
        this.timeLimit = 200;
        this.hoverDisposables = this._register(new lifecycle_1.DisposableStore());
        this._delay = this.configurationService.getValue('workbench.hover.delay');
        this._register(this.configurationService.onDidChangeConfiguration(e => {
            if (e.affectsConfiguration('workbench.hover.delay')) {
                this._delay = this.configurationService.getValue('workbench.hover.delay');
            }
        }));
    }
    showHover(options, focus) {
        const overrideOptions = typeof this.overrideOptions === 'function' ? this.overrideOptions(options, focus) : this.overrideOptions;
        // close hover on escape
        this.hoverDisposables.clear();
        const targets = options.target instanceof HTMLElement ? [options.target] : options.target.targetElements;
        for (const target of targets) {
            this.hoverDisposables.add((0, dom_1.addStandardDisposableListener)(target, 'keydown', (e) => {
                if (e.equals(9 /* KeyCode.Escape */)) {
                    this.hoverService.hideHover();
                }
            }));
        }
        return this.hoverService.showHover({
            ...options,
            persistence: {
                hideOnHover: true
            },
            ...overrideOptions
        }, focus);
    }
    setOptions(options) {
        this.overrideOptions = options;
    }
    onDidHideHover() {
        this.hoverDisposables.clear();
        if (this.instantHover) {
            this.lastHoverHideTime = Date.now();
        }
    }
};
exports.WorkbenchHoverDelegate = WorkbenchHoverDelegate;
exports.WorkbenchHoverDelegate = WorkbenchHoverDelegate = __decorate([
    __param(3, configuration_1.IConfigurationService),
    __param(4, exports.IHoverService)
], WorkbenchHoverDelegate);
// TODO@benibenj remove this, only temp fix for contextviews
exports.nativeHoverDelegate = {
    showHover: function () {
        throw new Error('Native hover function not implemented.');
    },
    delay: 0,
    showNativeHover: true
};
//# sourceMappingURL=hover.js.map