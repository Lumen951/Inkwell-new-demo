{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/platform/policy/common/policy.ts","vs/platform/policy/common/policy.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,sDAA4D;AAC5D,4DAAyD;AACzD,8DAA4D;AAC5D,4EAA2E;AAM9D,QAAA,cAAc,GAAG,IAAA,+BAAe,EAAiB,QAAQ,CAAC,CAAC;AAWxE,MAAsB,qBAAsB,SAAQ,sBAAU;IAA9D;;QAGW,sBAAiB,GAAwC,EAAE,CAAC;QAC5D,aAAQ,GAAG,IAAI,GAAG,EAA2B,CAAC;QAErC,iBAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAyB,CAAC,CAAC;QAC9E,gBAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;IAsBhD,CAAC;IApBA,KAAK,CAAC,uBAAuB,CAAC,iBAAsD;QACnF,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC;QACxD,IAAI,CAAC,iBAAiB,GAAG,EAAE,GAAG,iBAAiB,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAE7E,IAAI,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,EAAE,CAAC;YACzD,MAAM,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;QACxD,CAAC;QAED,OAAO,mBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACtG,CAAC;IAED,cAAc,CAAC,IAAgB;QAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,SAAS;QACR,OAAO,mBAAQ,CAAC,MAAM,CAA0G,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAC7Q,CAAC;CAGD;AA7BD,sDA6BC;AAED,MAAa,iBAAiB;IAA9B;QAEU,gBAAW,GAAG,aAAK,CAAC,IAAI,CAAC;IAInC,CAAC;IAHA,KAAK,CAAC,uBAAuB,KAAK,OAAO,EAAE,CAAC,CAAC,CAAC;IAC9C,cAAc,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;IACtC,SAAS,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;CACjC;AAND,8CAMC","file":"policy.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from '../../../base/common/collections';\nimport { Emitter, Event } from '../../../base/common/event';\nimport { Iterable } from '../../../base/common/iterator';\nimport { Disposable } from '../../../base/common/lifecycle';\nimport { createDecorator } from '../../instantiation/common/instantiation';\n\nexport type PolicyName = string;\nexport type PolicyValue = string | number;\nexport type PolicyDefinition = { type: 'string' | 'number' };\n\nexport const IPolicyService = createDecorator<IPolicyService>('policy');\n\nexport interface IPolicyService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChange: Event<readonly PolicyName[]>;\n\tupdatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<IStringDictionary<PolicyValue>>;\n\tgetPolicyValue(name: PolicyName): PolicyValue | undefined;\n\tserialize(): IStringDictionary<{ definition: PolicyDefinition; value: PolicyValue }> | undefined;\n}\n\nexport abstract class AbstractPolicyService extends Disposable implements IPolicyService {\n\treadonly _serviceBrand: undefined;\n\n\tprotected policyDefinitions: IStringDictionary<PolicyDefinition> = {};\n\tprotected policies = new Map<PolicyName, PolicyValue>();\n\n\tprotected readonly _onDidChange = this._register(new Emitter<readonly PolicyName[]>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tasync updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<IStringDictionary<PolicyValue>> {\n\t\tconst size = Object.keys(this.policyDefinitions).length;\n\t\tthis.policyDefinitions = { ...policyDefinitions, ...this.policyDefinitions };\n\n\t\tif (size !== Object.keys(this.policyDefinitions).length) {\n\t\t\tawait this._updatePolicyDefinitions(policyDefinitions);\n\t\t}\n\n\t\treturn Iterable.reduce(this.policies.entries(), (r, [name, value]) => ({ ...r, [name]: value }), {});\n\t}\n\n\tgetPolicyValue(name: PolicyName): PolicyValue | undefined {\n\t\treturn this.policies.get(name);\n\t}\n\n\tserialize(): IStringDictionary<{ definition: PolicyDefinition; value: PolicyValue }> {\n\t\treturn Iterable.reduce<[PolicyName, PolicyDefinition], IStringDictionary<{ definition: PolicyDefinition; value: PolicyValue }>>(Object.entries(this.policyDefinitions), (r, [name, definition]) => ({ ...r, [name]: { definition, value: this.policies.get(name)! } }), {});\n\t}\n\n\tprotected abstract _updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<void>;\n}\n\nexport class NullPolicyService implements IPolicyService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidChange = Event.None;\n\tasync updatePolicyDefinitions() { return {}; }\n\tgetPolicyValue() { return undefined; }\n\tserialize() { return undefined; }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from '../../../base/common/collections';\nimport { Emitter, Event } from '../../../base/common/event';\nimport { Iterable } from '../../../base/common/iterator';\nimport { Disposable } from '../../../base/common/lifecycle';\nimport { createDecorator } from '../../instantiation/common/instantiation';\n\nexport type PolicyName = string;\nexport type PolicyValue = string | number;\nexport type PolicyDefinition = { type: 'string' | 'number' };\n\nexport const IPolicyService = createDecorator<IPolicyService>('policy');\n\nexport interface IPolicyService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChange: Event<readonly PolicyName[]>;\n\tupdatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<IStringDictionary<PolicyValue>>;\n\tgetPolicyValue(name: PolicyName): PolicyValue | undefined;\n\tserialize(): IStringDictionary<{ definition: PolicyDefinition; value: PolicyValue }> | undefined;\n}\n\nexport abstract class AbstractPolicyService extends Disposable implements IPolicyService {\n\treadonly _serviceBrand: undefined;\n\n\tprotected policyDefinitions: IStringDictionary<PolicyDefinition> = {};\n\tprotected policies = new Map<PolicyName, PolicyValue>();\n\n\tprotected readonly _onDidChange = this._register(new Emitter<readonly PolicyName[]>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tasync updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<IStringDictionary<PolicyValue>> {\n\t\tconst size = Object.keys(this.policyDefinitions).length;\n\t\tthis.policyDefinitions = { ...policyDefinitions, ...this.policyDefinitions };\n\n\t\tif (size !== Object.keys(this.policyDefinitions).length) {\n\t\t\tawait this._updatePolicyDefinitions(policyDefinitions);\n\t\t}\n\n\t\treturn Iterable.reduce(this.policies.entries(), (r, [name, value]) => ({ ...r, [name]: value }), {});\n\t}\n\n\tgetPolicyValue(name: PolicyName): PolicyValue | undefined {\n\t\treturn this.policies.get(name);\n\t}\n\n\tserialize(): IStringDictionary<{ definition: PolicyDefinition; value: PolicyValue }> {\n\t\treturn Iterable.reduce<[PolicyName, PolicyDefinition], IStringDictionary<{ definition: PolicyDefinition; value: PolicyValue }>>(Object.entries(this.policyDefinitions), (r, [name, definition]) => ({ ...r, [name]: { definition, value: this.policies.get(name)! } }), {});\n\t}\n\n\tprotected abstract _updatePolicyDefinitions(policyDefinitions: IStringDictionary<PolicyDefinition>): Promise<void>;\n}\n\nexport class NullPolicyService implements IPolicyService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidChange = Event.None;\n\tasync updatePolicyDefinitions() { return {}; }\n\tgetPolicyValue() { return undefined; }\n\tserialize() { return undefined; }\n}\n"]}