{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/platform/progress/common/progress.ts","vs/platform/progress/common/progress.ts"],"names":[],"mappings":"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","file":"progress.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAction } from '../../../base/common/actions';\nimport { DeferredPromise } from '../../../base/common/async';\nimport { CancellationToken, CancellationTokenSource } from '../../../base/common/cancellation';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle';\nimport { createDecorator } from '../../instantiation/common/instantiation';\nimport { INotificationSource, NotificationPriority } from '../../notification/common/notification';\n\nexport const IProgressService = createDecorator<IProgressService>('progressService');\n\n/**\n * A progress service that can be used to report progress to various locations of the UI.\n */\nexport interface IProgressService {\n\n\treadonly _serviceBrand: undefined;\n\n\twithProgress<R>(\n\t\toptions: IProgressOptions | IProgressDialogOptions | IProgressNotificationOptions | IProgressWindowOptions | IProgressCompositeOptions,\n\t\ttask: (progress: IProgress<IProgressStep>) => Promise<R>,\n\t\tonDidCancel?: (choice?: number) => void\n\t): Promise<R>;\n}\n\nexport interface IProgressIndicator {\n\n\t/**\n\t * Show progress customized with the provided flags.\n\t */\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\n\t/**\n\t * Indicate progress for the duration of the provided promise. Progress will stop in\n\t * any case of promise completion, error or cancellation.\n\t */\n\tshowWhile(promise: Promise<unknown>, delay?: number): Promise<void>;\n}\n\nexport const enum ProgressLocation {\n\tExplorer = 1,\n\tScm = 3,\n\tExtensions = 5,\n\tWindow = 10,\n\tNotification = 15,\n\tDialog = 20\n}\n\nexport interface IProgressOptions {\n\treadonly location: ProgressLocation | string;\n\treadonly title?: string;\n\treadonly source?: string | INotificationSource;\n\treadonly total?: number;\n\treadonly cancellable?: boolean;\n\treadonly buttons?: string[];\n}\n\nexport interface IProgressNotificationOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Notification;\n\treadonly primaryActions?: readonly IAction[];\n\treadonly secondaryActions?: readonly IAction[];\n\treadonly delay?: number;\n\treadonly priority?: NotificationPriority;\n\treadonly type?: 'syncing' | 'loading';\n}\n\nexport interface IProgressDialogOptions extends IProgressOptions {\n\treadonly delay?: number;\n\treadonly detail?: string;\n\treadonly sticky?: boolean;\n}\n\nexport interface IProgressWindowOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Window;\n\treadonly command?: string;\n\treadonly type?: 'syncing' | 'loading';\n}\n\nexport interface IProgressCompositeOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Explorer | ProgressLocation.Extensions | ProgressLocation.Scm | string;\n\treadonly delay?: number;\n}\n\nexport interface IProgressStep {\n\tmessage?: string;\n\tincrement?: number;\n\ttotal?: number;\n}\n\nexport interface IProgressRunner {\n\ttotal(value: number): void;\n\tworked(value: number): void;\n\tdone(): void;\n}\n\nexport const emptyProgressRunner = Object.freeze<IProgressRunner>({\n\ttotal() { },\n\tworked() { },\n\tdone() { }\n});\n\nexport interface IProgress<T> {\n\treport(item: T): void;\n}\n\nexport class Progress<T> implements IProgress<T> {\n\n\tstatic readonly None = Object.freeze<IProgress<unknown>>({ report() { } });\n\n\tprivate _value?: T;\n\tget value(): T | undefined { return this._value; }\n\n\tconstructor(private callback: (data: T) => unknown) {\n\t}\n\n\treport(item: T) {\n\t\tthis._value = item;\n\t\tthis.callback(this._value);\n\t}\n}\n\nexport class AsyncProgress<T> implements IProgress<T> {\n\n\tprivate _value?: T;\n\tget value(): T | undefined { return this._value; }\n\n\tprivate _asyncQueue?: T[];\n\tprivate _processingAsyncQueue?: boolean;\n\tprivate _drainListener: (() => void) | undefined;\n\n\tconstructor(private callback: (data: T) => unknown) { }\n\n\treport(item: T) {\n\t\tif (!this._asyncQueue) {\n\t\t\tthis._asyncQueue = [item];\n\t\t} else {\n\t\t\tthis._asyncQueue.push(item);\n\t\t}\n\t\tthis._processAsyncQueue();\n\t}\n\n\tprivate async _processAsyncQueue() {\n\t\tif (this._processingAsyncQueue) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tthis._processingAsyncQueue = true;\n\n\t\t\twhile (this._asyncQueue && this._asyncQueue.length) {\n\t\t\t\tconst item = this._asyncQueue.shift()!;\n\t\t\t\tthis._value = item;\n\t\t\t\tawait this.callback(this._value);\n\t\t\t}\n\n\t\t} finally {\n\t\t\tthis._processingAsyncQueue = false;\n\t\t\tconst drainListener = this._drainListener;\n\t\t\tthis._drainListener = undefined;\n\t\t\tdrainListener?.();\n\t\t}\n\t}\n\n\tdrain(): Promise<void> {\n\t\tif (this._processingAsyncQueue) {\n\t\t\treturn new Promise<void>(resolve => {\n\t\t\t\tconst prevListener = this._drainListener;\n\t\t\t\tthis._drainListener = () => {\n\t\t\t\t\tprevListener?.();\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\n/**\n * A helper to show progress during a long running operation. If the operation\n * is started multiple times, only the last invocation will drive the progress.\n */\nexport interface IOperation {\n\tid: number;\n\tisCurrent: () => boolean;\n\ttoken: CancellationToken;\n\tstop(): void;\n}\n\n/**\n * RAII-style progress instance that allows imperative reporting and hides\n * once `dispose()` is called.\n */\nexport class UnmanagedProgress extends Disposable {\n\tprivate readonly deferred = new DeferredPromise<void>();\n\tprivate reporter?: IProgress<IProgressStep>;\n\tprivate lastStep?: IProgressStep;\n\n\tconstructor(\n\t\toptions: IProgressOptions | IProgressDialogOptions | IProgressNotificationOptions | IProgressWindowOptions | IProgressCompositeOptions,\n\t\t@IProgressService progressService: IProgressService,\n\t) {\n\t\tsuper();\n\t\tprogressService.withProgress(options, reporter => {\n\t\t\tthis.reporter = reporter;\n\t\t\tif (this.lastStep) {\n\t\t\t\treporter.report(this.lastStep);\n\t\t\t}\n\n\t\t\treturn this.deferred.p;\n\t\t});\n\n\t\tthis._register(toDisposable(() => this.deferred.complete()));\n\t}\n\n\treport(step: IProgressStep) {\n\t\tif (this.reporter) {\n\t\t\tthis.reporter.report(step);\n\t\t} else {\n\t\t\tthis.lastStep = step;\n\t\t}\n\t}\n}\n\nexport class LongRunningOperation extends Disposable {\n\tprivate currentOperationId = 0;\n\tprivate readonly currentOperationDisposables = this._register(new DisposableStore());\n\tprivate currentProgressRunner: IProgressRunner | undefined;\n\tprivate currentProgressTimeout: any;\n\n\tconstructor(\n\t\tprivate progressIndicator: IProgressIndicator\n\t) {\n\t\tsuper();\n\t}\n\n\tstart(progressDelay: number): IOperation {\n\n\t\t// Stop any previous operation\n\t\tthis.stop();\n\n\t\t// Start new\n\t\tconst newOperationId = ++this.currentOperationId;\n\t\tconst newOperationToken = new CancellationTokenSource();\n\t\tthis.currentProgressTimeout = setTimeout(() => {\n\t\t\tif (newOperationId === this.currentOperationId) {\n\t\t\t\tthis.currentProgressRunner = this.progressIndicator.show(true);\n\t\t\t}\n\t\t}, progressDelay);\n\n\t\tthis.currentOperationDisposables.add(toDisposable(() => clearTimeout(this.currentProgressTimeout)));\n\t\tthis.currentOperationDisposables.add(toDisposable(() => newOperationToken.cancel()));\n\t\tthis.currentOperationDisposables.add(toDisposable(() => this.currentProgressRunner ? this.currentProgressRunner.done() : undefined));\n\n\t\treturn {\n\t\t\tid: newOperationId,\n\t\t\ttoken: newOperationToken.token,\n\t\t\tstop: () => this.doStop(newOperationId),\n\t\t\tisCurrent: () => this.currentOperationId === newOperationId\n\t\t};\n\t}\n\n\tstop(): void {\n\t\tthis.doStop(this.currentOperationId);\n\t}\n\n\tprivate doStop(operationId: number): void {\n\t\tif (this.currentOperationId === operationId) {\n\t\t\tthis.currentOperationDisposables.clear();\n\t\t}\n\t}\n}\n\nexport const IEditorProgressService = createDecorator<IEditorProgressService>('editorProgressService');\n\n/**\n * A progress service that will report progress local to the editor triggered from.\n */\nexport interface IEditorProgressService extends IProgressIndicator {\n\n\treadonly _serviceBrand: undefined;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAction } from '../../../base/common/actions';\nimport { DeferredPromise } from '../../../base/common/async';\nimport { CancellationToken, CancellationTokenSource } from '../../../base/common/cancellation';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle';\nimport { createDecorator } from '../../instantiation/common/instantiation';\nimport { INotificationSource, NotificationPriority } from '../../notification/common/notification';\n\nexport const IProgressService = createDecorator<IProgressService>('progressService');\n\n/**\n * A progress service that can be used to report progress to various locations of the UI.\n */\nexport interface IProgressService {\n\n\treadonly _serviceBrand: undefined;\n\n\twithProgress<R>(\n\t\toptions: IProgressOptions | IProgressDialogOptions | IProgressNotificationOptions | IProgressWindowOptions | IProgressCompositeOptions,\n\t\ttask: (progress: IProgress<IProgressStep>) => Promise<R>,\n\t\tonDidCancel?: (choice?: number) => void\n\t): Promise<R>;\n}\n\nexport interface IProgressIndicator {\n\n\t/**\n\t * Show progress customized with the provided flags.\n\t */\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\n\t/**\n\t * Indicate progress for the duration of the provided promise. Progress will stop in\n\t * any case of promise completion, error or cancellation.\n\t */\n\tshowWhile(promise: Promise<unknown>, delay?: number): Promise<void>;\n}\n\nexport const enum ProgressLocation {\n\tExplorer = 1,\n\tScm = 3,\n\tExtensions = 5,\n\tWindow = 10,\n\tNotification = 15,\n\tDialog = 20\n}\n\nexport interface IProgressOptions {\n\treadonly location: ProgressLocation | string;\n\treadonly title?: string;\n\treadonly source?: string | INotificationSource;\n\treadonly total?: number;\n\treadonly cancellable?: boolean;\n\treadonly buttons?: string[];\n}\n\nexport interface IProgressNotificationOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Notification;\n\treadonly primaryActions?: readonly IAction[];\n\treadonly secondaryActions?: readonly IAction[];\n\treadonly delay?: number;\n\treadonly priority?: NotificationPriority;\n\treadonly type?: 'syncing' | 'loading';\n}\n\nexport interface IProgressDialogOptions extends IProgressOptions {\n\treadonly delay?: number;\n\treadonly detail?: string;\n\treadonly sticky?: boolean;\n}\n\nexport interface IProgressWindowOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Window;\n\treadonly command?: string;\n\treadonly type?: 'syncing' | 'loading';\n}\n\nexport interface IProgressCompositeOptions extends IProgressOptions {\n\treadonly location: ProgressLocation.Explorer | ProgressLocation.Extensions | ProgressLocation.Scm | string;\n\treadonly delay?: number;\n}\n\nexport interface IProgressStep {\n\tmessage?: string;\n\tincrement?: number;\n\ttotal?: number;\n}\n\nexport interface IProgressRunner {\n\ttotal(value: number): void;\n\tworked(value: number): void;\n\tdone(): void;\n}\n\nexport const emptyProgressRunner = Object.freeze<IProgressRunner>({\n\ttotal() { },\n\tworked() { },\n\tdone() { }\n});\n\nexport interface IProgress<T> {\n\treport(item: T): void;\n}\n\nexport class Progress<T> implements IProgress<T> {\n\n\tstatic readonly None = Object.freeze<IProgress<unknown>>({ report() { } });\n\n\tprivate _value?: T;\n\tget value(): T | undefined { return this._value; }\n\n\tconstructor(private callback: (data: T) => unknown) {\n\t}\n\n\treport(item: T) {\n\t\tthis._value = item;\n\t\tthis.callback(this._value);\n\t}\n}\n\nexport class AsyncProgress<T> implements IProgress<T> {\n\n\tprivate _value?: T;\n\tget value(): T | undefined { return this._value; }\n\n\tprivate _asyncQueue?: T[];\n\tprivate _processingAsyncQueue?: boolean;\n\tprivate _drainListener: (() => void) | undefined;\n\n\tconstructor(private callback: (data: T) => unknown) { }\n\n\treport(item: T) {\n\t\tif (!this._asyncQueue) {\n\t\t\tthis._asyncQueue = [item];\n\t\t} else {\n\t\t\tthis._asyncQueue.push(item);\n\t\t}\n\t\tthis._processAsyncQueue();\n\t}\n\n\tprivate async _processAsyncQueue() {\n\t\tif (this._processingAsyncQueue) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tthis._processingAsyncQueue = true;\n\n\t\t\twhile (this._asyncQueue && this._asyncQueue.length) {\n\t\t\t\tconst item = this._asyncQueue.shift()!;\n\t\t\t\tthis._value = item;\n\t\t\t\tawait this.callback(this._value);\n\t\t\t}\n\n\t\t} finally {\n\t\t\tthis._processingAsyncQueue = false;\n\t\t\tconst drainListener = this._drainListener;\n\t\t\tthis._drainListener = undefined;\n\t\t\tdrainListener?.();\n\t\t}\n\t}\n\n\tdrain(): Promise<void> {\n\t\tif (this._processingAsyncQueue) {\n\t\t\treturn new Promise<void>(resolve => {\n\t\t\t\tconst prevListener = this._drainListener;\n\t\t\t\tthis._drainListener = () => {\n\t\t\t\t\tprevListener?.();\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\n/**\n * A helper to show progress during a long running operation. If the operation\n * is started multiple times, only the last invocation will drive the progress.\n */\nexport interface IOperation {\n\tid: number;\n\tisCurrent: () => boolean;\n\ttoken: CancellationToken;\n\tstop(): void;\n}\n\n/**\n * RAII-style progress instance that allows imperative reporting and hides\n * once `dispose()` is called.\n */\nexport class UnmanagedProgress extends Disposable {\n\tprivate readonly deferred = new DeferredPromise<void>();\n\tprivate reporter?: IProgress<IProgressStep>;\n\tprivate lastStep?: IProgressStep;\n\n\tconstructor(\n\t\toptions: IProgressOptions | IProgressDialogOptions | IProgressNotificationOptions | IProgressWindowOptions | IProgressCompositeOptions,\n\t\t@IProgressService progressService: IProgressService,\n\t) {\n\t\tsuper();\n\t\tprogressService.withProgress(options, reporter => {\n\t\t\tthis.reporter = reporter;\n\t\t\tif (this.lastStep) {\n\t\t\t\treporter.report(this.lastStep);\n\t\t\t}\n\n\t\t\treturn this.deferred.p;\n\t\t});\n\n\t\tthis._register(toDisposable(() => this.deferred.complete()));\n\t}\n\n\treport(step: IProgressStep) {\n\t\tif (this.reporter) {\n\t\t\tthis.reporter.report(step);\n\t\t} else {\n\t\t\tthis.lastStep = step;\n\t\t}\n\t}\n}\n\nexport class LongRunningOperation extends Disposable {\n\tprivate currentOperationId = 0;\n\tprivate readonly currentOperationDisposables = this._register(new DisposableStore());\n\tprivate currentProgressRunner: IProgressRunner | undefined;\n\tprivate currentProgressTimeout: any;\n\n\tconstructor(\n\t\tprivate progressIndicator: IProgressIndicator\n\t) {\n\t\tsuper();\n\t}\n\n\tstart(progressDelay: number): IOperation {\n\n\t\t// Stop any previous operation\n\t\tthis.stop();\n\n\t\t// Start new\n\t\tconst newOperationId = ++this.currentOperationId;\n\t\tconst newOperationToken = new CancellationTokenSource();\n\t\tthis.currentProgressTimeout = setTimeout(() => {\n\t\t\tif (newOperationId === this.currentOperationId) {\n\t\t\t\tthis.currentProgressRunner = this.progressIndicator.show(true);\n\t\t\t}\n\t\t}, progressDelay);\n\n\t\tthis.currentOperationDisposables.add(toDisposable(() => clearTimeout(this.currentProgressTimeout)));\n\t\tthis.currentOperationDisposables.add(toDisposable(() => newOperationToken.cancel()));\n\t\tthis.currentOperationDisposables.add(toDisposable(() => this.currentProgressRunner ? this.currentProgressRunner.done() : undefined));\n\n\t\treturn {\n\t\t\tid: newOperationId,\n\t\t\ttoken: newOperationToken.token,\n\t\t\tstop: () => this.doStop(newOperationId),\n\t\t\tisCurrent: () => this.currentOperationId === newOperationId\n\t\t};\n\t}\n\n\tstop(): void {\n\t\tthis.doStop(this.currentOperationId);\n\t}\n\n\tprivate doStop(operationId: number): void {\n\t\tif (this.currentOperationId === operationId) {\n\t\t\tthis.currentOperationDisposables.clear();\n\t\t}\n\t}\n}\n\nexport const IEditorProgressService = createDecorator<IEditorProgressService>('editorProgressService');\n\n/**\n * A progress service that will report progress local to the editor triggered from.\n */\nexport interface IEditorProgressService extends IProgressIndicator {\n\n\treadonly _serviceBrand: undefined;\n}\n"]}