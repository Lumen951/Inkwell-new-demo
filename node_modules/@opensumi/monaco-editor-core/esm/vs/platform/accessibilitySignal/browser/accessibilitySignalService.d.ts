import { Disposable, IDisposable } from '../../../base/common/lifecycle';
import { IAccessibilityService } from '../../accessibility/common/accessibility';
import { IConfigurationService } from '../../configuration/common/configuration';
import { Event } from '../../../base/common/event';
import { ITelemetryService } from '../../telemetry/common/telemetry';
export declare const IAccessibilitySignalService: import("../../instantiation/common/instantiation").ServiceIdentifier<IAccessibilitySignalService>;
export interface IAccessibilitySignalService {
    readonly _serviceBrand: undefined;
    playSignal(cue: AccessibilitySignal, options?: IAccessbilitySignalOptions): Promise<void>;
    playAccessibilitySignals(cues: (AccessibilitySignal | {
        cue: AccessibilitySignal;
        source: string;
    })[]): Promise<void>;
    isSoundEnabled(cue: AccessibilitySignal): boolean;
    isAnnouncementEnabled(cue: AccessibilitySignal): boolean;
    onSoundEnabledChanged(cue: AccessibilitySignal): Event<void>;
    onAnnouncementEnabledChanged(cue: AccessibilitySignal): Event<void>;
    playSound(cue: Sound, allowManyInParallel?: boolean): Promise<void>;
    playSignalLoop(cue: AccessibilitySignal, milliseconds: number): IDisposable;
}
export interface IAccessbilitySignalOptions {
    allowManyInParallel?: boolean;
    source?: string;
    /**
     * For actions like save or format, depending on the
     * configured value, we will only
     * play the sound if the user triggered the action.
     */
    userGesture?: boolean;
}
export declare class AccessibilitySignalService extends Disposable implements IAccessibilitySignalService {
    private readonly configurationService;
    private readonly accessibilityService;
    private readonly telemetryService;
    readonly _serviceBrand: undefined;
    private readonly sounds;
    private readonly screenReaderAttached;
    private readonly sentTelemetry;
    constructor(configurationService: IConfigurationService, accessibilityService: IAccessibilityService, telemetryService: ITelemetryService);
    playSignal(signal: AccessibilitySignal, options?: IAccessbilitySignalOptions): Promise<void>;
    playAccessibilitySignals(cues: (AccessibilitySignal | {
        cue: AccessibilitySignal;
        source: string;
    })[]): Promise<void>;
    private sendSignalTelemetry;
    private getVolumeInPercent;
    private readonly playingSounds;
    playSound(sound: Sound, allowManyInParallel?: boolean): Promise<void>;
    playSignalLoop(signal: AccessibilitySignal, milliseconds: number): IDisposable;
    private readonly obsoleteAccessibilitySignalsEnabled;
    private readonly isSoundEnabledCache;
    private readonly isAnnouncementEnabledCache;
    isAnnouncementEnabled(signal: AccessibilitySignal, userGesture?: boolean): boolean;
    isSoundEnabled(signal: AccessibilitySignal, userGesture?: boolean): boolean;
    onSoundEnabledChanged(signal: AccessibilitySignal): Event<void>;
    onAnnouncementEnabledChanged(cue: AccessibilitySignal): Event<void>;
}
/**
 * Corresponds to the audio files in ./media.
*/
export declare class Sound {
    readonly fileName: string;
    private static register;
    static readonly error: Sound;
    static readonly warning: Sound;
    static readonly foldedArea: Sound;
    static readonly break: Sound;
    static readonly quickFixes: Sound;
    static readonly taskCompleted: Sound;
    static readonly taskFailed: Sound;
    static readonly terminalBell: Sound;
    static readonly diffLineInserted: Sound;
    static readonly diffLineDeleted: Sound;
    static readonly diffLineModified: Sound;
    static readonly chatRequestSent: Sound;
    static readonly chatResponsePending: Sound;
    static readonly chatResponseReceived1: Sound;
    static readonly chatResponseReceived2: Sound;
    static readonly chatResponseReceived3: Sound;
    static readonly chatResponseReceived4: Sound;
    static readonly clear: Sound;
    static readonly save: Sound;
    static readonly format: Sound;
    private constructor();
}
export declare class SoundSource {
    readonly randomOneOf: Sound[];
    constructor(randomOneOf: Sound[]);
    getSound(deterministic?: boolean): Sound;
}
export declare enum AccessibilityAlertSettingId {
    Save = "accessibility.alert.save",
    Format = "accessibility.alert.format",
    Clear = "accessibility.alert.clear",
    Breakpoint = "accessibility.alert.breakpoint",
    Error = "accessibility.alert.error",
    Warning = "accessibility.alert.warning",
    FoldedArea = "accessibility.alert.foldedArea",
    TerminalQuickFix = "accessibility.alert.terminalQuickFix",
    TerminalBell = "accessibility.alert.terminalBell",
    TerminalCommandFailed = "accessibility.alert.terminalCommandFailed",
    TaskCompleted = "accessibility.alert.taskCompleted",
    TaskFailed = "accessibility.alert.taskFailed",
    ChatRequestSent = "accessibility.alert.chatRequestSent",
    NotebookCellCompleted = "accessibility.alert.notebookCellCompleted",
    NotebookCellFailed = "accessibility.alert.notebookCellFailed",
    OnDebugBreak = "accessibility.alert.onDebugBreak",
    NoInlayHints = "accessibility.alert.noInlayHints",
    LineHasBreakpoint = "accessibility.alert.lineHasBreakpoint",
    ChatResponsePending = "accessibility.alert.chatResponsePending"
}
export declare class AccessibilitySignal {
    readonly sound: SoundSource;
    readonly name: string;
    readonly legacySoundSettingsKey: string;
    readonly settingsKey: string;
    readonly legacyAnnouncementSettingsKey?: string | undefined;
    readonly announcementMessage?: string | undefined;
    private static _signals;
    private static register;
    static get allAccessibilitySignals(): AccessibilitySignal[];
    static readonly error: AccessibilitySignal;
    static readonly warning: AccessibilitySignal;
    static readonly foldedArea: AccessibilitySignal;
    static readonly break: AccessibilitySignal;
    static readonly inlineSuggestion: AccessibilitySignal;
    static readonly terminalQuickFix: AccessibilitySignal;
    static readonly onDebugBreak: AccessibilitySignal;
    static readonly noInlayHints: AccessibilitySignal;
    static readonly taskCompleted: AccessibilitySignal;
    static readonly taskFailed: AccessibilitySignal;
    static readonly terminalCommandFailed: AccessibilitySignal;
    static readonly terminalBell: AccessibilitySignal;
    static readonly notebookCellCompleted: AccessibilitySignal;
    static readonly notebookCellFailed: AccessibilitySignal;
    static readonly diffLineInserted: AccessibilitySignal;
    static readonly diffLineDeleted: AccessibilitySignal;
    static readonly diffLineModified: AccessibilitySignal;
    static readonly chatRequestSent: AccessibilitySignal;
    static readonly chatResponseReceived: AccessibilitySignal;
    static readonly chatResponsePending: AccessibilitySignal;
    static readonly clear: AccessibilitySignal;
    static readonly save: AccessibilitySignal;
    static readonly format: AccessibilitySignal;
    private constructor();
}
