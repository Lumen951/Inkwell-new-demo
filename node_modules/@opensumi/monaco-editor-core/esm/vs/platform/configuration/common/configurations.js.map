{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/platform/configuration/common/configurations.ts","vs/platform/configuration/common/configurations.ts"],"names":[],"mappings":"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","file":"configurations.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from '../../../base/common/arrays';\nimport { IStringDictionary } from '../../../base/common/collections';\nimport { Emitter, Event } from '../../../base/common/event';\nimport { Disposable } from '../../../base/common/lifecycle';\nimport { equals } from '../../../base/common/objects';\nimport { isEmptyObject } from '../../../base/common/types';\nimport { ConfigurationModel } from './configurationModels';\nimport { Extensions, IConfigurationRegistry, IRegisteredConfigurationPropertySchema } from './configurationRegistry';\nimport { ILogService } from '../../log/common/log';\nimport { IPolicyService, PolicyDefinition, PolicyName, PolicyValue } from '../../policy/common/policy';\nimport { Registry } from '../../registry/common/platform';\n\nexport class DefaultConfiguration extends Disposable {\n\n\tprivate readonly _onDidChangeConfiguration = this._register(new Emitter<{ defaults: ConfigurationModel; properties: string[] }>());\n\treadonly onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n\n\tprivate _configurationModel = new ConfigurationModel();\n\tget configurationModel(): ConfigurationModel {\n\t\treturn this._configurationModel;\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tthis.resetConfigurationModel();\n\t\tthis._register(Registry.as<IConfigurationRegistry>(Extensions.Configuration).onDidUpdateConfiguration(({ properties, defaultsOverrides }) => this.onDidUpdateConfiguration(Array.from(properties), defaultsOverrides)));\n\t\treturn this.configurationModel;\n\t}\n\n\treload(): ConfigurationModel {\n\t\tthis.resetConfigurationModel();\n\t\treturn this.configurationModel;\n\t}\n\n\tprotected onDidUpdateConfiguration(properties: string[], defaultsOverrides?: boolean): void {\n\t\tthis.updateConfigurationModel(properties, Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties());\n\t\tthis._onDidChangeConfiguration.fire({ defaults: this.configurationModel, properties });\n\t}\n\n\tprotected getConfigurationDefaultOverrides(): IStringDictionary<any> {\n\t\treturn {};\n\t}\n\n\tprivate resetConfigurationModel(): void {\n\t\tthis._configurationModel = new ConfigurationModel();\n\t\tconst properties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\tthis.updateConfigurationModel(Object.keys(properties), properties);\n\t}\n\n\tprivate updateConfigurationModel(properties: string[], configurationProperties: IStringDictionary<IRegisteredConfigurationPropertySchema>): void {\n\t\tconst configurationDefaultsOverrides = this.getConfigurationDefaultOverrides();\n\t\tfor (const key of properties) {\n\t\t\tconst defaultOverrideValue = configurationDefaultsOverrides[key];\n\t\t\tconst propertySchema = configurationProperties[key];\n\t\t\tif (defaultOverrideValue !== undefined) {\n\t\t\t\tthis._configurationModel.addValue(key, defaultOverrideValue);\n\t\t\t} else if (propertySchema) {\n\t\t\t\tthis._configurationModel.addValue(key, propertySchema.default);\n\t\t\t} else {\n\t\t\t\tthis._configurationModel.removeValue(key);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nexport interface IPolicyConfiguration {\n\treadonly onDidChangeConfiguration: Event<ConfigurationModel>;\n\treadonly configurationModel: ConfigurationModel;\n\tinitialize(): Promise<ConfigurationModel>;\n}\n\nexport class NullPolicyConfiguration implements IPolicyConfiguration {\n\treadonly onDidChangeConfiguration = Event.None;\n\treadonly configurationModel = new ConfigurationModel();\n\tasync initialize() { return this.configurationModel; }\n}\n\nexport class PolicyConfiguration extends Disposable implements IPolicyConfiguration {\n\n\tprivate readonly _onDidChangeConfiguration = this._register(new Emitter<ConfigurationModel>());\n\treadonly onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n\n\tprivate _configurationModel = new ConfigurationModel();\n\tget configurationModel() { return this._configurationModel; }\n\n\tconstructor(\n\t\tprivate readonly defaultConfiguration: DefaultConfiguration,\n\t\t@IPolicyService private readonly policyService: IPolicyService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tthis.logService.trace('PolicyConfiguration#initialize');\n\t\tthis.update(await this.updatePolicyDefinitions(this.defaultConfiguration.configurationModel.keys), false);\n\t\tthis._register(this.policyService.onDidChange(policyNames => this.onDidChangePolicies(policyNames)));\n\t\tthis._register(this.defaultConfiguration.onDidChangeConfiguration(async ({ properties }) => this.update(await this.updatePolicyDefinitions(properties), true)));\n\t\treturn this._configurationModel;\n\t}\n\n\tprivate async updatePolicyDefinitions(properties: string[]): Promise<string[]> {\n\t\tthis.logService.trace('PolicyConfiguration#updatePolicyDefinitions', properties);\n\t\tconst policyDefinitions: IStringDictionary<PolicyDefinition> = {};\n\t\tconst keys: string[] = [];\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\n\t\tfor (const key of properties) {\n\t\t\tconst config = configurationProperties[key];\n\t\t\tif (!config) {\n\t\t\t\t// Config is removed. So add it to the list if in case it was registered as policy before\n\t\t\t\tkeys.push(key);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (config.policy) {\n\t\t\t\tif (config.type !== 'string' && config.type !== 'number') {\n\t\t\t\t\tthis.logService.warn(`Policy ${config.policy.name} has unsupported type ${config.type}`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tkeys.push(key);\n\t\t\t\tpolicyDefinitions[config.policy.name] = { type: config.type };\n\t\t\t}\n\t\t}\n\n\t\tif (!isEmptyObject(policyDefinitions)) {\n\t\t\tawait this.policyService.updatePolicyDefinitions(policyDefinitions);\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\tprivate onDidChangePolicies(policyNames: readonly PolicyName[]): void {\n\t\tthis.logService.trace('PolicyConfiguration#onDidChangePolicies', policyNames);\n\t\tconst policyConfigurations = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getPolicyConfigurations();\n\t\tconst keys = coalesce(policyNames.map(policyName => policyConfigurations.get(policyName)));\n\t\tthis.update(keys, true);\n\t}\n\n\tprivate update(keys: string[], trigger: boolean): void {\n\t\tthis.logService.trace('PolicyConfiguration#update', keys);\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\tconst changed: [string, PolicyValue | undefined][] = [];\n\t\tconst wasEmpty = this._configurationModel.isEmpty();\n\n\t\tfor (const key of keys) {\n\t\t\tconst policyName = configurationProperties[key]?.policy?.name;\n\t\t\tif (policyName) {\n\t\t\t\tconst policyValue = this.policyService.getPolicyValue(policyName);\n\t\t\t\tif (wasEmpty ? policyValue !== undefined : !equals(this._configurationModel.getValue(key), policyValue)) {\n\t\t\t\t\tchanged.push([key, policyValue]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._configurationModel.getValue(key) !== undefined) {\n\t\t\t\t\tchanged.push([key, undefined]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (changed.length) {\n\t\t\tthis.logService.trace('PolicyConfiguration#changed', changed);\n\t\t\tconst old = this._configurationModel;\n\t\t\tthis._configurationModel = new ConfigurationModel();\n\t\t\tfor (const key of old.keys) {\n\t\t\t\tthis._configurationModel.setValue(key, old.getValue(key));\n\t\t\t}\n\t\t\tfor (const [key, policyValue] of changed) {\n\t\t\t\tif (policyValue === undefined) {\n\t\t\t\t\tthis._configurationModel.removeValue(key);\n\t\t\t\t} else {\n\t\t\t\t\tthis._configurationModel.setValue(key, policyValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (trigger) {\n\t\t\t\tthis._onDidChangeConfiguration.fire(this._configurationModel);\n\t\t\t}\n\t\t}\n\t}\n\n\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from '../../../base/common/arrays';\nimport { IStringDictionary } from '../../../base/common/collections';\nimport { Emitter, Event } from '../../../base/common/event';\nimport { Disposable } from '../../../base/common/lifecycle';\nimport { equals } from '../../../base/common/objects';\nimport { isEmptyObject } from '../../../base/common/types';\nimport { ConfigurationModel } from './configurationModels';\nimport { Extensions, IConfigurationRegistry, IRegisteredConfigurationPropertySchema } from './configurationRegistry';\nimport { ILogService } from '../../log/common/log';\nimport { IPolicyService, PolicyDefinition, PolicyName, PolicyValue } from '../../policy/common/policy';\nimport { Registry } from '../../registry/common/platform';\n\nexport class DefaultConfiguration extends Disposable {\n\n\tprivate readonly _onDidChangeConfiguration = this._register(new Emitter<{ defaults: ConfigurationModel; properties: string[] }>());\n\treadonly onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n\n\tprivate _configurationModel = new ConfigurationModel();\n\tget configurationModel(): ConfigurationModel {\n\t\treturn this._configurationModel;\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tthis.resetConfigurationModel();\n\t\tthis._register(Registry.as<IConfigurationRegistry>(Extensions.Configuration).onDidUpdateConfiguration(({ properties, defaultsOverrides }) => this.onDidUpdateConfiguration(Array.from(properties), defaultsOverrides)));\n\t\treturn this.configurationModel;\n\t}\n\n\treload(): ConfigurationModel {\n\t\tthis.resetConfigurationModel();\n\t\treturn this.configurationModel;\n\t}\n\n\tprotected onDidUpdateConfiguration(properties: string[], defaultsOverrides?: boolean): void {\n\t\tthis.updateConfigurationModel(properties, Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties());\n\t\tthis._onDidChangeConfiguration.fire({ defaults: this.configurationModel, properties });\n\t}\n\n\tprotected getConfigurationDefaultOverrides(): IStringDictionary<any> {\n\t\treturn {};\n\t}\n\n\tprivate resetConfigurationModel(): void {\n\t\tthis._configurationModel = new ConfigurationModel();\n\t\tconst properties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\tthis.updateConfigurationModel(Object.keys(properties), properties);\n\t}\n\n\tprivate updateConfigurationModel(properties: string[], configurationProperties: IStringDictionary<IRegisteredConfigurationPropertySchema>): void {\n\t\tconst configurationDefaultsOverrides = this.getConfigurationDefaultOverrides();\n\t\tfor (const key of properties) {\n\t\t\tconst defaultOverrideValue = configurationDefaultsOverrides[key];\n\t\t\tconst propertySchema = configurationProperties[key];\n\t\t\tif (defaultOverrideValue !== undefined) {\n\t\t\t\tthis._configurationModel.addValue(key, defaultOverrideValue);\n\t\t\t} else if (propertySchema) {\n\t\t\t\tthis._configurationModel.addValue(key, propertySchema.default);\n\t\t\t} else {\n\t\t\t\tthis._configurationModel.removeValue(key);\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nexport interface IPolicyConfiguration {\n\treadonly onDidChangeConfiguration: Event<ConfigurationModel>;\n\treadonly configurationModel: ConfigurationModel;\n\tinitialize(): Promise<ConfigurationModel>;\n}\n\nexport class NullPolicyConfiguration implements IPolicyConfiguration {\n\treadonly onDidChangeConfiguration = Event.None;\n\treadonly configurationModel = new ConfigurationModel();\n\tasync initialize() { return this.configurationModel; }\n}\n\nexport class PolicyConfiguration extends Disposable implements IPolicyConfiguration {\n\n\tprivate readonly _onDidChangeConfiguration = this._register(new Emitter<ConfigurationModel>());\n\treadonly onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n\n\tprivate _configurationModel = new ConfigurationModel();\n\tget configurationModel() { return this._configurationModel; }\n\n\tconstructor(\n\t\tprivate readonly defaultConfiguration: DefaultConfiguration,\n\t\t@IPolicyService private readonly policyService: IPolicyService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync initialize(): Promise<ConfigurationModel> {\n\t\tthis.logService.trace('PolicyConfiguration#initialize');\n\t\tthis.update(await this.updatePolicyDefinitions(this.defaultConfiguration.configurationModel.keys), false);\n\t\tthis._register(this.policyService.onDidChange(policyNames => this.onDidChangePolicies(policyNames)));\n\t\tthis._register(this.defaultConfiguration.onDidChangeConfiguration(async ({ properties }) => this.update(await this.updatePolicyDefinitions(properties), true)));\n\t\treturn this._configurationModel;\n\t}\n\n\tprivate async updatePolicyDefinitions(properties: string[]): Promise<string[]> {\n\t\tthis.logService.trace('PolicyConfiguration#updatePolicyDefinitions', properties);\n\t\tconst policyDefinitions: IStringDictionary<PolicyDefinition> = {};\n\t\tconst keys: string[] = [];\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\n\t\tfor (const key of properties) {\n\t\t\tconst config = configurationProperties[key];\n\t\t\tif (!config) {\n\t\t\t\t// Config is removed. So add it to the list if in case it was registered as policy before\n\t\t\t\tkeys.push(key);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (config.policy) {\n\t\t\t\tif (config.type !== 'string' && config.type !== 'number') {\n\t\t\t\t\tthis.logService.warn(`Policy ${config.policy.name} has unsupported type ${config.type}`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tkeys.push(key);\n\t\t\t\tpolicyDefinitions[config.policy.name] = { type: config.type };\n\t\t\t}\n\t\t}\n\n\t\tif (!isEmptyObject(policyDefinitions)) {\n\t\t\tawait this.policyService.updatePolicyDefinitions(policyDefinitions);\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\tprivate onDidChangePolicies(policyNames: readonly PolicyName[]): void {\n\t\tthis.logService.trace('PolicyConfiguration#onDidChangePolicies', policyNames);\n\t\tconst policyConfigurations = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getPolicyConfigurations();\n\t\tconst keys = coalesce(policyNames.map(policyName => policyConfigurations.get(policyName)));\n\t\tthis.update(keys, true);\n\t}\n\n\tprivate update(keys: string[], trigger: boolean): void {\n\t\tthis.logService.trace('PolicyConfiguration#update', keys);\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\tconst changed: [string, PolicyValue | undefined][] = [];\n\t\tconst wasEmpty = this._configurationModel.isEmpty();\n\n\t\tfor (const key of keys) {\n\t\t\tconst policyName = configurationProperties[key]?.policy?.name;\n\t\t\tif (policyName) {\n\t\t\t\tconst policyValue = this.policyService.getPolicyValue(policyName);\n\t\t\t\tif (wasEmpty ? policyValue !== undefined : !equals(this._configurationModel.getValue(key), policyValue)) {\n\t\t\t\t\tchanged.push([key, policyValue]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._configurationModel.getValue(key) !== undefined) {\n\t\t\t\t\tchanged.push([key, undefined]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (changed.length) {\n\t\t\tthis.logService.trace('PolicyConfiguration#changed', changed);\n\t\t\tconst old = this._configurationModel;\n\t\t\tthis._configurationModel = new ConfigurationModel();\n\t\t\tfor (const key of old.keys) {\n\t\t\t\tthis._configurationModel.setValue(key, old.getValue(key));\n\t\t\t}\n\t\t\tfor (const [key, policyValue] of changed) {\n\t\t\t\tif (policyValue === undefined) {\n\t\t\t\t\tthis._configurationModel.removeValue(key);\n\t\t\t\t} else {\n\t\t\t\t\tthis._configurationModel.setValue(key, policyValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (trigger) {\n\t\t\t\tthis._onDidChangeConfiguration.fire(this._configurationModel);\n\t\t\t}\n\t\t}\n\t}\n\n\n}\n"]}