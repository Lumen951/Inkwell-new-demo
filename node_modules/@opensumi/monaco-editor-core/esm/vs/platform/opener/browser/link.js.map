{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/platform/opener/browser/link.ts","vs/platform/opener/browser/link.ts"],"names":[],"mappings":"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","file":"link.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { $, append, EventHelper, EventLike, clearNode } from '../../../base/browser/dom';\nimport { DomEmitter } from '../../../base/browser/event';\nimport { StandardKeyboardEvent } from '../../../base/browser/keyboardEvent';\nimport { EventType as TouchEventType, Gesture } from '../../../base/browser/touch';\nimport { Event } from '../../../base/common/event';\nimport { KeyCode } from '../../../base/common/keyCodes';\nimport { Disposable } from '../../../base/common/lifecycle';\nimport { IOpenerService } from '../common/opener';\nimport './link.css';\n\nexport interface ILinkDescriptor {\n\treadonly label: string | HTMLElement;\n\treadonly href: string;\n\treadonly title?: string;\n\treadonly tabIndex?: number;\n}\n\nexport interface ILinkOptions {\n\treadonly opener?: (href: string) => void;\n\treadonly textLinkForeground?: string;\n}\n\nexport class Link extends Disposable {\n\n\tprivate el: HTMLAnchorElement;\n\tprivate _enabled: boolean = true;\n\n\tget enabled(): boolean {\n\t\treturn this._enabled;\n\t}\n\n\tset enabled(enabled: boolean) {\n\t\tif (enabled) {\n\t\t\tthis.el.setAttribute('aria-disabled', 'false');\n\t\t\tthis.el.tabIndex = 0;\n\t\t\tthis.el.style.pointerEvents = 'auto';\n\t\t\tthis.el.style.opacity = '1';\n\t\t\tthis.el.style.cursor = 'pointer';\n\t\t\tthis._enabled = false;\n\t\t} else {\n\t\t\tthis.el.setAttribute('aria-disabled', 'true');\n\t\t\tthis.el.tabIndex = -1;\n\t\t\tthis.el.style.pointerEvents = 'none';\n\t\t\tthis.el.style.opacity = '0.4';\n\t\t\tthis.el.style.cursor = 'default';\n\t\t\tthis._enabled = true;\n\t\t}\n\n\t\tthis._enabled = enabled;\n\t}\n\n\tset link(link: ILinkDescriptor) {\n\t\tif (typeof link.label === 'string') {\n\t\t\tthis.el.textContent = link.label;\n\t\t} else {\n\t\t\tclearNode(this.el);\n\t\t\tthis.el.appendChild(link.label);\n\t\t}\n\n\t\tthis.el.href = link.href;\n\n\t\tif (typeof link.tabIndex !== 'undefined') {\n\t\t\tthis.el.tabIndex = link.tabIndex;\n\t\t}\n\n\t\tif (typeof link.title !== 'undefined') {\n\t\t\tthis.el.title = link.title;\n\t\t}\n\n\t\tthis._link = link;\n\t}\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tprivate _link: ILinkDescriptor,\n\t\toptions: ILinkOptions = {},\n\t\t@IOpenerService openerService: IOpenerService\n\t) {\n\t\tsuper();\n\n\t\tthis.el = append(container, $('a.monaco-link', {\n\t\t\ttabIndex: _link.tabIndex ?? 0,\n\t\t\thref: _link.href,\n\t\t\ttitle: _link.title\n\t\t}, _link.label));\n\n\t\tthis.el.setAttribute('role', 'button');\n\n\t\tconst onClickEmitter = this._register(new DomEmitter(this.el, 'click'));\n\t\tconst onKeyPress = this._register(new DomEmitter(this.el, 'keypress'));\n\t\tconst onEnterPress = Event.chain(onKeyPress.event, $ =>\n\t\t\t$.map(e => new StandardKeyboardEvent(e))\n\t\t\t\t.filter(e => e.keyCode === KeyCode.Enter)\n\t\t);\n\t\tconst onTap = this._register(new DomEmitter(this.el, TouchEventType.Tap)).event;\n\t\tthis._register(Gesture.addTarget(this.el));\n\t\tconst onOpen = Event.any<EventLike>(onClickEmitter.event, onEnterPress, onTap);\n\n\t\tthis._register(onOpen(e => {\n\t\t\tif (!this.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tEventHelper.stop(e, true);\n\n\t\t\tif (options?.opener) {\n\t\t\t\toptions.opener(this._link.href);\n\t\t\t} else {\n\t\t\t\topenerService.open(this._link.href, { allowCommands: true });\n\t\t\t}\n\t\t}));\n\n\t\tthis.enabled = true;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { $, append, EventHelper, EventLike, clearNode } from '../../../base/browser/dom';\nimport { DomEmitter } from '../../../base/browser/event';\nimport { StandardKeyboardEvent } from '../../../base/browser/keyboardEvent';\nimport { EventType as TouchEventType, Gesture } from '../../../base/browser/touch';\nimport { Event } from '../../../base/common/event';\nimport { KeyCode } from '../../../base/common/keyCodes';\nimport { Disposable } from '../../../base/common/lifecycle';\nimport { IOpenerService } from '../common/opener';\nimport './link.css';\n\nexport interface ILinkDescriptor {\n\treadonly label: string | HTMLElement;\n\treadonly href: string;\n\treadonly title?: string;\n\treadonly tabIndex?: number;\n}\n\nexport interface ILinkOptions {\n\treadonly opener?: (href: string) => void;\n\treadonly textLinkForeground?: string;\n}\n\nexport class Link extends Disposable {\n\n\tprivate el: HTMLAnchorElement;\n\tprivate _enabled: boolean = true;\n\n\tget enabled(): boolean {\n\t\treturn this._enabled;\n\t}\n\n\tset enabled(enabled: boolean) {\n\t\tif (enabled) {\n\t\t\tthis.el.setAttribute('aria-disabled', 'false');\n\t\t\tthis.el.tabIndex = 0;\n\t\t\tthis.el.style.pointerEvents = 'auto';\n\t\t\tthis.el.style.opacity = '1';\n\t\t\tthis.el.style.cursor = 'pointer';\n\t\t\tthis._enabled = false;\n\t\t} else {\n\t\t\tthis.el.setAttribute('aria-disabled', 'true');\n\t\t\tthis.el.tabIndex = -1;\n\t\t\tthis.el.style.pointerEvents = 'none';\n\t\t\tthis.el.style.opacity = '0.4';\n\t\t\tthis.el.style.cursor = 'default';\n\t\t\tthis._enabled = true;\n\t\t}\n\n\t\tthis._enabled = enabled;\n\t}\n\n\tset link(link: ILinkDescriptor) {\n\t\tif (typeof link.label === 'string') {\n\t\t\tthis.el.textContent = link.label;\n\t\t} else {\n\t\t\tclearNode(this.el);\n\t\t\tthis.el.appendChild(link.label);\n\t\t}\n\n\t\tthis.el.href = link.href;\n\n\t\tif (typeof link.tabIndex !== 'undefined') {\n\t\t\tthis.el.tabIndex = link.tabIndex;\n\t\t}\n\n\t\tif (typeof link.title !== 'undefined') {\n\t\t\tthis.el.title = link.title;\n\t\t}\n\n\t\tthis._link = link;\n\t}\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tprivate _link: ILinkDescriptor,\n\t\toptions: ILinkOptions = {},\n\t\t@IOpenerService openerService: IOpenerService\n\t) {\n\t\tsuper();\n\n\t\tthis.el = append(container, $('a.monaco-link', {\n\t\t\ttabIndex: _link.tabIndex ?? 0,\n\t\t\thref: _link.href,\n\t\t\ttitle: _link.title\n\t\t}, _link.label));\n\n\t\tthis.el.setAttribute('role', 'button');\n\n\t\tconst onClickEmitter = this._register(new DomEmitter(this.el, 'click'));\n\t\tconst onKeyPress = this._register(new DomEmitter(this.el, 'keypress'));\n\t\tconst onEnterPress = Event.chain(onKeyPress.event, $ =>\n\t\t\t$.map(e => new StandardKeyboardEvent(e))\n\t\t\t\t.filter(e => e.keyCode === KeyCode.Enter)\n\t\t);\n\t\tconst onTap = this._register(new DomEmitter(this.el, TouchEventType.Tap)).event;\n\t\tthis._register(Gesture.addTarget(this.el));\n\t\tconst onOpen = Event.any<EventLike>(onClickEmitter.event, onEnterPress, onTap);\n\n\t\tthis._register(onOpen(e => {\n\t\t\tif (!this.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tEventHelper.stop(e, true);\n\n\t\t\tif (options?.opener) {\n\t\t\t\toptions.opener(this._link.href);\n\t\t\t} else {\n\t\t\t\topenerService.open(this._link.href, { allowCommands: true });\n\t\t\t}\n\t\t}));\n\n\t\tthis.enabled = true;\n\t}\n}\n"]}