{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/platform/quickinput/browser/quickInputService.ts","vs/platform/quickinput/browser/quickInputService.ts"],"names":[],"mappings":"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","file":"quickInputService.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IListRenderer, IListVirtualDelegate } from '../../../base/browser/ui/list/list';\nimport { List } from '../../../base/browser/ui/list/listWidget';\nimport { CancellationToken } from '../../../base/common/cancellation';\nimport { Emitter } from '../../../base/common/event';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../contextkey/common/contextkey';\nimport { IInstantiationService } from '../../instantiation/common/instantiation';\nimport { ILayoutService } from '../../layout/browser/layoutService';\nimport { IWorkbenchListOptions, WorkbenchList } from '../../list/browser/listService';\nimport { IOpenerService } from '../../opener/common/opener';\nimport { QuickAccessController } from './quickAccess';\nimport { IQuickAccessController } from '../common/quickAccess';\nimport { IInputBox, IInputOptions, IKeyMods, IPickOptions, IQuickInputButton, IQuickInputService, IQuickNavigateConfiguration, IQuickPick, IQuickPickItem, IQuickWidget, QuickPickInput } from '../common/quickInput';\nimport { defaultButtonStyles, defaultCountBadgeStyles, defaultInputBoxStyles, defaultKeybindingLabelStyles, defaultProgressBarStyles, defaultToggleStyles, getListStyles } from '../../theme/browser/defaultStyles';\nimport { activeContrastBorder, asCssVariable, pickerGroupBorder, pickerGroupForeground, quickInputBackground, quickInputForeground, quickInputListFocusBackground, quickInputListFocusForeground, quickInputListFocusIconForeground, quickInputTitleBackground, widgetBorder, widgetShadow } from '../../theme/common/colorRegistry';\nimport { IThemeService, Themable } from '../../theme/common/themeService';\nimport { IQuickInputOptions, IQuickInputStyles, QuickInputHoverDelegate } from './quickInput';\nimport { QuickInputController, IQuickInputControllerHost } from './quickInputController';\nimport { IConfigurationService } from '../../configuration/common/configuration';\nimport { getWindow } from '../../../base/browser/dom';\n\nexport class QuickInputService extends Themable implements IQuickInputService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tget backButton(): IQuickInputButton { return this.controller.backButton; }\n\n\tprivate readonly _onShow = this._register(new Emitter<void>());\n\treadonly onShow = this._onShow.event;\n\n\tprivate readonly _onHide = this._register(new Emitter<void>());\n\treadonly onHide = this._onHide.event;\n\n\tprivate _controller: QuickInputController | undefined;\n\tprivate get controller(): QuickInputController {\n\t\tif (!this._controller) {\n\t\t\tthis._controller = this._register(this.createController());\n\t\t}\n\n\t\treturn this._controller;\n\t}\n\n\tprivate get hasController() { return !!this._controller; }\n\n\tprivate _quickAccess: IQuickAccessController | undefined;\n\tget quickAccess(): IQuickAccessController {\n\t\tif (!this._quickAccess) {\n\t\t\tthis._quickAccess = this._register(this.instantiationService.createInstance(QuickAccessController));\n\t\t}\n\n\t\treturn this._quickAccess;\n\t}\n\n\tprivate readonly contexts = new Map<string, IContextKey<boolean>>();\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService protected readonly contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ILayoutService protected readonly layoutService: ILayoutService,\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper(themeService);\n\t}\n\n\tprotected createController(host: IQuickInputControllerHost = this.layoutService, options?: Partial<IQuickInputOptions>): QuickInputController {\n\t\tconst defaultOptions: IQuickInputOptions = {\n\t\t\tidPrefix: 'quickInput_',\n\t\t\tcontainer: host.activeContainer,\n\t\t\tignoreFocusOut: () => false,\n\t\t\tbackKeybindingLabel: () => undefined,\n\t\t\tsetContextKey: (id?: string) => this.setContextKey(id),\n\t\t\tlinkOpenerDelegate: (content) => {\n\t\t\t\t// HACK: https://github.com/microsoft/vscode/issues/173691\n\t\t\t\tthis.instantiationService.invokeFunction(accessor => {\n\t\t\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\t\t\topenerService.open(content, { allowCommands: true, fromUserGesture: true });\n\t\t\t\t});\n\t\t\t},\n\t\t\treturnFocus: () => host.focus(),\n\t\t\tcreateList: <T>(\n\t\t\t\tuser: string,\n\t\t\t\tcontainer: HTMLElement,\n\t\t\t\tdelegate: IListVirtualDelegate<T>,\n\t\t\t\trenderers: IListRenderer<T, any>[],\n\t\t\t\toptions: IWorkbenchListOptions<T>\n\t\t\t) => this.instantiationService.createInstance(WorkbenchList, user, container, delegate, renderers, options) as List<T>,\n\t\t\tstyles: this.computeStyles(),\n\t\t\thoverDelegate: this._register(this.instantiationService.createInstance(QuickInputHoverDelegate))\n\t\t};\n\n\t\tconst controller = this._register(new QuickInputController({\n\t\t\t...defaultOptions,\n\t\t\t...options\n\t\t},\n\t\t\tthis.themeService,\n\t\t\tthis.layoutService\n\t\t));\n\n\t\tcontroller.layout(host.activeContainerDimension, host.activeContainerOffset.quickPickTop);\n\n\t\t// Layout changes\n\t\tthis._register(host.onDidLayoutActiveContainer(dimension => {\n\t\t\tif (getWindow(host.activeContainer) === getWindow(controller.container)) {\n\t\t\t\tcontroller.layout(dimension, host.activeContainerOffset.quickPickTop);\n\t\t\t}\n\t\t}));\n\t\tthis._register(host.onDidChangeActiveContainer(() => {\n\t\t\tif (controller.isVisible()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcontroller.layout(host.activeContainerDimension, host.activeContainerOffset.quickPickTop);\n\t\t}));\n\n\t\t// Context keys\n\t\tthis._register(controller.onShow(() => {\n\t\t\tthis.resetContextKeys();\n\t\t\tthis._onShow.fire();\n\t\t}));\n\t\tthis._register(controller.onHide(() => {\n\t\t\tthis.resetContextKeys();\n\t\t\tthis._onHide.fire();\n\t\t}));\n\n\t\treturn controller;\n\t}\n\n\tprivate setContextKey(id?: string) {\n\t\tlet key: IContextKey<boolean> | undefined;\n\t\tif (id) {\n\t\t\tkey = this.contexts.get(id);\n\t\t\tif (!key) {\n\t\t\t\tkey = new RawContextKey<boolean>(id, false)\n\t\t\t\t\t.bindTo(this.contextKeyService);\n\t\t\t\tthis.contexts.set(id, key);\n\t\t\t}\n\t\t}\n\n\t\tif (key && key.get()) {\n\t\t\treturn; // already active context\n\t\t}\n\n\t\tthis.resetContextKeys();\n\n\t\tkey?.set(true);\n\t}\n\n\tprivate resetContextKeys() {\n\t\tthis.contexts.forEach(context => {\n\t\t\tif (context.get()) {\n\t\t\t\tcontext.reset();\n\t\t\t}\n\t\t});\n\t}\n\n\tpick<T extends IQuickPickItem, O extends IPickOptions<T>>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options: O = <O>{}, token: CancellationToken = CancellationToken.None): Promise<(O extends { canPickMany: true } ? T[] : T) | undefined> {\n\t\treturn this.controller.pick(picks, options, token);\n\t}\n\n\tinput(options: IInputOptions = {}, token: CancellationToken = CancellationToken.None): Promise<string | undefined> {\n\t\treturn this.controller.input(options, token);\n\t}\n\n\tcreateQuickPick<T extends IQuickPickItem>(): IQuickPick<T> {\n\t\treturn this.controller.createQuickPick();\n\t}\n\n\tcreateInputBox(): IInputBox {\n\t\treturn this.controller.createInputBox();\n\t}\n\n\tcreateQuickWidget(): IQuickWidget {\n\t\treturn this.controller.createQuickWidget();\n\t}\n\n\tfocus() {\n\t\tthis.controller.focus();\n\t}\n\n\ttoggle() {\n\t\tthis.controller.toggle();\n\t}\n\n\tnavigate(next: boolean, quickNavigate?: IQuickNavigateConfiguration) {\n\t\tthis.controller.navigate(next, quickNavigate);\n\t}\n\n\taccept(keyMods?: IKeyMods) {\n\t\treturn this.controller.accept(keyMods);\n\t}\n\n\tback() {\n\t\treturn this.controller.back();\n\t}\n\n\tcancel() {\n\t\treturn this.controller.cancel();\n\t}\n\n\toverride updateStyles() {\n\t\tif (this.hasController) {\n\t\t\tthis.controller.applyStyles(this.computeStyles());\n\t\t}\n\t}\n\n\tprivate computeStyles(): IQuickInputStyles {\n\t\treturn {\n\t\t\twidget: {\n\t\t\t\tquickInputBackground: asCssVariable(quickInputBackground),\n\t\t\t\tquickInputForeground: asCssVariable(quickInputForeground),\n\t\t\t\tquickInputTitleBackground: asCssVariable(quickInputTitleBackground),\n\t\t\t\twidgetBorder: asCssVariable(widgetBorder),\n\t\t\t\twidgetShadow: asCssVariable(widgetShadow),\n\t\t\t},\n\t\t\tinputBox: defaultInputBoxStyles,\n\t\t\ttoggle: defaultToggleStyles,\n\t\t\tcountBadge: defaultCountBadgeStyles,\n\t\t\tbutton: defaultButtonStyles,\n\t\t\tprogressBar: defaultProgressBarStyles,\n\t\t\tkeybindingLabel: defaultKeybindingLabelStyles,\n\t\t\tlist: getListStyles({\n\t\t\t\tlistBackground: quickInputBackground,\n\t\t\t\tlistFocusBackground: quickInputListFocusBackground,\n\t\t\t\tlistFocusForeground: quickInputListFocusForeground,\n\t\t\t\t// Look like focused when inactive.\n\t\t\t\tlistInactiveFocusForeground: quickInputListFocusForeground,\n\t\t\t\tlistInactiveSelectionIconForeground: quickInputListFocusIconForeground,\n\t\t\t\tlistInactiveFocusBackground: quickInputListFocusBackground,\n\t\t\t\tlistFocusOutline: activeContrastBorder,\n\t\t\t\tlistInactiveFocusOutline: activeContrastBorder,\n\t\t\t}),\n\t\t\tpickerGroup: {\n\t\t\t\tpickerGroupBorder: asCssVariable(pickerGroupBorder),\n\t\t\t\tpickerGroupForeground: asCssVariable(pickerGroupForeground),\n\t\t\t}\n\t\t};\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IListRenderer, IListVirtualDelegate } from '../../../base/browser/ui/list/list';\nimport { List } from '../../../base/browser/ui/list/listWidget';\nimport { CancellationToken } from '../../../base/common/cancellation';\nimport { Emitter } from '../../../base/common/event';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../contextkey/common/contextkey';\nimport { IInstantiationService } from '../../instantiation/common/instantiation';\nimport { ILayoutService } from '../../layout/browser/layoutService';\nimport { IWorkbenchListOptions, WorkbenchList } from '../../list/browser/listService';\nimport { IOpenerService } from '../../opener/common/opener';\nimport { QuickAccessController } from './quickAccess';\nimport { IQuickAccessController } from '../common/quickAccess';\nimport { IInputBox, IInputOptions, IKeyMods, IPickOptions, IQuickInputButton, IQuickInputService, IQuickNavigateConfiguration, IQuickPick, IQuickPickItem, IQuickWidget, QuickPickInput } from '../common/quickInput';\nimport { defaultButtonStyles, defaultCountBadgeStyles, defaultInputBoxStyles, defaultKeybindingLabelStyles, defaultProgressBarStyles, defaultToggleStyles, getListStyles } from '../../theme/browser/defaultStyles';\nimport { activeContrastBorder, asCssVariable, pickerGroupBorder, pickerGroupForeground, quickInputBackground, quickInputForeground, quickInputListFocusBackground, quickInputListFocusForeground, quickInputListFocusIconForeground, quickInputTitleBackground, widgetBorder, widgetShadow } from '../../theme/common/colorRegistry';\nimport { IThemeService, Themable } from '../../theme/common/themeService';\nimport { IQuickInputOptions, IQuickInputStyles, QuickInputHoverDelegate } from './quickInput';\nimport { QuickInputController, IQuickInputControllerHost } from './quickInputController';\nimport { IConfigurationService } from '../../configuration/common/configuration';\nimport { getWindow } from '../../../base/browser/dom';\n\nexport class QuickInputService extends Themable implements IQuickInputService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tget backButton(): IQuickInputButton { return this.controller.backButton; }\n\n\tprivate readonly _onShow = this._register(new Emitter<void>());\n\treadonly onShow = this._onShow.event;\n\n\tprivate readonly _onHide = this._register(new Emitter<void>());\n\treadonly onHide = this._onHide.event;\n\n\tprivate _controller: QuickInputController | undefined;\n\tprivate get controller(): QuickInputController {\n\t\tif (!this._controller) {\n\t\t\tthis._controller = this._register(this.createController());\n\t\t}\n\n\t\treturn this._controller;\n\t}\n\n\tprivate get hasController() { return !!this._controller; }\n\n\tprivate _quickAccess: IQuickAccessController | undefined;\n\tget quickAccess(): IQuickAccessController {\n\t\tif (!this._quickAccess) {\n\t\t\tthis._quickAccess = this._register(this.instantiationService.createInstance(QuickAccessController));\n\t\t}\n\n\t\treturn this._quickAccess;\n\t}\n\n\tprivate readonly contexts = new Map<string, IContextKey<boolean>>();\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService protected readonly contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ILayoutService protected readonly layoutService: ILayoutService,\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper(themeService);\n\t}\n\n\tprotected createController(host: IQuickInputControllerHost = this.layoutService, options?: Partial<IQuickInputOptions>): QuickInputController {\n\t\tconst defaultOptions: IQuickInputOptions = {\n\t\t\tidPrefix: 'quickInput_',\n\t\t\tcontainer: host.activeContainer,\n\t\t\tignoreFocusOut: () => false,\n\t\t\tbackKeybindingLabel: () => undefined,\n\t\t\tsetContextKey: (id?: string) => this.setContextKey(id),\n\t\t\tlinkOpenerDelegate: (content) => {\n\t\t\t\t// HACK: https://github.com/microsoft/vscode/issues/173691\n\t\t\t\tthis.instantiationService.invokeFunction(accessor => {\n\t\t\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\t\t\topenerService.open(content, { allowCommands: true, fromUserGesture: true });\n\t\t\t\t});\n\t\t\t},\n\t\t\treturnFocus: () => host.focus(),\n\t\t\tcreateList: <T>(\n\t\t\t\tuser: string,\n\t\t\t\tcontainer: HTMLElement,\n\t\t\t\tdelegate: IListVirtualDelegate<T>,\n\t\t\t\trenderers: IListRenderer<T, any>[],\n\t\t\t\toptions: IWorkbenchListOptions<T>\n\t\t\t) => this.instantiationService.createInstance(WorkbenchList, user, container, delegate, renderers, options) as List<T>,\n\t\t\tstyles: this.computeStyles(),\n\t\t\thoverDelegate: this._register(this.instantiationService.createInstance(QuickInputHoverDelegate))\n\t\t};\n\n\t\tconst controller = this._register(new QuickInputController({\n\t\t\t...defaultOptions,\n\t\t\t...options\n\t\t},\n\t\t\tthis.themeService,\n\t\t\tthis.layoutService\n\t\t));\n\n\t\tcontroller.layout(host.activeContainerDimension, host.activeContainerOffset.quickPickTop);\n\n\t\t// Layout changes\n\t\tthis._register(host.onDidLayoutActiveContainer(dimension => {\n\t\t\tif (getWindow(host.activeContainer) === getWindow(controller.container)) {\n\t\t\t\tcontroller.layout(dimension, host.activeContainerOffset.quickPickTop);\n\t\t\t}\n\t\t}));\n\t\tthis._register(host.onDidChangeActiveContainer(() => {\n\t\t\tif (controller.isVisible()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcontroller.layout(host.activeContainerDimension, host.activeContainerOffset.quickPickTop);\n\t\t}));\n\n\t\t// Context keys\n\t\tthis._register(controller.onShow(() => {\n\t\t\tthis.resetContextKeys();\n\t\t\tthis._onShow.fire();\n\t\t}));\n\t\tthis._register(controller.onHide(() => {\n\t\t\tthis.resetContextKeys();\n\t\t\tthis._onHide.fire();\n\t\t}));\n\n\t\treturn controller;\n\t}\n\n\tprivate setContextKey(id?: string) {\n\t\tlet key: IContextKey<boolean> | undefined;\n\t\tif (id) {\n\t\t\tkey = this.contexts.get(id);\n\t\t\tif (!key) {\n\t\t\t\tkey = new RawContextKey<boolean>(id, false)\n\t\t\t\t\t.bindTo(this.contextKeyService);\n\t\t\t\tthis.contexts.set(id, key);\n\t\t\t}\n\t\t}\n\n\t\tif (key && key.get()) {\n\t\t\treturn; // already active context\n\t\t}\n\n\t\tthis.resetContextKeys();\n\n\t\tkey?.set(true);\n\t}\n\n\tprivate resetContextKeys() {\n\t\tthis.contexts.forEach(context => {\n\t\t\tif (context.get()) {\n\t\t\t\tcontext.reset();\n\t\t\t}\n\t\t});\n\t}\n\n\tpick<T extends IQuickPickItem, O extends IPickOptions<T>>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options: O = <O>{}, token: CancellationToken = CancellationToken.None): Promise<(O extends { canPickMany: true } ? T[] : T) | undefined> {\n\t\treturn this.controller.pick(picks, options, token);\n\t}\n\n\tinput(options: IInputOptions = {}, token: CancellationToken = CancellationToken.None): Promise<string | undefined> {\n\t\treturn this.controller.input(options, token);\n\t}\n\n\tcreateQuickPick<T extends IQuickPickItem>(): IQuickPick<T> {\n\t\treturn this.controller.createQuickPick();\n\t}\n\n\tcreateInputBox(): IInputBox {\n\t\treturn this.controller.createInputBox();\n\t}\n\n\tcreateQuickWidget(): IQuickWidget {\n\t\treturn this.controller.createQuickWidget();\n\t}\n\n\tfocus() {\n\t\tthis.controller.focus();\n\t}\n\n\ttoggle() {\n\t\tthis.controller.toggle();\n\t}\n\n\tnavigate(next: boolean, quickNavigate?: IQuickNavigateConfiguration) {\n\t\tthis.controller.navigate(next, quickNavigate);\n\t}\n\n\taccept(keyMods?: IKeyMods) {\n\t\treturn this.controller.accept(keyMods);\n\t}\n\n\tback() {\n\t\treturn this.controller.back();\n\t}\n\n\tcancel() {\n\t\treturn this.controller.cancel();\n\t}\n\n\toverride updateStyles() {\n\t\tif (this.hasController) {\n\t\t\tthis.controller.applyStyles(this.computeStyles());\n\t\t}\n\t}\n\n\tprivate computeStyles(): IQuickInputStyles {\n\t\treturn {\n\t\t\twidget: {\n\t\t\t\tquickInputBackground: asCssVariable(quickInputBackground),\n\t\t\t\tquickInputForeground: asCssVariable(quickInputForeground),\n\t\t\t\tquickInputTitleBackground: asCssVariable(quickInputTitleBackground),\n\t\t\t\twidgetBorder: asCssVariable(widgetBorder),\n\t\t\t\twidgetShadow: asCssVariable(widgetShadow),\n\t\t\t},\n\t\t\tinputBox: defaultInputBoxStyles,\n\t\t\ttoggle: defaultToggleStyles,\n\t\t\tcountBadge: defaultCountBadgeStyles,\n\t\t\tbutton: defaultButtonStyles,\n\t\t\tprogressBar: defaultProgressBarStyles,\n\t\t\tkeybindingLabel: defaultKeybindingLabelStyles,\n\t\t\tlist: getListStyles({\n\t\t\t\tlistBackground: quickInputBackground,\n\t\t\t\tlistFocusBackground: quickInputListFocusBackground,\n\t\t\t\tlistFocusForeground: quickInputListFocusForeground,\n\t\t\t\t// Look like focused when inactive.\n\t\t\t\tlistInactiveFocusForeground: quickInputListFocusForeground,\n\t\t\t\tlistInactiveSelectionIconForeground: quickInputListFocusIconForeground,\n\t\t\t\tlistInactiveFocusBackground: quickInputListFocusBackground,\n\t\t\t\tlistFocusOutline: activeContrastBorder,\n\t\t\t\tlistInactiveFocusOutline: activeContrastBorder,\n\t\t\t}),\n\t\t\tpickerGroup: {\n\t\t\t\tpickerGroupBorder: asCssVariable(pickerGroupBorder),\n\t\t\t\tpickerGroupForeground: asCssVariable(pickerGroupForeground),\n\t\t\t}\n\t\t};\n\t}\n}\n"]}