"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuickInputService = void 0;
const cancellation_1 = require("../../../base/common/cancellation");
const event_1 = require("../../../base/common/event");
const contextkey_1 = require("../../contextkey/common/contextkey");
const instantiation_1 = require("../../instantiation/common/instantiation");
const layoutService_1 = require("../../layout/browser/layoutService");
const listService_1 = require("../../list/browser/listService");
const opener_1 = require("../../opener/common/opener");
const quickAccess_1 = require("./quickAccess");
const defaultStyles_1 = require("../../theme/browser/defaultStyles");
const colorRegistry_1 = require("../../theme/common/colorRegistry");
const themeService_1 = require("../../theme/common/themeService");
const quickInput_1 = require("./quickInput");
const quickInputController_1 = require("./quickInputController");
const configuration_1 = require("../../configuration/common/configuration");
const dom_1 = require("../../../base/browser/dom");
let QuickInputService = class QuickInputService extends themeService_1.Themable {
    get backButton() { return this.controller.backButton; }
    get controller() {
        if (!this._controller) {
            this._controller = this._register(this.createController());
        }
        return this._controller;
    }
    get hasController() { return !!this._controller; }
    get quickAccess() {
        if (!this._quickAccess) {
            this._quickAccess = this._register(this.instantiationService.createInstance(quickAccess_1.QuickAccessController));
        }
        return this._quickAccess;
    }
    constructor(instantiationService, contextKeyService, themeService, layoutService, configurationService) {
        super(themeService);
        this.instantiationService = instantiationService;
        this.contextKeyService = contextKeyService;
        this.layoutService = layoutService;
        this.configurationService = configurationService;
        this._onShow = this._register(new event_1.Emitter());
        this.onShow = this._onShow.event;
        this._onHide = this._register(new event_1.Emitter());
        this.onHide = this._onHide.event;
        this.contexts = new Map();
    }
    createController(host = this.layoutService, options) {
        const defaultOptions = {
            idPrefix: 'quickInput_',
            container: host.activeContainer,
            ignoreFocusOut: () => false,
            backKeybindingLabel: () => undefined,
            setContextKey: (id) => this.setContextKey(id),
            linkOpenerDelegate: (content) => {
                // HACK: https://github.com/microsoft/vscode/issues/173691
                this.instantiationService.invokeFunction(accessor => {
                    const openerService = accessor.get(opener_1.IOpenerService);
                    openerService.open(content, { allowCommands: true, fromUserGesture: true });
                });
            },
            returnFocus: () => host.focus(),
            createList: (user, container, delegate, renderers, options) => this.instantiationService.createInstance(listService_1.WorkbenchList, user, container, delegate, renderers, options),
            styles: this.computeStyles(),
            hoverDelegate: this._register(this.instantiationService.createInstance(quickInput_1.QuickInputHoverDelegate))
        };
        const controller = this._register(new quickInputController_1.QuickInputController({
            ...defaultOptions,
            ...options
        }, this.themeService, this.layoutService));
        controller.layout(host.activeContainerDimension, host.activeContainerOffset.quickPickTop);
        // Layout changes
        this._register(host.onDidLayoutActiveContainer(dimension => {
            if ((0, dom_1.getWindow)(host.activeContainer) === (0, dom_1.getWindow)(controller.container)) {
                controller.layout(dimension, host.activeContainerOffset.quickPickTop);
            }
        }));
        this._register(host.onDidChangeActiveContainer(() => {
            if (controller.isVisible()) {
                return;
            }
            controller.layout(host.activeContainerDimension, host.activeContainerOffset.quickPickTop);
        }));
        // Context keys
        this._register(controller.onShow(() => {
            this.resetContextKeys();
            this._onShow.fire();
        }));
        this._register(controller.onHide(() => {
            this.resetContextKeys();
            this._onHide.fire();
        }));
        return controller;
    }
    setContextKey(id) {
        let key;
        if (id) {
            key = this.contexts.get(id);
            if (!key) {
                key = new contextkey_1.RawContextKey(id, false)
                    .bindTo(this.contextKeyService);
                this.contexts.set(id, key);
            }
        }
        if (key && key.get()) {
            return; // already active context
        }
        this.resetContextKeys();
        key === null || key === void 0 ? void 0 : key.set(true);
    }
    resetContextKeys() {
        this.contexts.forEach(context => {
            if (context.get()) {
                context.reset();
            }
        });
    }
    pick(picks, options = {}, token = cancellation_1.CancellationToken.None) {
        return this.controller.pick(picks, options, token);
    }
    input(options = {}, token = cancellation_1.CancellationToken.None) {
        return this.controller.input(options, token);
    }
    createQuickPick() {
        return this.controller.createQuickPick();
    }
    createInputBox() {
        return this.controller.createInputBox();
    }
    createQuickWidget() {
        return this.controller.createQuickWidget();
    }
    focus() {
        this.controller.focus();
    }
    toggle() {
        this.controller.toggle();
    }
    navigate(next, quickNavigate) {
        this.controller.navigate(next, quickNavigate);
    }
    accept(keyMods) {
        return this.controller.accept(keyMods);
    }
    back() {
        return this.controller.back();
    }
    cancel() {
        return this.controller.cancel();
    }
    updateStyles() {
        if (this.hasController) {
            this.controller.applyStyles(this.computeStyles());
        }
    }
    computeStyles() {
        return {
            widget: {
                quickInputBackground: (0, colorRegistry_1.asCssVariable)(colorRegistry_1.quickInputBackground),
                quickInputForeground: (0, colorRegistry_1.asCssVariable)(colorRegistry_1.quickInputForeground),
                quickInputTitleBackground: (0, colorRegistry_1.asCssVariable)(colorRegistry_1.quickInputTitleBackground),
                widgetBorder: (0, colorRegistry_1.asCssVariable)(colorRegistry_1.widgetBorder),
                widgetShadow: (0, colorRegistry_1.asCssVariable)(colorRegistry_1.widgetShadow),
            },
            inputBox: defaultStyles_1.defaultInputBoxStyles,
            toggle: defaultStyles_1.defaultToggleStyles,
            countBadge: defaultStyles_1.defaultCountBadgeStyles,
            button: defaultStyles_1.defaultButtonStyles,
            progressBar: defaultStyles_1.defaultProgressBarStyles,
            keybindingLabel: defaultStyles_1.defaultKeybindingLabelStyles,
            list: (0, defaultStyles_1.getListStyles)({
                listBackground: colorRegistry_1.quickInputBackground,
                listFocusBackground: colorRegistry_1.quickInputListFocusBackground,
                listFocusForeground: colorRegistry_1.quickInputListFocusForeground,
                // Look like focused when inactive.
                listInactiveFocusForeground: colorRegistry_1.quickInputListFocusForeground,
                listInactiveSelectionIconForeground: colorRegistry_1.quickInputListFocusIconForeground,
                listInactiveFocusBackground: colorRegistry_1.quickInputListFocusBackground,
                listFocusOutline: colorRegistry_1.activeContrastBorder,
                listInactiveFocusOutline: colorRegistry_1.activeContrastBorder,
            }),
            pickerGroup: {
                pickerGroupBorder: (0, colorRegistry_1.asCssVariable)(colorRegistry_1.pickerGroupBorder),
                pickerGroupForeground: (0, colorRegistry_1.asCssVariable)(colorRegistry_1.pickerGroupForeground),
            }
        };
    }
};
exports.QuickInputService = QuickInputService;
exports.QuickInputService = QuickInputService = __decorate([
    __param(0, instantiation_1.IInstantiationService),
    __param(1, contextkey_1.IContextKeyService),
    __param(2, themeService_1.IThemeService),
    __param(3, layoutService_1.ILayoutService),
    __param(4, configuration_1.IConfigurationService)
], QuickInputService);
//# sourceMappingURL=quickInputService.js.map