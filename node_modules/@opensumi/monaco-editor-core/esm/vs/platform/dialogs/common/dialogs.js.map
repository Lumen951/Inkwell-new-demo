{"version":3,"sources":["vs/platform/dialogs/common/dialogs.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAKhG,8DAA0D;AAC1D,4DAAqD;AAErD,sCAAwC;AACxC,4EAA2E;AAG3E,wDAAkE;AAClE,4DAAgF;AAEhF,0DAAyD;AA8P5C,QAAA,cAAc,GAAG,IAAA,+BAAe,EAAiB,eAAe,CAAC,CAAC;AAyC/E,IAAK,UAIJ;AAJD,WAAK,UAAU;IACd,2DAAgB,CAAA;IAChB,+CAAM,CAAA;IACN,6CAAK,CAAA;AACN,CAAC,EAJI,UAAU,KAAV,UAAU,QAId;AAED,MAAsB,qBAAqB;IAEhC,sBAAsB,CAAC,MAAqB;QACrD,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC;IAES,gBAAgB,CAAC,MAAwB;QAClD,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC;IAES,eAAe,CAAC,MAAc;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAKO,UAAU,CAAC,MAAiD,EAAE,IAAgB;QAErF,qEAAqE;QACrE,wEAAwE;QACxE,yBAAyB;QAEzB,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,QAAQ,IAAI,EAAE,CAAC;YACd,KAAK,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC9B,MAAM,kBAAkB,GAAG,MAAuB,CAAC;gBAEnD,IAAI,kBAAkB,CAAC,aAAa,EAAE,CAAC;oBACtC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;gBAChD,CAAC;qBAAM,CAAC;oBACP,OAAO,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,EAAE,GAAG,EAAE,WAAW,EAAE,OAAO,EAAE,CAAC,OAA0B,EAAE,OAAO,CAAC,CAAC,CAAC,IAAf,CAAC;gBAC7E,CAAC;gBAED,IAAI,kBAAkB,CAAC,YAAY,EAAE,CAAC;oBACrC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;gBAC/C,CAAC;qBAAM,CAAC;oBACP,OAAO,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC;gBAClD,CAAC;gBAED,MAAM;YACP,CAAC;YACD,KAAK,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxB,MAAM,YAAY,GAAG,MAA0B,CAAC;gBAEhD,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,YAAY,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC5E,OAAO,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnE,CAAC;gBAED,IAAI,YAAY,CAAC,YAAY,EAAE,CAAC;oBAC/B,IAAI,YAAY,CAAC,YAAY,KAAK,IAAI,EAAE,CAAC;wBACxC,OAAO,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC;oBAClD,CAAC;yBAAM,IAAI,OAAO,YAAY,CAAC,YAAY,KAAK,QAAQ,EAAE,CAAC;wBAC1D,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;oBACzC,CAAC;yBAAM,CAAC;wBACP,IAAI,YAAY,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;4BACrC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;wBAC/C,CAAC;6BAAM,CAAC;4BACP,OAAO,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC;wBAClD,CAAC;oBACF,CAAC;gBACF,CAAC;gBAED,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBAC1B,OAAO,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,EAAE,GAAG,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;gBACzF,CAAC;gBAED,MAAM;YACP,CAAC;YACD,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBACvB,MAAM,WAAW,GAAG,MAAgB,CAAC;gBAErC,IAAI,WAAW,CAAC,aAAa,EAAE,CAAC;oBAC/B,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;gBACzC,CAAC;qBAAM,CAAC;oBACP,OAAO,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,EAAE,GAAG,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;gBACzF,CAAC;gBAED,IAAI,WAAW,CAAC,YAAY,EAAE,CAAC;oBAC9B,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;gBACxC,CAAC;qBAAM,CAAC;oBACP,OAAO,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC;gBAClD,CAAC;gBAED,MAAM;YACP,CAAC;QACF,CAAC;QAED,OAAO,OAAO,CAAC;IAChB,CAAC;IAES,aAAa,CAAC,IAAuC;QAC9D,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;YAC9B,OAAO,IAAI,CAAC;QACb,CAAC;QAED,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;YAC9B,OAAO,CAAC,IAAI,KAAK,kBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,kBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,kBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;QACnI,CAAC;QAED,OAAO,SAAS,CAAC;IAClB,CAAC;IAES,eAAe,CAAI,MAAkB,EAAE,WAAmB,EAAE,eAAoC;;QACzG,MAAM,aAAa,GAA2B,CAAC,GAAG,CAAC,MAAA,MAAM,CAAC,OAAO,mCAAI,EAAE,CAAC,CAAC,CAAC;QAC1E,IAAI,MAAM,CAAC,YAAY,IAAI,OAAO,MAAM,CAAC,YAAY,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,YAAY,KAAK,SAAS,EAAE,CAAC;YAChH,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACzC,CAAC;QAED,IAAI,MAAM,GAAG,MAAA,aAAa,CAAC,WAAW,CAAC,0CAAE,GAAG,CAAC,EAAE,eAAe,EAAE,CAAC,CAAC;QAClE,IAAI,CAAC,CAAC,MAAM,YAAY,OAAO,CAAC,EAAE,CAAC;YAClC,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;QAED,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC;IACpC,CAAC;CAMD;AA1HD,sDA0HC;AAmEY,QAAA,kBAAkB,GAAG,IAAA,+BAAe,EAAqB,mBAAmB,CAAC,CAAC;AA8E3F,IAAkB,aAIjB;AAJD,WAAkB,aAAa;IAC9B,iDAAI,CAAA;IACJ,2DAAS,CAAA;IACT,qDAAM,CAAA;AACP,CAAC,EAJiB,aAAa,6BAAb,aAAa,QAI9B;AAED,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,SAAgB,mBAAmB,CAAC,oBAA+C;IAClF,MAAM,OAAO,GAAa,EAAE,CAAC;IAC7B,OAAO,CAAC,IAAI,CAAC,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC,OAAO,kBAAkB,KAAK,QAAQ,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAA,oBAAQ,EAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAExL,IAAI,oBAAoB,CAAC,MAAM,GAAG,iBAAiB,EAAE,CAAC;QACrD,IAAI,oBAAoB,CAAC,MAAM,GAAG,iBAAiB,KAAK,CAAC,EAAE,CAAC;YAC3D,OAAO,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,UAAU,EAAE,gCAAgC,CAAC,CAAC,CAAC;QACtE,CAAC;aAAM,CAAC;YACP,OAAO,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,WAAW,EAAE,mCAAmC,EAAE,oBAAoB,CAAC,MAAM,GAAG,iBAAiB,CAAC,CAAC,CAAC;QAC3H,CAAC;IACF,CAAC;IAED,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjB,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3B,CAAC;AAdD,kDAcC;AA0BD;;;;GAIG;AACH,SAAgB,wBAAwB,CAAC,OAA0B,EAAE,cAA+B;;IACnG,MAAM,eAAe,GAAG,IAAA,mBAAS,EAAC,OAAO,CAAC,CAAC;IAE3C,IAAI,OAAO,GAAG,CAAC,MAAA,eAAe,CAAC,OAAO,mCAAI,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAA,4BAAmB,EAAC,MAAM,CAAC,CAAC,CAAC;IACzF,IAAI,aAAa,GAAG,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;IAE1E,IAAI,SAAS,GAAG,CAAC,CAAC,CAAC,gDAAgD;IACnE,IAAI,QAAQ,GAAG,MAAA,eAAe,CAAC,QAAQ,mCAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,8CAA8C;IAE7G,qDAAqD;IACrD,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACxB,MAAM,YAAY,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAElF,IAAI,kBAAO,IAAI,sBAAW,EAAE,CAAC;YAE5B,yGAAyG;YACzG,2BAA2B;YAC3B,uGAAuG;YACvG,wGAAwG;YACxG,4EAA4E;YAC5E,EAAE;YACF,sGAAsG;YACtG,0DAA0D;YAE1D,gHAAgH;YAChH,2BAA2B;YAC3B,8HAA8H;YAC9H,+HAA+H;YAC/H,2GAA2G;YAC3G,EAAE;YACF,uGAAuG;YACvG,sGAAsG;YACtG,wGAAwG;YACxG,wGAAwG;YACxG,4BAA4B;YAE5B,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,KAAK,CAAC,EAAE,CAAC;gBAC9E,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBAC5B,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;gBAEnC,MAAM,iBAAiB,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAClD,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBAClC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,iBAAiB,CAAC,CAAC;gBAE9C,QAAQ,GAAG,CAAC,CAAC;YACd,CAAC;YAED,IAAI,kBAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACnC,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC5B,aAAa,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC;gBAExC,SAAS,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC/B,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,CAAC;oBACtC,QAAQ,GAAG,SAAS,GAAG,CAAC,CAAC;gBAC1B,CAAC;YACF,CAAC;QACF,CAAC;aAAM,IAAI,oBAAS,EAAE,CAAC;YAEtB,4FAA4F;YAC5F,2BAA2B;YAC3B,yFAAyF;YACzF,yDAAyD;YACzD,EAAE;YACF,8FAA8F;YAC9F,qCAAqC;YAErC,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,KAAK,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,iBAAiB,EAAE,CAAC;gBACjH,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBAC5B,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAE3B,MAAM,WAAW,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAC5C,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBAClC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAEhC,QAAQ,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;YAC/B,CAAC;QACF,CAAC;IACF,CAAC;IAED,eAAe,CAAC,OAAO,GAAG,OAAO,CAAC;IAClC,eAAe,CAAC,SAAS,GAAG,SAAS,CAAC;IACtC,eAAe,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACpC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC;IAC9B,eAAe,CAAC,KAAK,GAAG,eAAe,CAAC,KAAK,IAAI,cAAc,CAAC,QAAQ,CAAC;IAEzE,OAAO;QACN,OAAO,EAAE,eAAe;QACxB,aAAa;KACb,CAAC;AACH,CAAC;AAzFD,4DAyFC","file":"dialogs.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event';\nimport { ThemeIcon } from '../../../base/common/themables';\nimport { IMarkdownString } from '../../../base/common/htmlContent';\nimport { basename } from '../../../base/common/resources';\nimport Severity from '../../../base/common/severity';\nimport { URI } from '../../../base/common/uri';\nimport { localize } from '../../../nls';\nimport { createDecorator } from '../../instantiation/common/instantiation';\nimport { ITelemetryData } from '../../telemetry/common/telemetry';\nimport { MessageBoxOptions } from '../../../base/parts/sandbox/common/electronTypes';\nimport { mnemonicButtonLabel } from '../../../base/common/labels';\nimport { isLinux, isMacintosh, isWindows } from '../../../base/common/platform';\nimport { IProductService } from '../../product/common/productService';\nimport { deepClone } from '../../../base/common/objects';\n\nexport interface IDialogArgs {\n\treadonly confirmArgs?: IConfirmDialogArgs;\n\treadonly inputArgs?: IInputDialogArgs;\n\treadonly promptArgs?: IPromptDialogArgs;\n}\n\nexport interface IBaseDialogOptions {\n\treadonly type?: Severity | DialogType;\n\n\treadonly title?: string;\n\treadonly message: string;\n\treadonly detail?: string;\n\n\treadonly checkbox?: ICheckbox;\n\n\t/**\n\t * Allows to enforce use of custom dialog even in native environments.\n\t */\n\treadonly custom?: boolean | ICustomDialogOptions;\n}\n\nexport interface IConfirmDialogArgs {\n\treadonly confirmation: IConfirmation;\n}\n\nexport interface IConfirmation extends IBaseDialogOptions {\n\n\t/**\n\t * If not provided, defaults to `Yes`.\n\t */\n\treadonly primaryButton?: string;\n\n\t/**\n\t * If not provided, defaults to `Cancel`.\n\t */\n\treadonly cancelButton?: string;\n}\n\nexport interface IConfirmationResult extends ICheckboxResult {\n\n\t/**\n\t * Will be true if the dialog was confirmed with the primary button pressed.\n\t */\n\treadonly confirmed: boolean;\n}\n\nexport interface IInputDialogArgs {\n\treadonly input: IInput;\n}\n\nexport interface IInput extends IConfirmation {\n\treadonly inputs: IInputElement[];\n\n\t/**\n\t * If not provided, defaults to `Ok`.\n\t */\n\treadonly primaryButton?: string;\n}\n\nexport interface IInputElement {\n\treadonly type?: 'text' | 'password';\n\treadonly value?: string;\n\treadonly placeholder?: string;\n}\n\nexport interface IInputResult extends IConfirmationResult {\n\n\t/**\n\t * Values for the input fields as provided by the user or `undefined` if none.\n\t */\n\treadonly values?: string[];\n}\n\nexport interface IPromptDialogArgs {\n\treadonly prompt: IPrompt<unknown>;\n}\n\nexport interface IPromptBaseButton<T> {\n\n\t/**\n\t * @returns the result of the prompt button will be returned\n\t * as result from the `prompt()` call.\n\t */\n\trun(checkbox: ICheckboxResult): T | Promise<T>;\n}\n\nexport interface IPromptButton<T> extends IPromptBaseButton<T> {\n\treadonly label: string;\n}\n\nexport interface IPromptCancelButton<T> extends IPromptBaseButton<T> {\n\n\t/**\n\t * The cancel button to show in the prompt. Defaults to\n\t * `Cancel` if not provided.\n\t */\n\treadonly label?: string;\n}\n\nexport interface IPrompt<T> extends IBaseDialogOptions {\n\n\t/**\n\t * The buttons to show in the prompt. Defaults to `OK`\n\t * if no buttons or cancel button is provided.\n\t */\n\treadonly buttons?: IPromptButton<T>[];\n\n\t/**\n\t * The cancel button to show in the prompt. Defaults to\n\t * `Cancel` if set to `true`.\n\t */\n\treadonly cancelButton?: IPromptCancelButton<T> | true | string;\n}\n\nexport interface IPromptWithCustomCancel<T> extends IPrompt<T> {\n\treadonly cancelButton: IPromptCancelButton<T>;\n}\n\nexport interface IPromptWithDefaultCancel<T> extends IPrompt<T> {\n\treadonly cancelButton: true | string;\n}\n\nexport interface IPromptResult<T> extends ICheckboxResult {\n\n\t/**\n\t * The result of the `IPromptButton` that was pressed or `undefined` if none.\n\t */\n\treadonly result?: T;\n}\n\nexport interface IPromptResultWithCancel<T> extends IPromptResult<T> {\n\treadonly result: T;\n}\n\nexport interface IAsyncPromptResult<T> extends ICheckboxResult {\n\n\t/**\n\t * The result of the `IPromptButton` that was pressed or `undefined` if none.\n\t */\n\treadonly result?: Promise<T>;\n}\n\nexport interface IAsyncPromptResultWithCancel<T> extends IAsyncPromptResult<T> {\n\treadonly result: Promise<T>;\n}\n\nexport type IDialogResult = IConfirmationResult | IInputResult | IAsyncPromptResult<unknown>;\n\nexport type DialogType = 'none' | 'info' | 'error' | 'question' | 'warning';\n\nexport interface ICheckbox {\n\treadonly label: string;\n\treadonly checked?: boolean;\n}\n\nexport interface ICheckboxResult {\n\n\t/**\n\t * This will only be defined if the confirmation was created\n\t * with the checkbox option defined.\n\t */\n\treadonly checkboxChecked?: boolean;\n}\n\nexport interface IPickAndOpenOptions {\n\treadonly forceNewWindow?: boolean;\n\tdefaultUri?: URI;\n\treadonly telemetryExtraData?: ITelemetryData;\n\tavailableFileSystems?: string[];\n\tremoteAuthority?: string | null;\n}\n\nexport interface FileFilter {\n\treadonly extensions: string[];\n\treadonly name: string;\n}\n\nexport interface ISaveDialogOptions {\n\n\t/**\n\t * A human-readable string for the dialog title\n\t */\n\ttitle?: string;\n\n\t/**\n\t * The resource the dialog shows when opened.\n\t */\n\tdefaultUri?: URI;\n\n\t/**\n\t * A set of file filters that are used by the dialog. Each entry is a human readable label,\n\t * like \"TypeScript\", and an array of extensions.\n\t */\n\tfilters?: FileFilter[];\n\n\t/**\n\t * A human-readable string for the ok button\n\t */\n\treadonly saveLabel?: string;\n\n\t/**\n\t * Specifies a list of schemas for the file systems the user can save to. If not specified, uses the schema of the defaultURI or, if also not specified,\n\t * the schema of the current window.\n\t */\n\tavailableFileSystems?: readonly string[];\n}\n\nexport interface IOpenDialogOptions {\n\n\t/**\n\t * A human-readable string for the dialog title\n\t */\n\treadonly title?: string;\n\n\t/**\n\t * The resource the dialog shows when opened.\n\t */\n\tdefaultUri?: URI;\n\n\t/**\n\t * A human-readable string for the open button.\n\t */\n\treadonly openLabel?: string;\n\n\t/**\n\t * Allow to select files, defaults to `true`.\n\t */\n\tcanSelectFiles?: boolean;\n\n\t/**\n\t * Allow to select folders, defaults to `false`.\n\t */\n\tcanSelectFolders?: boolean;\n\n\t/**\n\t * Allow to select many files or folders.\n\t */\n\treadonly canSelectMany?: boolean;\n\n\t/**\n\t * A set of file filters that are used by the dialog. Each entry is a human readable label,\n\t * like \"TypeScript\", and an array of extensions.\n\t */\n\tfilters?: FileFilter[];\n\n\t/**\n\t * Specifies a list of schemas for the file systems the user can load from. If not specified, uses the schema of the defaultURI or, if also not available,\n\t * the schema of the current window.\n\t */\n\tavailableFileSystems?: readonly string[];\n}\n\nexport const IDialogService = createDecorator<IDialogService>('dialogService');\n\nexport interface ICustomDialogOptions {\n\treadonly buttonDetails?: string[];\n\treadonly markdownDetails?: ICustomDialogMarkdown[];\n\treadonly classes?: string[];\n\treadonly icon?: ThemeIcon;\n\treadonly disableCloseAction?: boolean;\n}\n\nexport interface ICustomDialogMarkdown {\n\treadonly markdown: IMarkdownString;\n\treadonly classes?: string[];\n}\n\n/**\n * A handler to bring up modal dialogs.\n */\nexport interface IDialogHandler {\n\n\t/**\n\t * Ask the user for confirmation with a modal dialog.\n\t */\n\tconfirm(confirmation: IConfirmation): Promise<IConfirmationResult>;\n\n\t/**\n\t * Prompt the user with a modal dialog.\n\t */\n\tprompt<T>(prompt: IPrompt<T>): Promise<IAsyncPromptResult<T>>;\n\n\t/**\n\t * Present a modal dialog to the user asking for input.\n\t */\n\tinput(input: IInput): Promise<IInputResult>;\n\n\t/**\n\t * Present the about dialog to the user.\n\t */\n\tabout(): Promise<void>;\n}\n\nenum DialogKind {\n\tConfirmation = 1,\n\tPrompt,\n\tInput\n}\n\nexport abstract class AbstractDialogHandler implements IDialogHandler {\n\n\tprotected getConfirmationButtons(dialog: IConfirmation): string[] {\n\t\treturn this.getButtons(dialog, DialogKind.Confirmation);\n\t}\n\n\tprotected getPromptButtons(dialog: IPrompt<unknown>): string[] {\n\t\treturn this.getButtons(dialog, DialogKind.Prompt);\n\t}\n\n\tprotected getInputButtons(dialog: IInput): string[] {\n\t\treturn this.getButtons(dialog, DialogKind.Input);\n\t}\n\n\tprivate getButtons(dialog: IConfirmation, kind: DialogKind.Confirmation): string[];\n\tprivate getButtons(dialog: IPrompt<unknown>, kind: DialogKind.Prompt): string[];\n\tprivate getButtons(dialog: IInput, kind: DialogKind.Input): string[];\n\tprivate getButtons(dialog: IConfirmation | IInput | IPrompt<unknown>, kind: DialogKind): string[] {\n\n\t\t// We put buttons in the order of \"default\" button first and \"cancel\"\n\t\t// button last. There maybe later processing when presenting the buttons\n\t\t// based on OS standards.\n\n\t\tconst buttons: string[] = [];\n\n\t\tswitch (kind) {\n\t\t\tcase DialogKind.Confirmation: {\n\t\t\t\tconst confirmationDialog = dialog as IConfirmation;\n\n\t\t\t\tif (confirmationDialog.primaryButton) {\n\t\t\t\t\tbuttons.push(confirmationDialog.primaryButton);\n\t\t\t\t} else {\n\t\t\t\t\tbuttons.push(localize({ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"));\n\t\t\t\t}\n\n\t\t\t\tif (confirmationDialog.cancelButton) {\n\t\t\t\t\tbuttons.push(confirmationDialog.cancelButton);\n\t\t\t\t} else {\n\t\t\t\t\tbuttons.push(localize('cancelButton', \"Cancel\"));\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase DialogKind.Prompt: {\n\t\t\t\tconst promptDialog = dialog as IPrompt<unknown>;\n\n\t\t\t\tif (Array.isArray(promptDialog.buttons) && promptDialog.buttons.length > 0) {\n\t\t\t\t\tbuttons.push(...promptDialog.buttons.map(button => button.label));\n\t\t\t\t}\n\n\t\t\t\tif (promptDialog.cancelButton) {\n\t\t\t\t\tif (promptDialog.cancelButton === true) {\n\t\t\t\t\t\tbuttons.push(localize('cancelButton', \"Cancel\"));\n\t\t\t\t\t} else if (typeof promptDialog.cancelButton === 'string') {\n\t\t\t\t\t\tbuttons.push(promptDialog.cancelButton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (promptDialog.cancelButton.label) {\n\t\t\t\t\t\t\tbuttons.push(promptDialog.cancelButton.label);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbuttons.push(localize('cancelButton', \"Cancel\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (buttons.length === 0) {\n\t\t\t\t\tbuttons.push(localize({ key: 'okButton', comment: ['&& denotes a mnemonic'] }, \"&&OK\"));\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase DialogKind.Input: {\n\t\t\t\tconst inputDialog = dialog as IInput;\n\n\t\t\t\tif (inputDialog.primaryButton) {\n\t\t\t\t\tbuttons.push(inputDialog.primaryButton);\n\t\t\t\t} else {\n\t\t\t\t\tbuttons.push(localize({ key: 'okButton', comment: ['&& denotes a mnemonic'] }, \"&&OK\"));\n\t\t\t\t}\n\n\t\t\t\tif (inputDialog.cancelButton) {\n\t\t\t\t\tbuttons.push(inputDialog.cancelButton);\n\t\t\t\t} else {\n\t\t\t\t\tbuttons.push(localize('cancelButton', \"Cancel\"));\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn buttons;\n\t}\n\n\tprotected getDialogType(type: Severity | DialogType | undefined): DialogType | undefined {\n\t\tif (typeof type === 'string') {\n\t\t\treturn type;\n\t\t}\n\n\t\tif (typeof type === 'number') {\n\t\t\treturn (type === Severity.Info) ? 'info' : (type === Severity.Error) ? 'error' : (type === Severity.Warning) ? 'warning' : 'none';\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected getPromptResult<T>(prompt: IPrompt<T>, buttonIndex: number, checkboxChecked: boolean | undefined): IAsyncPromptResult<T> {\n\t\tconst promptButtons: IPromptBaseButton<T>[] = [...(prompt.buttons ?? [])];\n\t\tif (prompt.cancelButton && typeof prompt.cancelButton !== 'string' && typeof prompt.cancelButton !== 'boolean') {\n\t\t\tpromptButtons.push(prompt.cancelButton);\n\t\t}\n\n\t\tlet result = promptButtons[buttonIndex]?.run({ checkboxChecked });\n\t\tif (!(result instanceof Promise)) {\n\t\t\tresult = Promise.resolve(result);\n\t\t}\n\n\t\treturn { result, checkboxChecked };\n\t}\n\n\tabstract confirm(confirmation: IConfirmation): Promise<IConfirmationResult>;\n\tabstract input(input: IInput): Promise<IInputResult>;\n\tabstract prompt<T>(prompt: IPrompt<T>): Promise<IAsyncPromptResult<T>>;\n\tabstract about(): Promise<void>;\n}\n\n/**\n * A service to bring up modal dialogs.\n *\n * Note: use the `INotificationService.prompt()` method for a non-modal way to ask\n * the user for input.\n */\nexport interface IDialogService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event that fires when a dialog is about to show.\n\t */\n\tonWillShowDialog: Event<void>;\n\n\t/**\n\t * An event that fires when a dialog did show (closed).\n\t */\n\tonDidShowDialog: Event<void>;\n\n\t/**\n\t * Ask the user for confirmation with a modal dialog.\n\t */\n\tconfirm(confirmation: IConfirmation): Promise<IConfirmationResult>;\n\n\t/**\n\t * Prompt the user with a modal dialog. Provides a bit\n\t * more control over the dialog compared to the simpler\n\t * `confirm` method. Specifically, allows to show more\n\t * than 2 buttons and makes it easier to just show a\n\t * message to the user.\n\t *\n\t * @returns a promise that resolves to the `T` result\n\t * from the provided `IPromptButton<T>` or `undefined`.\n\t */\n\tprompt<T>(prompt: IPromptWithCustomCancel<T>): Promise<IPromptResultWithCancel<T>>;\n\tprompt<T>(prompt: IPromptWithDefaultCancel<T>): Promise<IPromptResult<T>>;\n\tprompt<T>(prompt: IPrompt<T>): Promise<IPromptResult<T>>;\n\n\t/**\n\t * Present a modal dialog to the user asking for input.\n\t */\n\tinput(input: IInput): Promise<IInputResult>;\n\n\t/**\n\t * Show a modal info dialog.\n\t */\n\tinfo(message: string, detail?: string): Promise<void>;\n\n\t/**\n\t * Show a modal warning dialog.\n\t */\n\twarn(message: string, detail?: string): Promise<void>;\n\n\t/**\n\t * Show a modal error dialog.\n\t */\n\terror(message: string, detail?: string): Promise<void>;\n\n\t/**\n\t * Present the about dialog to the user.\n\t */\n\tabout(): Promise<void>;\n}\n\nexport const IFileDialogService = createDecorator<IFileDialogService>('fileDialogService');\n\n/**\n * A service to bring up file dialogs.\n */\nexport interface IFileDialogService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * The default path for a new file based on previously used files.\n\t * @param schemeFilter The scheme of the file path. If no filter given, the scheme of the current window is used.\n\t * Falls back to user home in the absence of enough information to find a better URI.\n\t */\n\tdefaultFilePath(schemeFilter?: string): Promise<URI>;\n\n\t/**\n\t * The default path for a new folder based on previously used folders.\n\t * @param schemeFilter The scheme of the folder path. If no filter given, the scheme of the current window is used.\n\t * Falls back to user home in the absence of enough information to find a better URI.\n\t */\n\tdefaultFolderPath(schemeFilter?: string): Promise<URI>;\n\n\t/**\n\t * The default path for a new workspace based on previously used workspaces.\n\t * @param schemeFilter The scheme of the workspace path. If no filter given, the scheme of the current window is used.\n\t * Falls back to user home in the absence of enough information to find a better URI.\n\t */\n\tdefaultWorkspacePath(schemeFilter?: string): Promise<URI>;\n\n\t/**\n\t * Shows a file-folder selection dialog and opens the selected entry.\n\t */\n\tpickFileFolderAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\n\t/**\n\t * Shows a file selection dialog and opens the selected entry.\n\t */\n\tpickFileAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\n\t/**\n\t * Shows a folder selection dialog and opens the selected entry.\n\t */\n\tpickFolderAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\n\t/**\n\t * Shows a workspace selection dialog and opens the selected entry.\n\t */\n\tpickWorkspaceAndOpen(options: IPickAndOpenOptions): Promise<void>;\n\n\t/**\n\t * Shows a save file dialog and save the file at the chosen file URI.\n\t */\n\tpickFileToSave(defaultUri: URI, availableFileSystems?: string[]): Promise<URI | undefined>;\n\n\t/**\n\t * The preferred folder path to open the dialog at.\n\t * @param schemeFilter The scheme of the file path. If no filter given, the scheme of the current window is used.\n\t * Falls back to user home in the absence of a setting.\n\t */\n\tpreferredHome(schemeFilter?: string): Promise<URI>;\n\n\t/**\n\t * Shows a save file dialog and returns the chosen file URI.\n\t */\n\tshowSaveDialog(options: ISaveDialogOptions): Promise<URI | undefined>;\n\n\t/**\n\t * Shows a confirm dialog for saving 1-N files.\n\t */\n\tshowSaveConfirm(fileNamesOrResources: (string | URI)[]): Promise<ConfirmResult>;\n\n\t/**\n\t * Shows a open file dialog and returns the chosen file URI.\n\t */\n\tshowOpenDialog(options: IOpenDialogOptions): Promise<URI[] | undefined>;\n}\n\nexport const enum ConfirmResult {\n\tSAVE,\n\tDONT_SAVE,\n\tCANCEL\n}\n\nconst MAX_CONFIRM_FILES = 10;\nexport function getFileNamesMessage(fileNamesOrResources: readonly (string | URI)[]): string {\n\tconst message: string[] = [];\n\tmessage.push(...fileNamesOrResources.slice(0, MAX_CONFIRM_FILES).map(fileNameOrResource => typeof fileNameOrResource === 'string' ? fileNameOrResource : basename(fileNameOrResource)));\n\n\tif (fileNamesOrResources.length > MAX_CONFIRM_FILES) {\n\t\tif (fileNamesOrResources.length - MAX_CONFIRM_FILES === 1) {\n\t\t\tmessage.push(localize('moreFile', \"...1 additional file not shown\"));\n\t\t} else {\n\t\t\tmessage.push(localize('moreFiles', \"...{0} additional files not shown\", fileNamesOrResources.length - MAX_CONFIRM_FILES));\n\t\t}\n\t}\n\n\tmessage.push('');\n\treturn message.join('\\n');\n}\n\nexport interface INativeOpenDialogOptions {\n\treadonly forceNewWindow?: boolean;\n\n\treadonly defaultPath?: string;\n\n\treadonly telemetryEventName?: string;\n\treadonly telemetryExtraData?: ITelemetryData;\n}\n\nexport interface IMassagedMessageBoxOptions {\n\n\t/**\n\t * OS massaged message box options.\n\t */\n\treadonly options: MessageBoxOptions;\n\n\t/**\n\t * Since the massaged result of the message box options potentially\n\t * changes the order of buttons, we have to keep a map of these\n\t * changes so that we can still return the correct index to the caller.\n\t */\n\treadonly buttonIndeces: number[];\n}\n\n/**\n * A utility method to ensure the options for the message box dialog\n * are using properties that are consistent across all platforms and\n * specific to the platform where necessary.\n */\nexport function massageMessageBoxOptions(options: MessageBoxOptions, productService: IProductService): IMassagedMessageBoxOptions {\n\tconst massagedOptions = deepClone(options);\n\n\tlet buttons = (massagedOptions.buttons ?? []).map(button => mnemonicButtonLabel(button));\n\tlet buttonIndeces = (options.buttons || []).map((button, index) => index);\n\n\tlet defaultId = 0; // by default the first button is default button\n\tlet cancelId = massagedOptions.cancelId ?? buttons.length - 1; // by default the last button is cancel button\n\n\t// Apply HIG per OS when more than one button is used\n\tif (buttons.length > 1) {\n\t\tconst cancelButton = typeof cancelId === 'number' ? buttons[cancelId] : undefined;\n\n\t\tif (isLinux || isMacintosh) {\n\n\t\t\t// Linux: the GNOME HIG (https://developer.gnome.org/hig/patterns/feedback/dialogs.html?highlight=dialog)\n\t\t\t// recommend the following:\n\t\t\t// \"Always ensure that the cancel button appears first, before the affirmative button. In left-to-right\n\t\t\t//  locales, this is on the left. This button order ensures that users become aware of, and are reminded\n\t\t\t//  of, the ability to cancel prior to encountering the affirmative button.\"\n\t\t\t//\n\t\t\t// Electron APIs do not reorder buttons for us, so we ensure a reverse order of buttons and a position\n\t\t\t// of the cancel button (if provided) that matches the HIG\n\n\t\t\t// macOS: the HIG (https://developer.apple.com/design/human-interface-guidelines/components/presentation/alerts)\n\t\t\t// recommend the following:\n\t\t\t// \"Place buttons where people expect. In general, place the button people are most likely to choose on the trailing side in a\n\t\t\t//  row of buttons or at the top in a stack of buttons. Always place the default button on the trailing side of a row or at the\n\t\t\t//  top of a stack. Cancel buttons are typically on the leading side of a row or at the bottom of a stack.\"\n\t\t\t//\n\t\t\t// However: it seems that older macOS versions where 3 buttons were presented in a row differ from this\n\t\t\t// recommendation. In fact, cancel buttons were placed to the left of the default button and secondary\n\t\t\t// buttons on the far left. To support these older macOS versions we have to manually shuffle the cancel\n\t\t\t// button in the same way as we do on Linux. This will not have any impact on newer macOS versions where\n\t\t\t// shuffling is done for us.\n\n\t\t\tif (typeof cancelButton === 'string' && buttons.length > 1 && cancelId !== 1) {\n\t\t\t\tbuttons.splice(cancelId, 1);\n\t\t\t\tbuttons.splice(1, 0, cancelButton);\n\n\t\t\t\tconst cancelButtonIndex = buttonIndeces[cancelId];\n\t\t\t\tbuttonIndeces.splice(cancelId, 1);\n\t\t\t\tbuttonIndeces.splice(1, 0, cancelButtonIndex);\n\n\t\t\t\tcancelId = 1;\n\t\t\t}\n\n\t\t\tif (isLinux && buttons.length > 1) {\n\t\t\t\tbuttons = buttons.reverse();\n\t\t\t\tbuttonIndeces = buttonIndeces.reverse();\n\n\t\t\t\tdefaultId = buttons.length - 1;\n\t\t\t\tif (typeof cancelButton === 'string') {\n\t\t\t\t\tcancelId = defaultId - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isWindows) {\n\n\t\t\t// Windows: the HIG (https://learn.microsoft.com/en-us/windows/win32/uxguide/win-dialog-box)\n\t\t\t// recommend the following:\n\t\t\t// \"One of the following sets of concise commands: Yes/No, Yes/No/Cancel, [Do it]/Cancel,\n\t\t\t//  [Do it]/[Don't do it], [Do it]/[Don't do it]/Cancel.\"\n\t\t\t//\n\t\t\t// Electron APIs do not reorder buttons for us, so we ensure the position of the cancel button\n\t\t\t// (if provided) that matches the HIG\n\n\t\t\tif (typeof cancelButton === 'string' && buttons.length > 1 && cancelId !== buttons.length - 1 /* last action */) {\n\t\t\t\tbuttons.splice(cancelId, 1);\n\t\t\t\tbuttons.push(cancelButton);\n\n\t\t\t\tconst buttonIndex = buttonIndeces[cancelId];\n\t\t\t\tbuttonIndeces.splice(cancelId, 1);\n\t\t\t\tbuttonIndeces.push(buttonIndex);\n\n\t\t\t\tcancelId = buttons.length - 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tmassagedOptions.buttons = buttons;\n\tmassagedOptions.defaultId = defaultId;\n\tmassagedOptions.cancelId = cancelId;\n\tmassagedOptions.noLink = true;\n\tmassagedOptions.title = massagedOptions.title || productService.nameLong;\n\n\treturn {\n\t\toptions: massagedOptions,\n\t\tbuttonIndeces\n\t};\n}\n"]}