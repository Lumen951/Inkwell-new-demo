{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/platform/contextview/browser/contextViewService.ts","vs/platform/contextview/browser/contextViewService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;;;;;;;;;;AAEhG,kFAAuG;AACvG,8DAAuF;AACvF,sEAAoE;AAEpE,mDAAsD;AAE/C,IAAM,kBAAkB,GAAxB,MAAM,kBAAmB,SAAQ,sBAAU;IAOjD,YACiB,aAA8C;QAE9D,KAAK,EAAE,CAAC;QAFyB,kBAAa,GAAb,aAAa,CAAgB;QAJvD,0BAAqB,GAAgB,sBAAU,CAAC,IAAI,CAAC;QAC5C,gBAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,yBAAW,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,0CAAkC,CAAC,CAAC;QAOjI,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,cAAc;IAEd,eAAe,CAAC,QAA8B,EAAE,SAAuB,EAAE,UAAoB;QAC5F,IAAI,WAAmC,CAAC;QACxC,IAAI,SAAS,EAAE,CAAC;YACf,IAAI,SAAS,KAAK,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAA,eAAS,EAAC,SAAS,CAAC,CAAC,EAAE,CAAC;gBACzE,WAAW,0CAAkC,CAAC;YAC/C,CAAC;iBAAM,IAAI,UAAU,EAAE,CAAC;gBACvB,WAAW,8CAAsC,CAAC;YACnD,CAAC;iBAAM,CAAC;gBACP,WAAW,uCAA+B,CAAC;YAC5C,CAAC;QACF,CAAC;aAAM,CAAC;YACP,WAAW,0CAAkC,CAAC;QAC/C,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QAE5F,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEhC,MAAM,UAAU,GAAG,IAAA,wBAAY,EAAC,GAAG,EAAE;YACpC,IAAI,IAAI,CAAC,qBAAqB,KAAK,UAAU,EAAE,CAAC;gBAC/C,IAAI,CAAC,eAAe,EAAE,CAAC;YACxB,CAAC;QACF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,GAAG,UAAU,CAAC;QACxC,OAAO,UAAU,CAAC;IACnB,CAAC;IAED,qBAAqB;QACpB,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;IAC1C,CAAC;IAED,MAAM;QACL,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;IAC3B,CAAC;IAED,eAAe,CAAC,IAAU;QACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAEQ,OAAO;QACf,KAAK,CAAC,OAAO,EAAE,CAAC;QAEhB,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,CAAC;QACrC,IAAI,CAAC,qBAAqB,GAAG,sBAAU,CAAC,IAAI,CAAC;IAC9C,CAAC;CACD,CAAA;AAhEY,gDAAkB;6BAAlB,kBAAkB;IAQ5B,WAAA,8BAAc,CAAA;GARJ,kBAAkB,CAgE9B","file":"contextViewService.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ContextView, ContextViewDOMPosition } from '../../../base/browser/ui/contextview/contextview';\nimport { Disposable, IDisposable, toDisposable } from '../../../base/common/lifecycle';\nimport { ILayoutService } from '../../layout/browser/layoutService';\nimport { IContextViewDelegate, IContextViewService } from './contextView';\nimport { getWindow } from '../../../base/browser/dom';\n\nexport class ContextViewService extends Disposable implements IContextViewService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate currentViewDisposable: IDisposable = Disposable.None;\n\tprivate readonly contextView = this._register(new ContextView(this.layoutService.mainContainer, ContextViewDOMPosition.ABSOLUTE));\n\n\tconstructor(\n\t\t@ILayoutService private readonly layoutService: ILayoutService\n\t) {\n\t\tsuper();\n\n\t\tthis.layout();\n\t\tthis._register(layoutService.onDidLayoutContainer(() => this.layout()));\n\t}\n\n\t// ContextView\n\n\tshowContextView(delegate: IContextViewDelegate, container?: HTMLElement, shadowRoot?: boolean): IDisposable {\n\t\tlet domPosition: ContextViewDOMPosition;\n\t\tif (container) {\n\t\t\tif (container === this.layoutService.getContainer(getWindow(container))) {\n\t\t\t\tdomPosition = ContextViewDOMPosition.ABSOLUTE;\n\t\t\t} else if (shadowRoot) {\n\t\t\t\tdomPosition = ContextViewDOMPosition.FIXED_SHADOW;\n\t\t\t} else {\n\t\t\t\tdomPosition = ContextViewDOMPosition.FIXED;\n\t\t\t}\n\t\t} else {\n\t\t\tdomPosition = ContextViewDOMPosition.ABSOLUTE;\n\t\t}\n\n\t\tthis.contextView.setContainer(container ?? this.layoutService.activeContainer, domPosition);\n\n\t\tthis.contextView.show(delegate);\n\n\t\tconst disposable = toDisposable(() => {\n\t\t\tif (this.currentViewDisposable === disposable) {\n\t\t\t\tthis.hideContextView();\n\t\t\t}\n\t\t});\n\n\t\tthis.currentViewDisposable = disposable;\n\t\treturn disposable;\n\t}\n\n\tgetContextViewElement(): HTMLElement {\n\t\treturn this.contextView.getViewElement();\n\t}\n\n\tlayout(): void {\n\t\tthis.contextView.layout();\n\t}\n\n\thideContextView(data?: any): void {\n\t\tthis.contextView.hide(data);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.currentViewDisposable.dispose();\n\t\tthis.currentViewDisposable = Disposable.None;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ContextView, ContextViewDOMPosition } from '../../../base/browser/ui/contextview/contextview';\nimport { Disposable, IDisposable, toDisposable } from '../../../base/common/lifecycle';\nimport { ILayoutService } from '../../layout/browser/layoutService';\nimport { IContextViewDelegate, IContextViewService } from './contextView';\nimport { getWindow } from '../../../base/browser/dom';\n\nexport class ContextViewService extends Disposable implements IContextViewService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate currentViewDisposable: IDisposable = Disposable.None;\n\tprivate readonly contextView = this._register(new ContextView(this.layoutService.mainContainer, ContextViewDOMPosition.ABSOLUTE));\n\n\tconstructor(\n\t\t@ILayoutService private readonly layoutService: ILayoutService\n\t) {\n\t\tsuper();\n\n\t\tthis.layout();\n\t\tthis._register(layoutService.onDidLayoutContainer(() => this.layout()));\n\t}\n\n\t// ContextView\n\n\tshowContextView(delegate: IContextViewDelegate, container?: HTMLElement, shadowRoot?: boolean): IDisposable {\n\t\tlet domPosition: ContextViewDOMPosition;\n\t\tif (container) {\n\t\t\tif (container === this.layoutService.getContainer(getWindow(container))) {\n\t\t\t\tdomPosition = ContextViewDOMPosition.ABSOLUTE;\n\t\t\t} else if (shadowRoot) {\n\t\t\t\tdomPosition = ContextViewDOMPosition.FIXED_SHADOW;\n\t\t\t} else {\n\t\t\t\tdomPosition = ContextViewDOMPosition.FIXED;\n\t\t\t}\n\t\t} else {\n\t\t\tdomPosition = ContextViewDOMPosition.ABSOLUTE;\n\t\t}\n\n\t\tthis.contextView.setContainer(container ?? this.layoutService.activeContainer, domPosition);\n\n\t\tthis.contextView.show(delegate);\n\n\t\tconst disposable = toDisposable(() => {\n\t\t\tif (this.currentViewDisposable === disposable) {\n\t\t\t\tthis.hideContextView();\n\t\t\t}\n\t\t});\n\n\t\tthis.currentViewDisposable = disposable;\n\t\treturn disposable;\n\t}\n\n\tgetContextViewElement(): HTMLElement {\n\t\treturn this.contextView.getViewElement();\n\t}\n\n\tlayout(): void {\n\t\tthis.contextView.layout();\n\t}\n\n\thideContextView(data?: any): void {\n\t\tthis.contextView.hide(data);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.currentViewDisposable.dispose();\n\t\tthis.currentViewDisposable = Disposable.None;\n\t}\n}\n"]}