{"version":3,"sources":["vs/platform/workspace/common/workspace.ts"],"names":[],"mappings":"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","file":"workspace.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from '../../../nls';\nimport { Event } from '../../../base/common/event';\nimport { basename, extname } from '../../../base/common/path';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree';\nimport { extname as resourceExtname, basenameOrAuthority, joinPath, extUriBiasedIgnorePathCase } from '../../../base/common/resources';\nimport { URI, UriComponents } from '../../../base/common/uri';\nimport { createDecorator } from '../../instantiation/common/instantiation';\nimport { IEnvironmentService } from '../../environment/common/environment';\nimport { Schemas } from '../../../base/common/network';\n\nexport const IWorkspaceContextService = createDecorator<IWorkspaceContextService>('contextService');\n\nexport interface IWorkspaceContextService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event which fires on workbench state changes.\n\t */\n\treadonly onDidChangeWorkbenchState: Event<WorkbenchState>;\n\n\t/**\n\t * An event which fires on workspace name changes.\n\t */\n\treadonly onDidChangeWorkspaceName: Event<void>;\n\n\t/**\n\t * An event which fires before workspace folders change.\n\t */\n\treadonly onWillChangeWorkspaceFolders: Event<IWorkspaceFoldersWillChangeEvent>;\n\n\t/**\n\t * An event which fires on workspace folders change.\n\t */\n\treadonly onDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent>;\n\n\t/**\n\t * Provides access to the complete workspace object.\n\t */\n\tgetCompleteWorkspace(): Promise<IWorkspace>;\n\n\t/**\n\t * Provides access to the workspace object the window is running with.\n\t * Use `getCompleteWorkspace` to get complete workspace object.\n\t */\n\tgetWorkspace(): IWorkspace;\n\n\t/**\n\t * Return the state of the workbench.\n\t *\n\t * WorkbenchState.EMPTY - if the workbench was opened with empty window or file\n\t * WorkbenchState.FOLDER - if the workbench was opened with a folder\n\t * WorkbenchState.WORKSPACE - if the workbench was opened with a workspace\n\t */\n\tgetWorkbenchState(): WorkbenchState;\n\n\t/**\n\t * Returns the folder for the given resource from the workspace.\n\t * Can be null if there is no workspace or the resource is not inside the workspace.\n\t */\n\tgetWorkspaceFolder(resource: URI): IWorkspaceFolder | null;\n\n\t/**\n\t * Return `true` if the current workspace has the given identifier or root URI otherwise `false`.\n\t */\n\tisCurrentWorkspace(workspaceIdOrFolder: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | URI): boolean;\n\n\t/**\n\t * Returns if the provided resource is inside the workspace or not.\n\t */\n\tisInsideWorkspace(resource: URI): boolean;\n}\n\nexport interface IResolvedWorkspace extends IWorkspaceIdentifier, IBaseWorkspace {\n\treadonly folders: IWorkspaceFolder[];\n}\n\nexport interface IBaseWorkspace {\n\n\t/**\n\t * If present, marks the window that opens the workspace\n\t * as a remote window with the given authority.\n\t */\n\treadonly remoteAuthority?: string;\n\n\t/**\n\t * Transient workspaces are meant to go away after being used\n\t * once, e.g. a window reload of a transient workspace will\n\t * open an empty window.\n\t *\n\t * See: https://github.com/microsoft/vscode/issues/119695\n\t */\n\treadonly transient?: boolean;\n}\n\nexport interface IBaseWorkspaceIdentifier {\n\n\t/**\n\t * Every workspace (multi-root, single folder or empty)\n\t * has a unique identifier. It is not possible to open\n\t * a workspace with the same `id` in multiple windows\n\t */\n\treadonly id: string;\n}\n\n/**\n * A single folder workspace identifier is a path to a folder + id.\n */\nexport interface ISingleFolderWorkspaceIdentifier extends IBaseWorkspaceIdentifier {\n\n\t/**\n\t * Folder path as `URI`.\n\t */\n\treadonly uri: URI;\n}\n\n/**\n * A multi-root workspace identifier is a path to a workspace file + id.\n */\nexport interface IWorkspaceIdentifier extends IBaseWorkspaceIdentifier {\n\n\t/**\n\t * Workspace config file path as `URI`.\n\t */\n\tconfigPath: URI;\n}\n\nexport interface IEmptyWorkspaceIdentifier extends IBaseWorkspaceIdentifier { }\n\nexport type IAnyWorkspaceIdentifier = IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier;\n\nexport function isSingleFolderWorkspaceIdentifier(obj: unknown): obj is ISingleFolderWorkspaceIdentifier {\n\tconst singleFolderIdentifier = obj as ISingleFolderWorkspaceIdentifier | undefined;\n\n\treturn typeof singleFolderIdentifier?.id === 'string' && URI.isUri(singleFolderIdentifier.uri);\n}\n\nexport function isEmptyWorkspaceIdentifier(obj: unknown): obj is IEmptyWorkspaceIdentifier {\n\tconst emptyWorkspaceIdentifier = obj as IEmptyWorkspaceIdentifier | undefined;\n\treturn typeof emptyWorkspaceIdentifier?.id === 'string'\n\t\t&& !isSingleFolderWorkspaceIdentifier(obj)\n\t\t&& !isWorkspaceIdentifier(obj);\n}\n\nexport const EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE: IEmptyWorkspaceIdentifier = { id: 'ext-dev' };\nexport const UNKNOWN_EMPTY_WINDOW_WORKSPACE: IEmptyWorkspaceIdentifier = { id: 'empty-window' };\n\nexport function toWorkspaceIdentifier(workspace: IWorkspace): IAnyWorkspaceIdentifier;\nexport function toWorkspaceIdentifier(backupPath: string | undefined, isExtensionDevelopment: boolean): IEmptyWorkspaceIdentifier;\nexport function toWorkspaceIdentifier(arg0: IWorkspace | string | undefined, isExtensionDevelopment?: boolean): IAnyWorkspaceIdentifier {\n\n\t// Empty workspace\n\tif (typeof arg0 === 'string' || typeof arg0 === 'undefined') {\n\n\t\t// With a backupPath, the basename is the empty workspace identifier\n\t\tif (typeof arg0 === 'string') {\n\t\t\treturn {\n\t\t\t\tid: basename(arg0)\n\t\t\t};\n\t\t}\n\n\t\t// Extension development empty windows have backups disabled\n\t\t// so we return a constant workspace identifier for extension\n\t\t// authors to allow to restore their workspace state even then.\n\t\tif (isExtensionDevelopment) {\n\t\t\treturn EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE;\n\t\t}\n\n\t\treturn UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n\t}\n\n\t// Multi root\n\tconst workspace = arg0;\n\tif (workspace.configuration) {\n\t\treturn {\n\t\t\tid: workspace.id,\n\t\t\tconfigPath: workspace.configuration\n\t\t};\n\t}\n\n\t// Single folder\n\tif (workspace.folders.length === 1) {\n\t\treturn {\n\t\t\tid: workspace.id,\n\t\t\turi: workspace.folders[0].uri\n\t\t};\n\t}\n\n\t// Empty window\n\treturn {\n\t\tid: workspace.id\n\t};\n}\n\nexport function isWorkspaceIdentifier(obj: unknown): obj is IWorkspaceIdentifier {\n\tconst workspaceIdentifier = obj as IWorkspaceIdentifier | undefined;\n\n\treturn typeof workspaceIdentifier?.id === 'string' && URI.isUri(workspaceIdentifier.configPath);\n}\n\nexport interface ISerializedSingleFolderWorkspaceIdentifier extends IBaseWorkspaceIdentifier {\n\treadonly uri: UriComponents;\n}\n\nexport interface ISerializedWorkspaceIdentifier extends IBaseWorkspaceIdentifier {\n\treadonly configPath: UriComponents;\n}\n\nexport function reviveIdentifier(identifier: undefined): undefined;\nexport function reviveIdentifier(identifier: ISerializedWorkspaceIdentifier): IWorkspaceIdentifier;\nexport function reviveIdentifier(identifier: ISerializedSingleFolderWorkspaceIdentifier): ISingleFolderWorkspaceIdentifier;\nexport function reviveIdentifier(identifier: IEmptyWorkspaceIdentifier): IEmptyWorkspaceIdentifier;\nexport function reviveIdentifier(identifier: ISerializedWorkspaceIdentifier | ISerializedSingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier | undefined): IAnyWorkspaceIdentifier | undefined;\nexport function reviveIdentifier(identifier: ISerializedWorkspaceIdentifier | ISerializedSingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier | undefined): IAnyWorkspaceIdentifier | undefined {\n\n\t// Single Folder\n\tconst singleFolderIdentifierCandidate = identifier as ISerializedSingleFolderWorkspaceIdentifier | undefined;\n\tif (singleFolderIdentifierCandidate?.uri) {\n\t\treturn { id: singleFolderIdentifierCandidate.id, uri: URI.revive(singleFolderIdentifierCandidate.uri) };\n\t}\n\n\t// Multi folder\n\tconst workspaceIdentifierCandidate = identifier as ISerializedWorkspaceIdentifier | undefined;\n\tif (workspaceIdentifierCandidate?.configPath) {\n\t\treturn { id: workspaceIdentifierCandidate.id, configPath: URI.revive(workspaceIdentifierCandidate.configPath) };\n\t}\n\n\t// Empty\n\tif (identifier?.id) {\n\t\treturn { id: identifier.id };\n\t}\n\n\treturn undefined;\n}\n\nexport const enum WorkbenchState {\n\tEMPTY = 1,\n\tFOLDER,\n\tWORKSPACE\n}\n\nexport interface IWorkspaceFoldersWillChangeEvent {\n\n\treadonly changes: IWorkspaceFoldersChangeEvent;\n\treadonly fromCache: boolean;\n\n\tjoin(promise: Promise<void>): void;\n}\n\nexport interface IWorkspaceFoldersChangeEvent {\n\tadded: IWorkspaceFolder[];\n\tremoved: IWorkspaceFolder[];\n\tchanged: IWorkspaceFolder[];\n}\n\nexport interface IWorkspace {\n\n\t/**\n\t * the unique identifier of the workspace.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * Folders in the workspace.\n\t */\n\treadonly folders: IWorkspaceFolder[];\n\n\t/**\n\t * Transient workspaces are meant to go away after being used\n\t * once, e.g. a window reload of a transient workspace will\n\t * open an empty window.\n\t */\n\treadonly transient?: boolean;\n\n\t/**\n\t * the location of the workspace configuration\n\t */\n\treadonly configuration?: URI | null;\n}\n\nexport function isWorkspace(thing: unknown): thing is IWorkspace {\n\tconst candidate = thing as IWorkspace | undefined;\n\n\treturn !!(candidate && typeof candidate === 'object'\n\t\t&& typeof candidate.id === 'string'\n\t\t&& Array.isArray(candidate.folders));\n}\n\nexport interface IWorkspaceFolderData {\n\n\t/**\n\t * The associated URI for this workspace folder.\n\t */\n\treadonly uri: URI;\n\n\t/**\n\t * The name of this workspace folder. Defaults to\n\t * the basename of its [uri-path](#Uri.path)\n\t */\n\treadonly name: string;\n\n\t/**\n\t * The ordinal number of this workspace folder.\n\t */\n\treadonly index: number;\n}\n\nexport interface IWorkspaceFolder extends IWorkspaceFolderData {\n\n\t/**\n\t * Given workspace folder relative path, returns the resource with the absolute path.\n\t */\n\ttoResource: (relativePath: string) => URI;\n}\n\nexport function isWorkspaceFolder(thing: unknown): thing is IWorkspaceFolder {\n\tconst candidate = thing as IWorkspaceFolder;\n\n\treturn !!(candidate && typeof candidate === 'object'\n\t\t&& URI.isUri(candidate.uri)\n\t\t&& typeof candidate.name === 'string'\n\t\t&& typeof candidate.toResource === 'function');\n}\n\nexport class Workspace implements IWorkspace {\n\n\tprivate _foldersMap: TernarySearchTree<URI, WorkspaceFolder> = TernarySearchTree.forUris<WorkspaceFolder>(this._ignorePathCasing, () => true);\n\tprivate _folders!: WorkspaceFolder[];\n\n\tconstructor(\n\t\tprivate _id: string,\n\t\tfolders: WorkspaceFolder[],\n\t\tprivate _transient: boolean,\n\t\tprivate _configuration: URI | null,\n\t\tprivate _ignorePathCasing: (key: URI) => boolean,\n\t) {\n\t\tthis.folders = folders;\n\t}\n\n\tupdate(workspace: Workspace) {\n\t\tthis._id = workspace.id;\n\t\tthis._configuration = workspace.configuration;\n\t\tthis._transient = workspace.transient;\n\t\tthis._ignorePathCasing = workspace._ignorePathCasing;\n\t\tthis.folders = workspace.folders;\n\t}\n\n\tget folders(): WorkspaceFolder[] {\n\t\treturn this._folders;\n\t}\n\n\tset folders(folders: WorkspaceFolder[]) {\n\t\tthis._folders = folders;\n\t\tthis.updateFoldersMap();\n\t}\n\n\tget id(): string {\n\t\treturn this._id;\n\t}\n\n\tget transient(): boolean {\n\t\treturn this._transient;\n\t}\n\n\tget configuration(): URI | null {\n\t\treturn this._configuration;\n\t}\n\n\tset configuration(configuration: URI | null) {\n\t\tthis._configuration = configuration;\n\t}\n\n\tgetFolder(resource: URI): IWorkspaceFolder | null {\n\t\tif (!resource) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._foldersMap.findSubstr(resource) || null;\n\t}\n\n\tprivate updateFoldersMap(): void {\n\t\tthis._foldersMap = TernarySearchTree.forUris<WorkspaceFolder>(this._ignorePathCasing, () => true);\n\t\tfor (const folder of this.folders) {\n\t\t\tthis._foldersMap.set(folder.uri, folder);\n\t\t}\n\t}\n\n\ttoJSON(): IWorkspace {\n\t\treturn { id: this.id, folders: this.folders, transient: this.transient, configuration: this.configuration };\n\t}\n}\n\nexport interface IRawFileWorkspaceFolder {\n\treadonly path: string;\n\tname?: string;\n}\n\nexport interface IRawUriWorkspaceFolder {\n\treadonly uri: string;\n\tname?: string;\n}\n\nexport class WorkspaceFolder implements IWorkspaceFolder {\n\n\treadonly uri: URI;\n\treadonly name: string;\n\treadonly index: number;\n\n\tconstructor(\n\t\tdata: IWorkspaceFolderData,\n\t\t/**\n\t\t * Provides access to the original metadata for this workspace\n\t\t * folder. This can be different from the metadata provided in\n\t\t * this class:\n\t\t * - raw paths can be relative\n\t\t * - raw paths are not normalized\n\t\t */\n\t\treadonly raw?: IRawFileWorkspaceFolder | IRawUriWorkspaceFolder\n\t) {\n\t\tthis.uri = data.uri;\n\t\tthis.index = data.index;\n\t\tthis.name = data.name;\n\t}\n\n\ttoResource(relativePath: string): URI {\n\t\treturn joinPath(this.uri, relativePath);\n\t}\n\n\ttoJSON(): IWorkspaceFolderData {\n\t\treturn { uri: this.uri, name: this.name, index: this.index };\n\t}\n}\n\nexport function toWorkspaceFolder(resource: URI): WorkspaceFolder {\n\treturn new WorkspaceFolder({ uri: resource, index: 0, name: basenameOrAuthority(resource) }, { uri: resource.toString() });\n}\n\nexport const WORKSPACE_EXTENSION = 'code-workspace';\nexport const WORKSPACE_SUFFIX = `.${WORKSPACE_EXTENSION}`;\nexport const WORKSPACE_FILTER = [{ name: localize('codeWorkspace', \"Code Workspace\"), extensions: [WORKSPACE_EXTENSION] }];\nexport const UNTITLED_WORKSPACE_NAME = 'workspace.json';\n\nexport function isUntitledWorkspace(path: URI, environmentService: IEnvironmentService): boolean {\n\treturn extUriBiasedIgnorePathCase.isEqualOrParent(path, environmentService.untitledWorkspacesHome);\n}\n\nexport function isTemporaryWorkspace(workspace: IWorkspace): boolean;\nexport function isTemporaryWorkspace(path: URI): boolean;\nexport function isTemporaryWorkspace(arg1: IWorkspace | URI): boolean {\n\tlet path: URI | null | undefined;\n\tif (URI.isUri(arg1)) {\n\t\tpath = arg1;\n\t} else {\n\t\tpath = arg1.configuration;\n\t}\n\n\treturn path?.scheme === Schemas.tmp;\n}\n\nexport const STANDALONE_EDITOR_WORKSPACE_ID = '4064f6ec-cb38-4ad0-af64-ee6467e63c82';\nexport function isStandaloneEditorWorkspace(workspace: IWorkspace): boolean {\n\treturn workspace.id === STANDALONE_EDITOR_WORKSPACE_ID;\n}\n\nexport function isSavedWorkspace(path: URI, environmentService: IEnvironmentService): boolean {\n\treturn !isUntitledWorkspace(path, environmentService) && !isTemporaryWorkspace(path);\n}\n\nexport function hasWorkspaceFileExtension(path: string | URI) {\n\tconst ext = (typeof path === 'string') ? extname(path) : resourceExtname(path);\n\n\treturn ext === WORKSPACE_SUFFIX;\n}\n"]}