{"version":3,"sources":["file:///workspaces/monaco-editor-core/out-editor-esm/vs/platform/remote/common/remoteHosts.ts","vs/platform/remote/common/remoteHosts.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,0DAAuD;AAGvD,SAAgB,kBAAkB,CAAC,GAAQ;IAC1C,OAAO,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;AACxE,CAAC;AAFD,gDAEC;AAKD,SAAgB,aAAa,CAAC,SAA6B;IAC1D,IAAI,CAAC,SAAS,EAAE,CAAC;QAChB,OAAO,SAAS,CAAC;IAClB,CAAC;IACD,MAAM,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACnC,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC;QACb,sBAAsB;QACtB,OAAO,SAAS,CAAC;IAClB,CAAC;IACD,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AACjC,CAAC;AAVD,sCAUC;AAED;;;;GAIG;AACH,SAAgB,uBAAuB,CAAC,OAA8C;;IACrF,OAAO,IAAI,MAAA,OAAO,CAAC,OAAO,mCAAI,KAAK,IAAI,MAAA,OAAO,CAAC,MAAM,mCAAI,KAAK,EAAE,CAAC;AAClE,CAAC;AAFD,0DAEC;AAED,SAAgB,sBAAsB,CAAC,SAAiB;IACvD,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;IACjD,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE,CAAC;QACjC,MAAM,IAAI,KAAK,CAAC,6BAA6B,SAAS,iGAAiG,CAAC,CAAC;IAC1J,CAAC;IACD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AACvB,CAAC;AAND,wDAMC;AAED,SAAgB,8BAA8B,CAAC,SAAiB,EAAE,WAAmB;IACpF,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;IAC/C,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE,CAAC;QACjC,IAAI,GAAG,WAAW,CAAC;IACpB,CAAC;IACD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AACvB,CAAC;AAND,wEAMC;AAED,SAAS,cAAc,CAAC,SAAiB;IACxC,2BAA2B;IAC3B,MAAM,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;IACvD,IAAI,EAAE,EAAE,CAAC;QACR,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;IACnD,CAAC;IAED,8BAA8B;IAC9B,MAAM,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACjD,IAAI,EAAE,EAAE,CAAC;QACR,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;IACzC,CAAC;IAED,gCAAgC;IAChC,MAAM,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC1C,IAAI,EAAE,EAAE,CAAC;QACR,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;IACnD,CAAC;IAED,yBAAyB;IACzB,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;AAC7C,CAAC","file":"remoteHosts.js","sourceRoot":"file:///workspaces/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from '../../../base/common/network';\nimport { URI } from '../../../base/common/uri';\n\nexport function getRemoteAuthority(uri: URI): string | undefined {\n\treturn uri.scheme === Schemas.vscodeRemote ? uri.authority : undefined;\n}\n\nexport function getRemoteName(authority: string): string;\nexport function getRemoteName(authority: undefined): undefined;\nexport function getRemoteName(authority: string | undefined): string | undefined;\nexport function getRemoteName(authority: string | undefined): string | undefined {\n\tif (!authority) {\n\t\treturn undefined;\n\t}\n\tconst pos = authority.indexOf('+');\n\tif (pos < 0) {\n\t\t// e.g. localhost:8000\n\t\treturn authority;\n\t}\n\treturn authority.substr(0, pos);\n}\n\n/**\n * The root path to use when accessing the remote server. The path contains the quality and commit of the current build.\n * @param product\n * @returns\n */\nexport function getRemoteServerRootPath(product: { quality?: string; commit?: string }): string {\n\treturn `/${product.quality ?? 'oss'}-${product.commit ?? 'dev'}`;\n}\n\nexport function parseAuthorityWithPort(authority: string): { host: string; port: number } {\n\tconst { host, port } = parseAuthority(authority);\n\tif (typeof port === 'undefined') {\n\t\tthrow new Error(`Invalid remote authority: ${authority}. It must either be a remote of form <remoteName>+<arg> or a remote host of form <host>:<port>.`);\n\t}\n\treturn { host, port };\n}\n\nexport function parseAuthorityWithOptionalPort(authority: string, defaultPort: number): { host: string; port: number } {\n\tlet { host, port } = parseAuthority(authority);\n\tif (typeof port === 'undefined') {\n\t\tport = defaultPort;\n\t}\n\treturn { host, port };\n}\n\nfunction parseAuthority(authority: string): { host: string; port: number | undefined } {\n\t// check for ipv6 with port\n\tconst m1 = authority.match(/^(\\[[0-9a-z:]+\\]):(\\d+)$/);\n\tif (m1) {\n\t\treturn { host: m1[1], port: parseInt(m1[2], 10) };\n\t}\n\n\t// check for ipv6 without port\n\tconst m2 = authority.match(/^(\\[[0-9a-z:]+\\])$/);\n\tif (m2) {\n\t\treturn { host: m2[1], port: undefined };\n\t}\n\n\t// anything with a trailing port\n\tconst m3 = authority.match(/(.*):(\\d+)$/);\n\tif (m3) {\n\t\treturn { host: m3[1], port: parseInt(m3[2], 10) };\n\t}\n\n\t// doesn't contain a port\n\treturn { host: authority, port: undefined };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from '../../../base/common/network';\nimport { URI } from '../../../base/common/uri';\n\nexport function getRemoteAuthority(uri: URI): string | undefined {\n\treturn uri.scheme === Schemas.vscodeRemote ? uri.authority : undefined;\n}\n\nexport function getRemoteName(authority: string): string;\nexport function getRemoteName(authority: undefined): undefined;\nexport function getRemoteName(authority: string | undefined): string | undefined;\nexport function getRemoteName(authority: string | undefined): string | undefined {\n\tif (!authority) {\n\t\treturn undefined;\n\t}\n\tconst pos = authority.indexOf('+');\n\tif (pos < 0) {\n\t\t// e.g. localhost:8000\n\t\treturn authority;\n\t}\n\treturn authority.substr(0, pos);\n}\n\n/**\n * The root path to use when accessing the remote server. The path contains the quality and commit of the current build.\n * @param product\n * @returns\n */\nexport function getRemoteServerRootPath(product: { quality?: string; commit?: string }): string {\n\treturn `/${product.quality ?? 'oss'}-${product.commit ?? 'dev'}`;\n}\n\nexport function parseAuthorityWithPort(authority: string): { host: string; port: number } {\n\tconst { host, port } = parseAuthority(authority);\n\tif (typeof port === 'undefined') {\n\t\tthrow new Error(`Invalid remote authority: ${authority}. It must either be a remote of form <remoteName>+<arg> or a remote host of form <host>:<port>.`);\n\t}\n\treturn { host, port };\n}\n\nexport function parseAuthorityWithOptionalPort(authority: string, defaultPort: number): { host: string; port: number } {\n\tlet { host, port } = parseAuthority(authority);\n\tif (typeof port === 'undefined') {\n\t\tport = defaultPort;\n\t}\n\treturn { host, port };\n}\n\nfunction parseAuthority(authority: string): { host: string; port: number | undefined } {\n\t// check for ipv6 with port\n\tconst m1 = authority.match(/^(\\[[0-9a-z:]+\\]):(\\d+)$/);\n\tif (m1) {\n\t\treturn { host: m1[1], port: parseInt(m1[2], 10) };\n\t}\n\n\t// check for ipv6 without port\n\tconst m2 = authority.match(/^(\\[[0-9a-z:]+\\])$/);\n\tif (m2) {\n\t\treturn { host: m2[1], port: undefined };\n\t}\n\n\t// anything with a trailing port\n\tconst m3 = authority.match(/(.*):(\\d+)$/);\n\tif (m3) {\n\t\treturn { host: m3[1], port: parseInt(m3[2], 10) };\n\t}\n\n\t// doesn't contain a port\n\treturn { host: authority, port: undefined };\n}\n"]}