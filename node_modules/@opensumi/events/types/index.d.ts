export interface IDisposable {
    dispose(): void;
}
export type Handler<T extends any[]> = (...args: T) => void;
export declare class EventEmitter<Events extends Record<any, any[]>> {
    private _listeners;
    on<Event extends keyof Events>(event: Event, listener: Handler<Events[Event]>): IDisposable;
    off<Event extends keyof Events>(event: Event, listener: Handler<Events[Event]>): void;
    once<Event extends keyof Events>(event: Event, listener: Handler<Events[Event]>): IDisposable;
    emit<Event extends keyof Events>(event: Event, ...args: Parameters<Handler<Events[Event]>>): void;
    hasListener<Event extends keyof Events>(event: Event): boolean;
    getListeners<Event extends keyof Events>(event: Event): any[];
    dispose(): void;
}
