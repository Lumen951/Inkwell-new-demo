// src/index.ts
var EventEmitter = class {
  constructor() {
    this._listeners = /* @__PURE__ */ new Map();
  }
  on(event, listener) {
    if (!this._listeners.has(event)) {
      this._listeners.set(event, []);
    }
    this._listeners.get(event).push(listener);
    return {
      dispose: () => this.off(event, listener)
    };
  }
  off(event, listener) {
    if (!this._listeners.has(event)) {
      return;
    }
    const listeners = this._listeners.get(event);
    const index = listeners.indexOf(listener);
    if (index !== -1) {
      listeners.splice(index, 1);
    }
  }
  once(event, listener) {
    const toDispose = this.on(
      event,
      (...args) => {
        toDispose.dispose();
        listener.apply(this, args);
      }
    );
    return toDispose;
  }
  emit(event, ...args) {
    if (!this._listeners.has(event)) {
      return;
    }
    [...this._listeners.get(event)].forEach(
      (listener) => listener.apply(this, args)
    );
  }
  hasListener(event) {
    return this._listeners.has(event);
  }
  getListeners(event) {
    return this._listeners.get(event) || [];
  }
  dispose() {
    this._listeners.clear();
  }
};
export {
  EventEmitter
};
